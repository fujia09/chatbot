"use strict";exports.id=684,exports.ids=[684],exports.modules={26684:(e,t,i)=>{i.d(t,{SequentialChain:()=>l,SimpleSequentialChain:()=>u});var r=i(21336);function a(e,t){let i=new Set;for(let r of t)e.has(r)&&i.add(r);return i}function n(e,t){let i=new Set(e);for(let e of t)i.delete(e);return i}function s(e){return Array.from(e).map(e=>`"${e}"`).join(", ")}class l extends r.r{static lc_name(){return"SequentialChain"}get inputKeys(){return this.inputVariables}get outputKeys(){return this.outputVariables}constructor(e){if(super(e),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"outputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"returnAll",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.inputVariables=e.inputVariables,this.outputVariables=e.outputVariables??[],this.outputVariables.length>0&&e.returnAll)throw Error("Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.");this.returnAll=e.returnAll??!1,this._validateChains()}_validateChains(){if(0===this.chains.length)throw Error("Sequential chain must have at least one chain.");let e=this.memory?.memoryKeys??[],t=new Set(this.inputKeys),i=new Set(e),r=a(t,i);if(r.size>0)throw Error(`The following keys: ${s(r)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);let l=function(e,t){let i=new Set(e);for(let e of t)i.add(e);return i}(t,i);for(let e of this.chains){let t=n(new Set(e.inputKeys),l);if(e.memory&&(t=n(t,new Set(e.memory.memoryKeys))),t.size>0)throw Error(`Missing variables for chain "${e._chainType()}": ${s(t)}. Only got the following variables: ${s(l)}.`);let i=new Set(e.outputKeys),r=a(l,i);if(r.size>0)throw Error(`The following output variables for chain "${e._chainType()}" are overlapping: ${s(r)}. This can lead to unexpected behaviour.`);for(let e of i)l.add(e)}if(0===this.outputVariables.length){if(this.returnAll){let e=n(l,t);this.outputVariables=Array.from(e)}else this.outputVariables=this.chains[this.chains.length-1].outputKeys}else{let e=n(new Set(this.outputVariables),new Set(l));if(e.size>0)throw Error(`The following output variables were expected to be in the final chain output but were not found: ${s(e)}.`)}}async _call(e,t){let i={},r=0;for(let a of this.chains)for(let n of(r+=1,Object.keys(i=await a.call(e,t?.getChild(`step_${r}`)))))e[n]=i[n];let a={};for(let t of this.outputVariables)a[t]=e[t];return a}_chainType(){return"sequential_chain"}static async deserialize(e){let t=[],i=e.input_variables,a=e.output_variables;for(let i of e.chains){let e=await r.r.deserialize(i);t.push(e)}return new l({chains:t,inputVariables:i,outputVariables:a})}serialize(){let e=[];for(let t of this.chains)e.push(t.serialize());return{_type:this._chainType(),input_variables:this.inputVariables,output_variables:this.outputVariables,chains:e}}}class u extends r.r{static lc_name(){return"SimpleSequentialChain"}get inputKeys(){return[this.inputKey]}get outputKeys(){return[this.outputKey]}constructor(e){super(e),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputKey",{enumerable:!0,configurable:!0,writable:!0,value:"input"}),Object.defineProperty(this,"outputKey",{enumerable:!0,configurable:!0,writable:!0,value:"output"}),Object.defineProperty(this,"trimOutputs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.trimOutputs=e.trimOutputs??!1,this._validateChains()}_validateChains(){for(let e of this.chains){if(1!==e.inputKeys.filter(t=>!e.memory?.memoryKeys.includes(t)??!0).length)throw Error(`Chains used in SimpleSequentialChain should all have one input, got ${e.inputKeys.length} for ${e._chainType()}.`);if(1!==e.outputKeys.length)throw Error(`Chains used in SimpleSequentialChain should all have one output, got ${e.outputKeys.length} for ${e._chainType()}.`)}}async _call(e,t){let i=e[this.inputKey],r=0;for(let a of this.chains)r+=1,i=(await a.call({[a.inputKeys[0]]:i,signal:e.signal},t?.getChild(`step_${r}`)))[a.outputKeys[0]],this.trimOutputs&&(i=i.trim()),await t?.handleText(i);return{[this.outputKey]:i}}_chainType(){return"simple_sequential_chain"}static async deserialize(e){let t=[];for(let i of e.chains){let e=await r.r.deserialize(i);t.push(e)}return new u({chains:t})}serialize(){let e=[];for(let t of this.chains)e.push(t.serialize());return{_type:this._chainType(),chains:e}}}}};