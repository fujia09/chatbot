"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aptos-labs+aptos-client@1.0.0_axios@1.7.9_got@11.8.6";
exports.ids = ["vendor-chunks/@aptos-labs+aptos-client@1.0.0_axios@1.7.9_got@11.8.6"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@aptos-labs+aptos-client@1.0.0_axios@1.7.9_got@11.8.6/node_modules/@aptos-labs/aptos-client/dist/node/index.node.mjs":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@aptos-labs+aptos-client@1.0.0_axios@1.7.9_got@11.8.6/node_modules/@aptos-labs/aptos-client/dist/node/index.node.mjs ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bcsRequest: () => (/* binding */ bcsRequest),\n/* harmony export */   \"default\": () => (/* binding */ aptosClient),\n/* harmony export */   jsonRequest: () => (/* binding */ jsonRequest)\n/* harmony export */ });\n/* harmony import */ var got__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! got */ \"(rsc)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/index.js\");\n// src/index.node.ts\n\n\n// src/cookieJar.ts\nvar CookieJar = class _CookieJar {\n  constructor(jar = /* @__PURE__ */ new Map()) {\n    this.jar = jar;\n  }\n  setCookie(url, cookieStr) {\n    var _a;\n    const key = url.origin.toLowerCase();\n    if (!this.jar.has(key)) {\n      this.jar.set(key, []);\n    }\n    const cookie = _CookieJar.parse(cookieStr);\n    this.jar.set(key, [\n      ...((_a = this.jar.get(key)) == null ? void 0 : _a.filter((c) => c.name !== cookie.name)) || [],\n      cookie\n    ]);\n  }\n  getCookies(url) {\n    var _a;\n    const key = url.origin.toLowerCase();\n    if (!this.jar.get(key)) {\n      return [];\n    }\n    return ((_a = this.jar.get(key)) == null ? void 0 : _a.filter((cookie) => !cookie.expires || cookie.expires > /* @__PURE__ */ new Date())) || [];\n  }\n  static parse(str) {\n    if (typeof str !== \"string\") {\n      throw new Error(\"argument str must be a string\");\n    }\n    const parts = str.split(\";\").map((part) => part.trim());\n    let cookie;\n    if (parts.length > 0) {\n      const [name, value] = parts[0].split(\"=\");\n      if (!name || !value) {\n        throw new Error(\"Invalid cookie\");\n      }\n      cookie = {\n        name,\n        value\n      };\n    } else {\n      throw new Error(\"Invalid cookie\");\n    }\n    parts.slice(1).forEach((part) => {\n      const [name, value] = part.split(\"=\");\n      if (!name.trim()) {\n        throw new Error(\"Invalid cookie\");\n      }\n      const nameLow = name.toLowerCase();\n      const val = (\n        // eslint-disable-next-line quotes\n        (value == null ? void 0 : value.charAt(0)) === \"'\" || (value == null ? void 0 : value.charAt(0)) === '\"' ? value == null ? void 0 : value.slice(1, -1) : value\n      );\n      if (nameLow === \"expires\") {\n        cookie.expires = new Date(val);\n      }\n      if (nameLow === \"path\") {\n        cookie.path = val;\n      }\n      if (nameLow === \"samesite\") {\n        if (val !== \"Lax\" && val !== \"None\" && val !== \"Strict\") {\n          throw new Error(\"Invalid cookie SameSite value\");\n        }\n        cookie.sameSite = val;\n      }\n      if (nameLow === \"secure\") {\n        cookie.secure = true;\n      }\n    });\n    return cookie;\n  }\n};\n\n// src/index.node.ts\nvar cookieJar = new CookieJar();\nasync function aptosClient(requestOptions) {\n  return jsonRequest(requestOptions);\n}\nasync function jsonRequest(requestOptions) {\n  const { params, method, url, headers, body } = requestOptions;\n  const request = {\n    http2: true,\n    searchParams: convertBigIntToString(params),\n    method,\n    url,\n    responseType: \"json\",\n    headers,\n    hooks: {\n      beforeRequest: [\n        (options) => {\n          const cookies = cookieJar.getCookies(new URL(options.url));\n          if ((cookies == null ? void 0 : cookies.length) > 0 && options.headers) {\n            options.headers.cookie = cookies.map((cookie) => `${cookie.name}=${cookie.value}`).join(\"; \");\n          }\n        }\n      ],\n      afterResponse: [\n        (response) => {\n          if (Array.isArray(response.headers[\"set-cookie\"])) {\n            response.headers[\"set-cookie\"].forEach((c) => {\n              cookieJar.setCookie(new URL(response.url), c);\n            });\n          }\n          return response;\n        }\n      ]\n    }\n  };\n  if (body) {\n    if (body instanceof Uint8Array) {\n      request.body = Buffer.from(body);\n    } else {\n      request.body = Buffer.from(JSON.stringify(body));\n    }\n  }\n  try {\n    const response = await got__WEBPACK_IMPORTED_MODULE_0__(request);\n    return parseResponse(response);\n  } catch (error) {\n    const gotError = error;\n    if (gotError.response) {\n      return parseResponse(gotError.response);\n    }\n    throw error;\n  }\n}\nasync function bcsRequest(requestOptions) {\n  const { params, method, url, headers, body } = requestOptions;\n  const request = {\n    http2: true,\n    searchParams: convertBigIntToString(params),\n    method,\n    url,\n    responseType: \"buffer\",\n    headers,\n    hooks: {\n      beforeRequest: [\n        (options) => {\n          const cookies = cookieJar.getCookies(new URL(options.url));\n          if ((cookies == null ? void 0 : cookies.length) > 0 && options.headers) {\n            options.headers.cookie = cookies.map((cookie) => `${cookie.name}=${cookie.value}`).join(\"; \");\n          }\n        }\n      ],\n      afterResponse: [\n        (response) => {\n          if (Array.isArray(response.headers[\"set-cookie\"])) {\n            response.headers[\"set-cookie\"].forEach((c) => {\n              cookieJar.setCookie(new URL(response.url), c);\n            });\n          }\n          return response;\n        }\n      ]\n    }\n  };\n  if (body) {\n    if (body instanceof Uint8Array) {\n      request.body = Buffer.from(body);\n    } else {\n      request.body = Buffer.from(JSON.stringify(body));\n    }\n  }\n  try {\n    switch (method) {\n      case \"GET\":\n        return parseResponse(await got__WEBPACK_IMPORTED_MODULE_0__.get(request));\n      case \"POST\":\n        return parseResponse(await got__WEBPACK_IMPORTED_MODULE_0__.post(request));\n      default:\n    }\n  } catch (error) {\n    const gotError = error;\n    if (gotError.response) {\n      return parseResponse(gotError.response);\n    }\n    throw error;\n  }\n  throw new Error(`Unsupported method: ${method}`);\n}\nfunction parseResponse(response) {\n  return {\n    status: response.statusCode,\n    statusText: response.statusMessage || \"\",\n    data: response.body,\n    config: response.request.options,\n    request: response.request,\n    response,\n    headers: response.headers\n  };\n}\nfunction convertBigIntToString(obj) {\n  const result = {};\n  if (!obj) return result;\n  Object.entries(obj).forEach(([key, value]) => {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (typeof value === \"bigint\") {\n        result[key] = String(value);\n      } else {\n        result[key] = value;\n      }\n    }\n  });\n  return result;\n}\n\n//# sourceMappingURL=index.node.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@aptos-labs+aptos-client@1.0.0_axios@1.7.9_got@11.8.6/node_modules/@aptos-labs/aptos-client/dist/node/index.node.mjs\n");

/***/ })

};
;