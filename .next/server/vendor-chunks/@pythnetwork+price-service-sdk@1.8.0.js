"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pythnetwork+price-service-sdk@1.8.0";
exports.ids = ["vendor-chunks/@pythnetwork+price-service-sdk@1.8.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/AccumulatorUpdateData.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/AccumulatorUpdateData.js ***!
  \******************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseAccumulatorUpdateData = exports.sliceAccumulatorUpdateData = exports.parseTwapMessage = exports.parsePriceFeedMessage = exports.isAccumulatorUpdateData = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(rsc)/./node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js\"));\nconst ACCUMULATOR_MAGIC = \"504e4155\";\nconst MAJOR_VERSION = 1;\nconst MINOR_VERSION = 0;\nconst KECCAK160_HASH_SIZE = 20;\nconst PRICE_FEED_MESSAGE_VARIANT = 0;\nconst TWAP_MESSAGE_VARIANT = 1;\nfunction isAccumulatorUpdateData(updateBytes) {\n    return (updateBytes.toString(\"hex\").slice(0, 8) === ACCUMULATOR_MAGIC &&\n        updateBytes[4] === MAJOR_VERSION &&\n        updateBytes[5] === MINOR_VERSION);\n}\nexports.isAccumulatorUpdateData = isAccumulatorUpdateData;\nfunction parsePriceFeedMessage(message) {\n    let cursor = 0;\n    const variant = message.readUInt8(cursor);\n    if (variant !== PRICE_FEED_MESSAGE_VARIANT) {\n        throw new Error(\"Not a price feed message\");\n    }\n    cursor += 1;\n    const feedId = message.subarray(cursor, cursor + 32);\n    cursor += 32;\n    const price = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const confidence = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const exponent = message.readInt32BE(cursor);\n    cursor += 4;\n    const publishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const prevPublishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const emaPrice = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const emaConf = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    return {\n        feedId,\n        price,\n        confidence,\n        exponent,\n        publishTime,\n        prevPublishTime,\n        emaPrice,\n        emaConf,\n    };\n}\nexports.parsePriceFeedMessage = parsePriceFeedMessage;\nfunction parseTwapMessage(message) {\n    let cursor = 0;\n    const variant = message.readUInt8(cursor);\n    if (variant !== TWAP_MESSAGE_VARIANT) {\n        throw new Error(\"Not a twap message\");\n    }\n    cursor += 1;\n    const feedId = message.subarray(cursor, cursor + 32);\n    cursor += 32;\n    const cumulativePrice = new bn_js_1.default(message.subarray(cursor, cursor + 16), \"be\");\n    cursor += 16;\n    const cumulativeConf = new bn_js_1.default(message.subarray(cursor, cursor + 16), \"be\");\n    cursor += 16;\n    const numDownSlots = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const exponent = message.readInt32BE(cursor);\n    cursor += 4;\n    const publishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const prevPublishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    const publishSlot = new bn_js_1.default(message.subarray(cursor, cursor + 8), \"be\");\n    cursor += 8;\n    return {\n        feedId,\n        cumulativePrice,\n        cumulativeConf,\n        numDownSlots,\n        exponent,\n        publishTime,\n        prevPublishTime,\n        publishSlot,\n    };\n}\nexports.parseTwapMessage = parseTwapMessage;\n/**\n * An AccumulatorUpdateData contains a VAA and a list of updates. This function returns a new serialized AccumulatorUpdateData with only the updates in the range [start, end).\n */\nfunction sliceAccumulatorUpdateData(data, start, end) {\n    if (!isAccumulatorUpdateData(data)) {\n        throw new Error(\"Invalid accumulator message\");\n    }\n    let cursor = 6;\n    const trailingPayloadSize = data.readUint8(cursor);\n    cursor += 1 + trailingPayloadSize;\n    // const proofType = data.readUint8(cursor);\n    cursor += 1;\n    const vaaSize = data.readUint16BE(cursor);\n    cursor += 2;\n    cursor += vaaSize;\n    const endOfVaa = cursor;\n    const updates = [];\n    const numUpdates = data.readUInt8(cursor);\n    cursor += 1;\n    for (let i = 0; i < numUpdates; i++) {\n        const updateStart = cursor;\n        const messageSize = data.readUint16BE(cursor);\n        cursor += 2;\n        cursor += messageSize;\n        const numProofs = data.readUInt8(cursor);\n        cursor += 1;\n        cursor += KECCAK160_HASH_SIZE * numProofs;\n        updates.push(data.subarray(updateStart, cursor));\n    }\n    if (cursor !== data.length) {\n        throw new Error(\"Didn't reach the end of the message\");\n    }\n    const sliceUpdates = updates.slice(start, end);\n    return Buffer.concat([\n        data.subarray(0, endOfVaa),\n        Buffer.from([sliceUpdates.length]),\n        ...updates.slice(start, end),\n    ]);\n}\nexports.sliceAccumulatorUpdateData = sliceAccumulatorUpdateData;\nfunction parseAccumulatorUpdateData(data) {\n    if (!isAccumulatorUpdateData(data)) {\n        throw new Error(\"Invalid accumulator message\");\n    }\n    let cursor = 6;\n    const trailingPayloadSize = data.readUint8(cursor);\n    cursor += 1 + trailingPayloadSize;\n    // const proofType = data.readUint8(cursor);\n    cursor += 1;\n    const vaaSize = data.readUint16BE(cursor);\n    cursor += 2;\n    const vaa = data.subarray(cursor, cursor + vaaSize);\n    cursor += vaaSize;\n    const numUpdates = data.readUInt8(cursor);\n    const updates = [];\n    cursor += 1;\n    for (let i = 0; i < numUpdates; i++) {\n        const messageSize = data.readUint16BE(cursor);\n        cursor += 2;\n        const message = data.subarray(cursor, cursor + messageSize);\n        cursor += messageSize;\n        const numProofs = data.readUInt8(cursor);\n        cursor += 1;\n        const proof = [];\n        for (let j = 0; j < numProofs; j++) {\n            proof.push(Array.from(data.subarray(cursor, cursor + KECCAK160_HASH_SIZE)));\n            cursor += KECCAK160_HASH_SIZE;\n        }\n        updates.push({ message, proof });\n    }\n    if (cursor !== data.length) {\n        throw new Error(\"Didn't reach the end of the message\");\n    }\n    return { vaa, updates };\n}\nexports.parseAccumulatorUpdateData = parseAccumulatorUpdateData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/AccumulatorUpdateData.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PriceFeed = exports.PriceFeedMetadata = exports.Price = exports.parseTwapMessage = exports.parsePriceFeedMessage = exports.parseAccumulatorUpdateData = exports.sliceAccumulatorUpdateData = exports.isAccumulatorUpdateData = void 0;\nconst PriceFeed_1 = __webpack_require__(/*! ./schemas/PriceFeed */ \"(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/schemas/PriceFeed.js\");\nvar AccumulatorUpdateData_1 = __webpack_require__(/*! ./AccumulatorUpdateData */ \"(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/AccumulatorUpdateData.js\");\nObject.defineProperty(exports, \"isAccumulatorUpdateData\", ({ enumerable: true, get: function () { return AccumulatorUpdateData_1.isAccumulatorUpdateData; } }));\nObject.defineProperty(exports, \"sliceAccumulatorUpdateData\", ({ enumerable: true, get: function () { return AccumulatorUpdateData_1.sliceAccumulatorUpdateData; } }));\nObject.defineProperty(exports, \"parseAccumulatorUpdateData\", ({ enumerable: true, get: function () { return AccumulatorUpdateData_1.parseAccumulatorUpdateData; } }));\nObject.defineProperty(exports, \"parsePriceFeedMessage\", ({ enumerable: true, get: function () { return AccumulatorUpdateData_1.parsePriceFeedMessage; } }));\nObject.defineProperty(exports, \"parseTwapMessage\", ({ enumerable: true, get: function () { return AccumulatorUpdateData_1.parseTwapMessage; } }));\n/**\n * A Pyth Price represented as `${price} ± ${conf} * 10^${expo}` published at `publishTime`.\n */\nclass Price {\n    conf;\n    expo;\n    price;\n    publishTime;\n    constructor(rawPrice) {\n        this.conf = rawPrice.conf;\n        this.expo = rawPrice.expo;\n        this.price = rawPrice.price;\n        this.publishTime = rawPrice.publishTime;\n    }\n    /**\n     * Get price as number. Warning: this conversion might result in an inaccurate number.\n     * We store price and confidence values in our Oracle at 64-bit precision, but the JavaScript\n     * number type can only represent numbers with 52-bit precision. So if a price or confidence\n     * is larger than 52-bits, the conversion will lose the most insignificant bits.\n     *\n     * @returns a floating point number representing the price\n     */\n    getPriceAsNumberUnchecked() {\n        return Number(this.price) * 10 ** this.expo;\n    }\n    /**\n     * Get price as number. Warning: this conversion might result in an inaccurate number.\n     * Explanation is the same as `priceAsNumberUnchecked()` documentation.\n     *\n     * @returns a floating point number representing the price\n     */\n    getConfAsNumberUnchecked() {\n        return Number(this.conf) * 10 ** this.expo;\n    }\n    static fromJson(json) {\n        const jsonPrice = PriceFeed_1.Convert.toPrice(json);\n        return new Price({\n            conf: jsonPrice.conf,\n            expo: jsonPrice.expo,\n            price: jsonPrice.price,\n            publishTime: jsonPrice.publish_time,\n        });\n    }\n    toJson() {\n        const jsonPrice = {\n            conf: this.conf,\n            expo: this.expo,\n            price: this.price,\n            publish_time: this.publishTime,\n        };\n        // this is done to avoid sending undefined values to the server\n        return PriceFeed_1.Convert.priceToJson(jsonPrice);\n    }\n}\nexports.Price = Price;\n/**\n * Metadata about the price\n *\n * Represents metadata of a price feed.\n */\nclass PriceFeedMetadata {\n    /**\n     * Attestation time of the price\n     */\n    attestationTime;\n    /**\n     * Chain of the emitter\n     */\n    emitterChain;\n    /**\n     * The time that the price service received the price\n     */\n    priceServiceReceiveTime;\n    /**\n     * Sequence number of the price\n     */\n    sequenceNumber;\n    /**\n     * Pythnet slot number of the price\n     */\n    slot;\n    /**\n     * The time that the previous price was published\n     */\n    prevPublishTime;\n    constructor(metadata) {\n        this.attestationTime = metadata.attestationTime;\n        this.emitterChain = metadata.emitterChain;\n        this.priceServiceReceiveTime = metadata.receiveTime;\n        this.sequenceNumber = metadata.sequenceNumber;\n        this.slot = metadata.slot;\n        this.prevPublishTime = metadata.prevPublishTime;\n    }\n    static fromJson(json) {\n        if (json === undefined) {\n            return undefined;\n        }\n        const jsonFeed = PriceFeed_1.Convert.toPriceFeedMetadata(json);\n        return new PriceFeedMetadata({\n            attestationTime: jsonFeed.attestation_time,\n            emitterChain: jsonFeed.emitter_chain,\n            receiveTime: jsonFeed.price_service_receive_time,\n            sequenceNumber: jsonFeed.sequence_number,\n            slot: jsonFeed.slot,\n            prevPublishTime: jsonFeed.prev_publish_time,\n        });\n    }\n    toJson() {\n        const jsonFeed = {\n            attestation_time: this.attestationTime,\n            emitter_chain: this.emitterChain,\n            price_service_receive_time: this.priceServiceReceiveTime,\n            sequence_number: this.sequenceNumber,\n            slot: this.slot,\n            prev_publish_time: this.prevPublishTime,\n        };\n        // this is done to avoid sending undefined values to the server\n        return PriceFeed_1.Convert.priceFeedMetadataToJson(jsonFeed);\n    }\n}\nexports.PriceFeedMetadata = PriceFeedMetadata;\n/**\n * Pyth Price Feed\n *\n * Represents a current aggregation price from pyth publisher feeds.\n */\nclass PriceFeed {\n    /**\n     * Exponentially-weighted moving average Price\n     */\n    emaPrice;\n    /**\n     * Unique identifier for this price.\n     */\n    id;\n    /**\n     * Metadata of the price\n     */\n    metadata;\n    /**\n     * VAA of the price\n     */\n    vaa;\n    /**\n     * Price\n     */\n    price;\n    constructor(rawFeed) {\n        this.emaPrice = rawFeed.emaPrice;\n        this.id = rawFeed.id;\n        this.metadata = rawFeed.metadata;\n        this.vaa = rawFeed.vaa;\n        this.price = rawFeed.price;\n    }\n    static fromJson(json) {\n        const jsonFeed = PriceFeed_1.Convert.toPriceFeed(json);\n        return new PriceFeed({\n            emaPrice: Price.fromJson(jsonFeed.ema_price),\n            id: jsonFeed.id,\n            metadata: PriceFeedMetadata.fromJson(jsonFeed.metadata),\n            vaa: jsonFeed.vaa,\n            price: Price.fromJson(jsonFeed.price),\n        });\n    }\n    toJson() {\n        const jsonFeed = {\n            ema_price: this.emaPrice.toJson(),\n            id: this.id,\n            metadata: this.metadata?.toJson(),\n            price: this.price.toJson(),\n        };\n        return PriceFeed_1.Convert.priceFeedToJson(jsonFeed);\n    }\n    /**\n     * Get the price and confidence interval as fixed-point numbers of the form a * 10^e.\n     * This function returns the current best estimate of the price at the time that this `PriceFeed` was\n     * published (`publishTime`). The returned price can be from arbitrarily far in the past; this function\n     * makes no guarantees that the returned price is recent or useful for any particular application.\n     *\n     * Users of this function should check the returned `publishTime` to ensure that the returned price is\n     * sufficiently recent for their application. If you are considering using this function, it may be\n     * safer / easier to use `getPriceNoOlderThan` method.\n     *\n     * @returns a Price that contains the price and confidence interval along with\n     * the exponent for them, and publish time of the price.\n     */\n    getPriceUnchecked() {\n        return this.price;\n    }\n    /**\n     * Get the exponentially-weighted moving average (EMA) price and confidence interval.\n     *\n     * This function returns the current best estimate of the price at the time that this `PriceFeed` was\n     * published (`publishTime`). The returned price can be from arbitrarily far in the past; this function\n     * makes no guarantees that the returned price is recent or useful for any particular application.\n     *\n     * Users of this function should check the returned `publishTime` to ensure that the returned price is\n     * sufficiently recent for their application. If you are considering using this function, it may be\n     * safer / easier to use `getEmaPriceNoOlderThan` method.\n     *\n     * At the moment, the confidence interval returned by this method is computed in\n     * a somewhat questionable way, so we do not recommend using it for high-value applications.\n     *\n     * @returns a Price that contains the EMA price and confidence interval along with\n     * the exponent for them, and publish time of the price.\n     */\n    getEmaPriceUnchecked() {\n        return this.emaPrice;\n    }\n    /**\n     * Get the price if it was updated no older than `age` seconds of the current time.\n     *\n     * This function is a sanity-checked version of `getPriceUnchecked` which is useful in\n     * applications that require a sufficiently-recent price. Returns `undefined` if the price\n     * is not recent enough.\n     *\n     * @param age return a price as long as it has been updated within this number of seconds\n     * @returns a Price struct containing the price, confidence interval along with the exponent for\n     * both numbers, and its publish time, or `undefined` if no price update occurred within `age` seconds of the current time.\n     */\n    getPriceNoOlderThan(age) {\n        const price = this.getPriceUnchecked();\n        const currentTime = Math.floor(Date.now() / 1000);\n        // This checks the absolute difference as a sanity check\n        // for the cases that the system time is behind or price\n        // feed timestamp happen to be in the future (a bug).\n        if (Math.abs(currentTime - price.publishTime) > age) {\n            return undefined;\n        }\n        return price;\n    }\n    /**\n     * Get the exponentially-weighted moving average (EMA) price if it was updated no older than\n     * `age` seconds of the current time.\n     *\n     * This function is a sanity-checked version of `getEmaPriceUnchecked` which is useful in\n     * applications that require a sufficiently-recent price. Returns `undefined` if the price\n     * is not recent enough.\n     *\n     * At the moment, the confidence interval returned by this method is computed in\n     * a somewhat questionable way, so we do not recommend using it for high-value applications.\n     *\n     * @param age return a price as long as it has been updated within this number of seconds\n     * @returns a Price struct containing the EMA price, confidence interval along with the exponent for\n     * both numbers, and its publish time, or `undefined` if no price update occurred within `age` seconds of the current time.\n     */\n    getEmaPriceNoOlderThan(age) {\n        const emaPrice = this.getEmaPriceUnchecked();\n        const currentTime = Math.floor(Date.now() / 1000);\n        // This checks the absolute difference as a sanity check\n        // for the cases that the system time is behind or price\n        // feed timestamp happen to be in the future (a bug).\n        if (Math.abs(currentTime - emaPrice.publishTime) > age) {\n            return undefined;\n        }\n        return emaPrice;\n    }\n    /**\n     * Get the price feed metadata.\n     *\n     * @returns a struct containing the attestation time, emitter chain, and the sequence number.\n     * Returns `undefined` if metadata is currently unavailable.\n     */\n    getMetadata() {\n        return this.metadata;\n    }\n    /**\n     * Get the price feed vaa.\n     *\n     * @returns vaa in base64.\n     * Returns `undefined` if vaa is unavailable.\n     */\n    getVAA() {\n        return this.vaa;\n    }\n}\nexports.PriceFeed = PriceFeed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/schemas/PriceFeed.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/schemas/PriceFeed.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// To parse this data:\n//\n//   import { Convert, PriceFeed } from \"./file\";\n//\n//   const priceFeed = Convert.toPriceFeed(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Convert = void 0;\n// Converts JSON types to/from your types\n// and asserts the results at runtime\nclass Convert {\n    static toPriceFeed(json) {\n        return cast(json, r(\"PriceFeed\"));\n    }\n    static priceFeedToJson(value) {\n        return uncast(value, r(\"PriceFeed\"));\n    }\n    static toPrice(json) {\n        return cast(json, r(\"Price\"));\n    }\n    static priceToJson(value) {\n        return uncast(value, r(\"Price\"));\n    }\n    static toPriceFeedMetadata(json) {\n        return cast(json, r(\"PriceFeedMetadata\"));\n    }\n    static priceFeedMetadataToJson(value) {\n        return uncast(value, r(\"PriceFeedMetadata\"));\n    }\n}\nexports.Convert = Convert;\nfunction invalidValue(typ, val, key = \"\") {\n    if (key) {\n        throw Error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);\n}\nfunction jsonToJSProps(typ) {\n    if (typ.jsonToJS === undefined) {\n        const map = {};\n        typ.props.forEach((p) => (map[p.json] = { key: p.js, typ: p.typ }));\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\nfunction jsToJSONProps(typ) {\n    if (typ.jsToJSON === undefined) {\n        const map = {};\n        typ.props.forEach((p) => (map[p.js] = { key: p.json, typ: p.typ }));\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\nfunction transform(val, typ, getProps, key = \"\") {\n    function transformPrimitive(typ, val) {\n        if (typeof typ === typeof val)\n            return val;\n        return invalidValue(typ, val, key);\n    }\n    function transformUnion(typs, val) {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            }\n            catch (_) { }\n        }\n        return invalidValue(typs, val);\n    }\n    function transformEnum(cases, val) {\n        if (cases.indexOf(val) !== -1)\n            return val;\n        return invalidValue(cases, val);\n    }\n    function transformArray(typ, val) {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val))\n            return invalidValue(\"array\", val);\n        return val.map((el) => transform(el, typ, getProps));\n    }\n    function transformDate(val) {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n    function transformObject(props, additional, val) {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result = {};\n        Object.getOwnPropertyNames(props).forEach((key) => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key)\n                ? val[key]\n                : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach((key) => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n    if (typ === \"any\")\n        return val;\n    if (typ === null) {\n        if (val === null)\n            return val;\n        return invalidValue(typ, val);\n    }\n    if (typ === false)\n        return invalidValue(typ, val);\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ))\n        return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\")\n            ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")\n                ? transformArray(typ.arrayItems, val)\n                : typ.hasOwnProperty(\"props\")\n                    ? transformObject(getProps(typ), typ.additional, val)\n                    : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\")\n        return transformDate(val);\n    return transformPrimitive(typ, val);\n}\nfunction cast(val, typ) {\n    return transform(val, typ, jsonToJSProps);\n}\nfunction uncast(val, typ) {\n    return transform(val, typ, jsToJSONProps);\n}\nfunction a(typ) {\n    return { arrayItems: typ };\n}\nfunction u(...typs) {\n    return { unionMembers: typs };\n}\nfunction o(props, additional) {\n    return { props, additional };\n}\nfunction m(additional) {\n    return { props: [], additional };\n}\nfunction r(name) {\n    return { ref: name };\n}\nconst typeMap = {\n    PriceFeed: o([\n        { json: \"ema_price\", js: \"ema_price\", typ: r(\"Price\") },\n        { json: \"id\", js: \"id\", typ: \"\" },\n        {\n            json: \"metadata\",\n            js: \"metadata\",\n            typ: u(undefined, r(\"PriceFeedMetadata\")),\n        },\n        { json: \"price\", js: \"price\", typ: r(\"Price\") },\n        { json: \"vaa\", js: \"vaa\", typ: u(undefined, \"\") },\n    ], \"any\"),\n    Price: o([\n        { json: \"conf\", js: \"conf\", typ: \"\" },\n        { json: \"expo\", js: \"expo\", typ: 0 },\n        { json: \"price\", js: \"price\", typ: \"\" },\n        { json: \"publish_time\", js: \"publish_time\", typ: 0 },\n    ], \"any\"),\n    PriceFeedMetadata: o([\n        {\n            json: \"attestation_time\",\n            js: \"attestation_time\",\n            typ: u(undefined, 0),\n        },\n        { json: \"emitter_chain\", js: \"emitter_chain\", typ: 0 },\n        {\n            json: \"prev_publish_time\",\n            js: \"prev_publish_time\",\n            typ: u(undefined, 0),\n        },\n        {\n            json: \"price_service_receive_time\",\n            js: \"price_service_receive_time\",\n            typ: u(undefined, 0),\n        },\n        { json: \"sequence_number\", js: \"sequence_number\", typ: u(undefined, 0) },\n        { json: \"slot\", js: \"slot\", typ: u(undefined, 0) },\n    ], \"any\"),\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@pythnetwork+price-service-sdk@1.8.0/node_modules/@pythnetwork/price-service-sdk/lib/schemas/PriceFeed.js\n");

/***/ })

};
;