"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/move-agent-kit@0.1.3_@aptos-labs+ts-sdk@1.35.0_axios@1.7.9_got@11.8.6__@aptos-labs+wallet-ada_gjjxnooyl53gptg3emkop5uql4";
exports.ids = ["vendor-chunks/move-agent-kit@0.1.3_@aptos-labs+ts-sdk@1.35.0_axios@1.7.9_got@11.8.6__@aptos-labs+wallet-ada_gjjxnooyl53gptg3emkop5uql4"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/move-agent-kit@0.1.3_@aptos-labs+ts-sdk@1.35.0_axios@1.7.9_got@11.8.6__@aptos-labs+wallet-ada_gjjxnooyl53gptg3emkop5uql4/node_modules/move-agent-kit/dist/index.mjs":
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/move-agent-kit@0.1.3_@aptos-labs+ts-sdk@1.35.0_axios@1.7.9_got@11.8.6__@aptos-labs+wallet-ada_gjjxnooyl53gptg3emkop5uql4/node_modules/move-agent-kit/dist/index.mjs ***!
  \************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRuntime: () => (/* binding */ AgentRuntime),\n/* harmony export */   AmnisStakeTool: () => (/* binding */ AmnisStakeTool),\n/* harmony export */   AmnisWithdrawStakeTool: () => (/* binding */ AmnisWithdrawStakeTool),\n/* harmony export */   AptosAccountAddressTool: () => (/* binding */ AptosAccountAddressTool),\n/* harmony export */   AptosBalanceTool: () => (/* binding */ AptosBalanceTool),\n/* harmony export */   AptosBurnTokenTool: () => (/* binding */ AptosBurnTokenTool),\n/* harmony export */   AptosCreateTokenTool: () => (/* binding */ AptosCreateTokenTool),\n/* harmony export */   AptosGetTokenDetailTool: () => (/* binding */ AptosGetTokenDetailTool),\n/* harmony export */   AptosGetTokenPriceTool: () => (/* binding */ AptosGetTokenPriceTool),\n/* harmony export */   AptosMintTokenTool: () => (/* binding */ AptosMintTokenTool),\n/* harmony export */   AptosTransactionTool: () => (/* binding */ AptosTransactionTool),\n/* harmony export */   AptosTransferTokenTool: () => (/* binding */ AptosTransferTokenTool),\n/* harmony export */   AriesBorrowTool: () => (/* binding */ AriesBorrowTool),\n/* harmony export */   AriesCreateProfileTool: () => (/* binding */ AriesCreateProfileTool),\n/* harmony export */   AriesLendTool: () => (/* binding */ AriesLendTool),\n/* harmony export */   AriesRepayTool: () => (/* binding */ AriesRepayTool),\n/* harmony export */   AriesWithdrawTool: () => (/* binding */ AriesWithdrawTool),\n/* harmony export */   BaseSigner: () => (/* binding */ BaseSigner),\n/* harmony export */   EchelonBorrowTokenTool: () => (/* binding */ EchelonBorrowTokenTool),\n/* harmony export */   EchelonLendTokenTool: () => (/* binding */ EchelonLendTokenTool),\n/* harmony export */   EchelonRepayTokenTool: () => (/* binding */ EchelonRepayTokenTool),\n/* harmony export */   EchelonWithdrawTokenTool: () => (/* binding */ EchelonWithdrawTokenTool),\n/* harmony export */   EchoStakeTokenTool: () => (/* binding */ EchoStakeTokenTool),\n/* harmony export */   EchoUnstakeTokenTool: () => (/* binding */ EchoUnstakeTokenTool),\n/* harmony export */   JouleBorrowTokenTool: () => (/* binding */ JouleBorrowTokenTool),\n/* harmony export */   JouleGetPoolDetails: () => (/* binding */ JouleGetPoolDetails),\n/* harmony export */   JouleGetUserAllPositions: () => (/* binding */ JouleGetUserAllPositions),\n/* harmony export */   JouleGetUserPosition: () => (/* binding */ JouleGetUserPosition),\n/* harmony export */   JouleLendTokenTool: () => (/* binding */ JouleLendTokenTool),\n/* harmony export */   JouleRepayTokenTool: () => (/* binding */ JouleRepayTokenTool),\n/* harmony export */   JouleWithdrawTokenTool: () => (/* binding */ JouleWithdrawTokenTool),\n/* harmony export */   LiquidSwapAddLiquidityTool: () => (/* binding */ LiquidSwapAddLiquidityTool),\n/* harmony export */   LiquidSwapCreatePoolTool: () => (/* binding */ LiquidSwapCreatePoolTool),\n/* harmony export */   LiquidSwapRemoveLiquidityTool: () => (/* binding */ LiquidSwapRemoveLiquidityTool),\n/* harmony export */   LiquidSwapSwapTool: () => (/* binding */ LiquidSwapSwapTool),\n/* harmony export */   LocalSigner: () => (/* binding */ LocalSigner),\n/* harmony export */   OpenAICreateImageTool: () => (/* binding */ OpenAICreateImageTool),\n/* harmony export */   PanoraSwapTool: () => (/* binding */ PanoraSwapTool),\n/* harmony export */   ThalaAddLiquidityTool: () => (/* binding */ ThalaAddLiquidityTool),\n/* harmony export */   ThalaMintMODTool: () => (/* binding */ ThalaMintMODTool),\n/* harmony export */   ThalaRedeemMODTool: () => (/* binding */ ThalaRedeemMODTool),\n/* harmony export */   ThalaRemoveLiquidityTool: () => (/* binding */ ThalaRemoveLiquidityTool),\n/* harmony export */   ThalaStakeTokenTool: () => (/* binding */ ThalaStakeTokenTool),\n/* harmony export */   ThalaUnstakeTokenTool: () => (/* binding */ ThalaUnstakeTokenTool),\n/* harmony export */   WalletSigner: () => (/* binding */ WalletSigner),\n/* harmony export */   createAptosTools: () => (/* binding */ createAptosTools),\n/* harmony export */   parseJson: () => (/* binding */ parseJson)\n/* harmony export */ });\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(rsc)/./node_modules/.pnpm/@aptos-labs+ts-sdk@1.35.0_axios@1.7.9_got@11.8.6/node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var _pythnetwork_pyth_aptos_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pythnetwork/pyth-aptos-js */ \"(rsc)/./node_modules/.pnpm/@pythnetwork+pyth-aptos-js@1.4.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@pythnetwork/pyth-aptos-js/lib/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@1.7.9/node_modules/axios/lib/axios.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@4.85.2_ws@8.18.0_bufferutil@4.0.9_utf-8-validate@5.0.10__zod@3.24.2/node_modules/openai/index.mjs\");\n/* harmony import */ var langchain_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! langchain/tools */ \"(rsc)/./node_modules/.pnpm/langchain@0.3.19_@langchain+anthropic@0.3.13_@langchain+core@0.3.40_openai@4.85.2_ws@8.18.0_b_n5hmvd5wk3eoywbtxti7xivvxu/node_modules/langchain/tools.js\");\n// src/signers/base-signer.ts\nvar BaseSigner = class {\n  constructor(account, aptos) {\n    this.account = account;\n    this.aptos = aptos;\n  }\n  getAddress() {\n    return this.account.accountAddress;\n  }\n};\n\n// src/signers/local-signer.ts\n\nvar LocalSigner = class extends BaseSigner {\n  constructor(account, network = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.DEVNET) {\n    const config = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AptosConfig({ network });\n    const aptos = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Aptos(config);\n    super(account, aptos);\n  }\n  async signTransaction(transaction) {\n    const senderAuthenticator = this.aptos.transaction.sign({\n      signer: this.account,\n      transaction\n    });\n    return {\n      senderAuthenticator\n    };\n  }\n  async sendTransaction(transaction) {\n    const signedTx = await this.signTransaction(transaction);\n    const submittedTx = await this.aptos.transaction.submit.simple({\n      transaction,\n      senderAuthenticator: signedTx.senderAuthenticator\n    });\n    const result = await this.aptos.waitForTransaction({\n      transactionHash: submittedTx.hash\n    });\n    return result.hash;\n  }\n  async signMessage(message) {\n    const signedMessage = this.account.signWithAuthenticator(message);\n    return signedMessage.toString();\n  }\n};\n\n// src/signers/wallet-signer.ts\n\nvar WalletSigner = class extends BaseSigner {\n  constructor(account, wallet, network = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.DEVNET) {\n    const config = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AptosConfig({ network });\n    const aptos = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Aptos(config);\n    super(account, aptos);\n    this.wallet = wallet;\n  }\n  getAddress() {\n    const walletAddress = this.wallet?.account?.address;\n    return walletAddress ? _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.fromString(walletAddress) : this.account.accountAddress;\n  }\n  async signTransaction(transaction) {\n    const senderAuthenticator = await this.wallet.signTransaction(transaction);\n    return {\n      senderAuthenticator\n    };\n  }\n  async sendTransaction(transaction) {\n    const txHash = await this.wallet.signAndSubmitTransaction(transaction);\n    return txHash.hash;\n  }\n  async signMessage(message) {\n    return this.wallet.signMessage(message);\n  }\n};\n\n// src/agent.ts\n\n\n// src/constants/price-feed.ts\nvar priceFeed = [\n  \"0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a\",\n  \"0x2b89b9dc8fdf9f34709a5b106b472f0f39bb6ca9ce04b0fd7f2e971688e2e53b\",\n  \"0x2b89b9dc8fdf9f34709a5b106b472f0f39bb6ca9ce04b0fd7f2e971688e2e53b\",\n  \"0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5\",\n  \"0x9d4294bbcd1174d6f2003ec365831e64cc31d9f6f15a2b85399db8d5000960f6\",\n  \"0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5\",\n  \"0xc9d8b075a5c69303365ae23633d4e085199bf5c520a3b90fed1322a0342ffc33\",\n  \"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\"\n];\n\n// src/tools/amnis/stake-token.ts\nasync function stakeTokens(agent, to, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::router::deposit_and_stake_entry\",\n        functionArguments: [amount, to.toString()]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token staking failed\");\n      throw new Error(\"Token staking failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Token staking failed: ${error.message}`);\n  }\n}\n\n// src/tools/amnis/withdraw-stake.ts\nasync function unstakeTokens(agent, to, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::router::unstake_entry\",\n        functionArguments: [amount, to.toString()]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token unstaking failed\");\n      throw new Error(\"Token unstaking failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Token unstaking failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/balance.ts\n\nasync function getBalance(agent, mint) {\n  try {\n    if (mint) {\n      let balance2;\n      if (mint.split(\"::\").length !== 3) {\n        const balances = await agent.aptos.getCurrentFungibleAssetBalances({\n          options: {\n            where: {\n              owner_address: {\n                _eq: agent.account.getAddress().toStringLong()\n              },\n              asset_type: { _eq: mint }\n            }\n          }\n        });\n        balance2 = balances[0].amount ?? 0;\n      } else {\n        balance2 = await agent.aptos.getAccountCoinAmount({\n          accountAddress: agent.account.getAddress(),\n          coinType: mint\n        });\n      }\n      return balance2;\n    }\n    const balance = await agent.aptos.getAccountAPTAmount({\n      accountAddress: agent.account.getAddress()\n    });\n    const convertedBalance = (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromOnChainToHumanReadable)(balance, 8);\n    return convertedBalance;\n  } catch (error) {\n    throw new Error(`Token transfer failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/burn-nft.ts\nasync function burnNFT(agent, mint) {\n  return \"\";\n}\n\n// src/tools/aptos/burn-token.ts\nasync function burnToken(agent, amount, mint) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x67c8564aee3799e9ac669553fdef3a3828d4626f24786b6a5642152fa09469dd::launchpad::burn_fa\",\n        functionArguments: [mint, amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token burn failed\");\n      throw new Error(\"Token burn failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Token burn failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/transfer-nft.ts\nasync function transferNFT(agent, to, mint) {\n  return \"\";\n}\n\n// src/tools/aptos/transfer-token.ts\nasync function transferTokens(agent, to, amount, mint) {\n  const COIN_STANDARD_DATA = {\n    function: \"0x1::coin::transfer\",\n    typeArguments: [mint],\n    functionArguments: [to.toString(), amount]\n  };\n  const FUNGIBLE_ASSET_DATA = {\n    function: \"0x1::primary_fungible_store::transfer\",\n    typeArguments: [\"0x1::fungible_asset::Metadata\"],\n    functionArguments: [mint, to.toString(), amount]\n  };\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: mint.split(\"::\").length === 3 ? COIN_STANDARD_DATA : FUNGIBLE_ASSET_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token transfer failed\");\n      throw new Error(\"Token transfer failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Token transfer failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/mint-token.ts\nasync function mintToken(agent, to, mint, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x67c8564aee3799e9ac669553fdef3a3828d4626f24786b6a5642152fa09469dd::launchpad::mint_to_address\",\n        functionArguments: [to.toString(), mint, amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token mint failed\");\n      throw new Error(\"Token mint failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Token mint failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/create-token.ts\nasync function createToken(agent, name, symbol, iconURI, projectURI) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x67c8564aee3799e9ac669553fdef3a3828d4626f24786b6a5642152fa09469dd::launchpad::create_fa_simple\",\n        functionArguments: [name, symbol, iconURI, projectURI]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token creation failed\");\n      throw new Error(\"Token creation failed\");\n    }\n    return {\n      hash: signedTransaction.hash,\n      // @ts-ignore\n      token: signedTransaction.events[0].data.fa_obj.inner\n    };\n  } catch (error) {\n    throw new Error(`Token creation failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/get-transaction.ts\nasync function getTransaction(agent, hash) {\n  try {\n    const transaction = await agent.aptos.getTransactionByHash({\n      transactionHash: hash\n    });\n    return transaction;\n  } catch (error) {\n    throw new Error(`Token transfer failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/get-token-details.ts\n\nasync function getTokenDetails(tokenAddress) {\n  try {\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\n      \"https://raw.githubusercontent.com/PanoraExchange/Aptos-Tokens/refs/heads/main/token-list.json\"\n    );\n    const tokenData = await res.data;\n    if (!tokenAddress || tokenAddress === \"\") return tokenData[0];\n    const token = tokenData.find(\n      (tokenAddr) => (tokenAddr.tokenAddress || tokenAddr.faAddress).toLowerCase() === tokenAddress.toLowerCase()\n    );\n    if (!token && tokenAddress.includes(\"fa_to_coin_wrapper::WrappedUSDT\")) {\n      return tokenData.find(\n        (e) => e.faAddress === \"0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\"\n      );\n    }\n    if (!token) throw new Error(\"Cannot find token\");\n    return token;\n  } catch (error) {\n    throw new Error(`Token transfer failed: ${error.message}`);\n  }\n}\n\n// src/tools/aptos/get-token-price.ts\nasync function getTokenPrice(query) {\n  try {\n    const assetDataResponse = await fetch(`https://hermes.pyth.network/v2/price_feeds?query=${query}&asset_type=crypto`);\n    const assetData = await assetDataResponse.json();\n    const formattedData = assetData.map((data) => {\n      return {\n        id: data.id,\n        displayName: data.attributes.display_symbol,\n        symbol: data.attributes.symbol\n      };\n    });\n    const assetIdArray = formattedData.map((data) => data.id);\n    if (assetIdArray.length === 0) {\n      throw new Error(\"No assets found for the given query\");\n    }\n    const assetPriceDataResponse = await fetch(\n      `https://hermes.pyth.network/v2/updates/price/latest?ids[]=${assetIdArray.join(\"&ids[]=\")}`\n    );\n    const assetPriceData = await assetPriceDataResponse.json();\n    const priceFeed2 = formattedData.map((data) => {\n      const priceData = assetPriceData.parsed.find((price) => price.id === data.id);\n      return {\n        ...data,\n        price: (Number(priceData.price.price) / 10 ** Math.abs(priceData.price.expo)).toLocaleString() || Number(priceData.price.price).toLocaleString()\n      };\n    });\n    return priceFeed2;\n  } catch (error) {\n    throw new Error(`Token transfer failed: ${error.message}`);\n  }\n}\n\n// src/tools/joule/lend.ts\nasync function lendToken(agent, amount, mint, positionId, newPosition, fungibleAsset) {\n  const DEFAULT_FUNCTIONAL_ARGS = [positionId, amount, newPosition];\n  const COIN_STANDARD_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::lend\",\n    typeArguments: [mint.toString()],\n    functionArguments: DEFAULT_FUNCTIONAL_ARGS\n  };\n  const FUNGIBLE_ASSET_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::lend_fa\",\n    functionArguments: [positionId, mint.toString(), newPosition, amount]\n  };\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token mint failed\");\n      throw new Error(\"Token mint failed\");\n    }\n    return {\n      hash: signedTransaction.hash,\n      // @ts-ignore\n      positionId: signedTransaction.events[0].data.position_id\n    };\n  } catch (error) {\n    throw new Error(`Token mint failed: ${error.message}`);\n  }\n}\n\n// src/tools/joule/borrow.ts\nasync function borrowToken(agent, amount, mint, positionId, fungibleAsset) {\n  const pyth_update_data = await agent.getPythData();\n  const DEFAULT_FUNCTIONAL_ARGS = [positionId, amount, pyth_update_data];\n  const COIN_STANDARD_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::borrow\",\n    typeArguments: [mint.toString()],\n    functionArguments: DEFAULT_FUNCTIONAL_ARGS\n  };\n  const FUNGIBLE_ASSET_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::borrow_fa\",\n    functionArguments: [positionId, mint.toString(), amount, pyth_update_data]\n  };\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token borrow failed\");\n      throw new Error(\"Token borrow failed\");\n    }\n    return {\n      hash: signedTransaction.hash,\n      positionId\n    };\n  } catch (error) {\n    throw new Error(`Token borrow failed: ${error.message}`);\n  }\n}\n\n// src/tools/joule/repay.ts\nasync function repayToken(agent, amount, mint, positionId, fungibleAsset) {\n  const DEFAULT_FUNCTIONAL_ARGS = [positionId, amount];\n  const COIN_STANDARD_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::repay\",\n    typeArguments: [mint.toString()],\n    functionArguments: DEFAULT_FUNCTIONAL_ARGS\n  };\n  const FUNGIBLE_ASSET_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::repay_fa\",\n    functionArguments: [positionId, mint.toString(), amount]\n  };\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token repay failed\");\n      throw new Error(\"Token repay failed\");\n    }\n    return {\n      hash: signedTransaction.hash,\n      positionId\n    };\n  } catch (error) {\n    throw new Error(`Token repay failed: ${error.message}`);\n  }\n}\n\n// src/tools/joule/withdraw.ts\nasync function withdrawToken(agent, amount, mint, positionId, fungibleAsset) {\n  const pyth_update_data = await agent.getPythData();\n  const DEFAULT_FUNCTIONAL_ARGS = [positionId, amount, pyth_update_data];\n  const COIN_STANDARD_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::withdraw\",\n    typeArguments: [mint.toString()],\n    functionArguments: DEFAULT_FUNCTIONAL_ARGS\n  };\n  const FUNGIBLE_ASSET_DATA = {\n    function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::withdraw_fa\",\n    functionArguments: [positionId, mint.toString(), amount, pyth_update_data]\n  };\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Token withdraw failed\");\n      throw new Error(\"Token withdraw failed\");\n    }\n    return {\n      hash: signedTransaction.hash,\n      positionId\n    };\n  } catch (error) {\n    throw new Error(`Token withdraw failed: ${error.message}`);\n  }\n}\n\n// src/tools/joule/pool-detail.ts\nasync function getPoolDetails(agent, mint) {\n  try {\n    const allPoolDetailsResponse = await fetch(\"https://price-api.joule.finance/api/market\");\n    const allPoolDetails = await allPoolDetailsResponse.json();\n    const poolDetail = allPoolDetails.data.find((pool) => pool.asset.type.includes(mint));\n    if (!poolDetail) {\n      throw new Error(\"Pool not found\");\n    }\n    return {\n      assetName: poolDetail.asset.assetName,\n      tokenAddress: mint,\n      ltv: poolDetail.ltv,\n      decimals: poolDetail.asset.decimals,\n      marketSize: Number(poolDetail.marketSize) / poolDetail.asset.decimals,\n      totalBorrowed: Number(poolDetail.totalBorrowed) / poolDetail.asset.decimals,\n      depositApy: poolDetail.depositApy,\n      extraDepositApy: poolDetail.extraAPY.depositAPY,\n      borrowApy: poolDetail.borrowApy,\n      price: poolDetail.priceInfo.price\n    };\n  } catch (error) {\n    throw new Error(`Failed to get pool details: ${error.message}`);\n  }\n}\n\n// src/tools/joule/user-position.ts\nasync function getUserPosition(agent, userAddress, positionId) {\n  try {\n    const transaction = await agent.aptos.view({\n      payload: {\n        function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::user_position_details\",\n        functionArguments: [userAddress.toString(), positionId]\n      }\n    });\n    if (!transaction) {\n      throw new Error(\"Failed to fetch user position\");\n    }\n    return transaction;\n  } catch (error) {\n    throw new Error(`Failed to get user position: ${error.message}`);\n  }\n}\n\n// src/utils/clean-joule-all-positions-list.ts\nvar removeLastInterestRateIndex = (obj) => {\n  if (!obj || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map((item) => removeLastInterestRateIndex(item));\n  }\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    if (key === \"last_interest_rate_index\") {\n      return acc;\n    }\n    acc[key] = removeLastInterestRateIndex(value);\n    return acc;\n  }, {});\n};\n\n// src/tools/joule/user-all-positions.ts\nasync function getUserAllPositions(agent, userAddress) {\n  try {\n    const transaction = await agent.aptos.view({\n      payload: {\n        function: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::user_positions_map\",\n        functionArguments: [userAddress.toString()]\n      }\n    });\n    if (!transaction) {\n      throw new Error(\"Failed to fetch user all positions\");\n    }\n    const cleanedTransaction = removeLastInterestRateIndex(transaction);\n    return cleanedTransaction;\n  } catch (error) {\n    throw new Error(`Failed to get user all positions: ${error.message}`);\n  }\n}\n\n// src/tools/aries/create-profile.ts\nasync function createAriesProfile(agent) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::register_user\",\n        functionArguments: [\"Main account\"]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Create profile failed\");\n      throw new Error(\"Create profile failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Create profile failed: ${error.message}`);\n  }\n}\n\n// src/tools/aries/lend.ts\nasync function lendAriesToken(agent, mintType, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::deposit\",\n        typeArguments: [mintType],\n        functionArguments: [\"Main account\", amount, false]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Lend failed\");\n      throw new Error(\"Lend failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Lend failed: ${error.message}`);\n  }\n}\n\n// src/tools/aries/borrow.ts\nasync function borrowAriesToken(agent, mintType, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::withdraw\",\n        typeArguments: [mintType],\n        functionArguments: [\"Main account\", amount, true]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Borrow failed\");\n      throw new Error(\"Borrow failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Borrow failed: ${error.message}`);\n  }\n}\n\n// src/tools/aries/withdraw.ts\nasync function withdrawAriesToken(agent, mintType, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::withdraw\",\n        typeArguments: [mintType],\n        functionArguments: [\"Main account\", amount, false]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Withdraw failed\");\n      throw new Error(\"Withdraw failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Withdraw failed: ${error.message}`);\n  }\n}\n\n// src/tools/aries/repay.ts\nasync function repayAriesToken(agent, mintType, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::deposit\",\n        typeArguments: [mintType],\n        functionArguments: [\"Main account\", amount, true]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Repay failed\");\n      throw new Error(\"Repay failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Repay failed: ${error.message}`);\n  }\n}\n\n// src/tools/echelon/lend.ts\nasync function lendTokenWithEchelon(agent, mintType, amount, poolAddress, fungibleAsset) {\n  try {\n    const FUNCTIONAL_ARGS_DATA = [poolAddress, amount];\n    const COIN_STANDARD_DATA = {\n      function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::supply\",\n      typeArguments: [mintType.toString()],\n      functionArguments: FUNCTIONAL_ARGS_DATA\n    };\n    const FUNGIBLE_ASSET_DATA = {\n      function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::supply_fa\",\n      functionArguments: FUNCTIONAL_ARGS_DATA\n    };\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Lend failed\");\n      throw new Error(\"Lend failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Lend failed: ${error.message}`);\n  }\n}\n\n// src/tools/echelon/withdraw.ts\nasync function withdrawTokenWithEchelon(agent, mintType, amount, poolAddress, fungibleAsset) {\n  try {\n    const FUNCTIONAL_ARGS_DATA = [poolAddress, amount];\n    const COIN_STANDARD_DATA = {\n      function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::withdraw\",\n      typeArguments: [mintType.toString()],\n      functionArguments: FUNCTIONAL_ARGS_DATA\n    };\n    const FUNGIBLE_ASSET_DATA = {\n      function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::withdraw_fa\",\n      functionArguments: FUNCTIONAL_ARGS_DATA\n    };\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Withdraw failed\");\n      throw new Error(\"Withdraw failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Withdraw failed: ${error.message}`);\n  }\n}\n\n// src/tools/echelon/repay.ts\nasync function repayTokenWithEchelon(agent, mintType, amount, poolAddress, fungibleAsset) {\n  try {\n    const FUNCTIONAL_ARGS_DATA = [poolAddress, amount];\n    const COIN_STANDARD_DATA = {\n      function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::repay\",\n      typeArguments: [mintType.toString()],\n      functionArguments: FUNCTIONAL_ARGS_DATA\n    };\n    const FUNGIBLE_ASSET_DATA = {\n      function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::repay_fa\",\n      functionArguments: FUNCTIONAL_ARGS_DATA\n    };\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Repay failed\");\n      throw new Error(\"Repay failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Repay failed: ${error.message}`);\n  }\n}\n\n// src/tools/echelon/borrow.ts\nasync function borrowTokenWithEchelon(agent, mintType, amount, poolAddress, fungibleAsset) {\n  const FUNCTIONAL_ARGS_DATA = [poolAddress, amount];\n  const COIN_STANDARD_DATA = {\n    function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::borrow\",\n    typeArguments: [mintType.toString()],\n    functionArguments: FUNCTIONAL_ARGS_DATA\n  };\n  const FUNGIBLE_ASSET_DATA = {\n    function: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::borrow_fa\",\n    functionArguments: FUNCTIONAL_ARGS_DATA\n  };\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Borrow failed\");\n      throw new Error(\"Borrow failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Borrow failed: ${error.message}`);\n  }\n}\n\n// src/tools/echo/stake.ts\nasync function stakeTokenWithEcho(agent, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0xa0281660ff6ca6c1b68b55fcb9b213c2276f90ad007ad27fd003cf2f3478e96e::lsdmanage::stake\",\n        functionArguments: [amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Stake token in Echo failed\");\n      throw new Error(\"Stake token in Echo failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Stake token in Echo failed: ${error.message}`);\n  }\n}\n\n// src/tools/echo/unstake.ts\nasync function unstakeTokenWithEcho(agent, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0xa0281660ff6ca6c1b68b55fcb9b213c2276f90ad007ad27fd003cf2f3478e96e::lsdmanage::unstake\",\n        functionArguments: [amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Unstake token in Echo failed\");\n      throw new Error(\"Unstake token in Echo failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Unstake token in Echo failed: ${error.message}`);\n  }\n}\n\n// src/tools/liquidswap/swap.ts\nasync function swap(agent, mintX, mintY, swapAmount, minCoinOut = 0) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::scripts_v2::swap\",\n        typeArguments: [\n          mintX,\n          mintY,\n          \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::curves::Uncorrelated\"\n        ],\n        functionArguments: [swapAmount, minCoinOut]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Swap failed\");\n      throw new Error(\"Swap failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Swap failed: ${error.message}`);\n  }\n}\n\n// src/tools/liquidswap/create-pool.ts\nasync function createPool(agent, mintX, mintY) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::scripts_v2::register_pool\",\n        typeArguments: [\n          mintX,\n          mintY,\n          \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::curves::Uncorrelated\"\n        ],\n        functionArguments: []\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Create pool failed\");\n      throw new Error(\"Create pool failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Create pool failed: ${error.message}`);\n  }\n}\n\n// src/tools/liquidswap/add-liquidity.ts\nasync function addLiquidity(agent, mintX, mintY, mintXAmount, mintYAmount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x9dd974aea0f927ead664b9e1c295e4215bd441a9fb4e53e5ea0bf22f356c8a2b::router::add_liquidity_v05\",\n        typeArguments: [\n          mintX,\n          mintY,\n          \"0x163df34fccbf003ce219d3f1d9e70d140b60622cb9dd47599c25fb2f797ba6e::curves::Uncorrelated\"\n        ],\n        functionArguments: [\n          mintXAmount,\n          0,\n          //coin_x_min,\n          mintYAmount,\n          0\n          // coin_y_min\n        ]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Add liquidity failed\");\n      throw new Error(\"Add liquidity failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    console.error(error, \"Add liquidity failed\");\n    throw new Error(`Add liquidity failed: ${error.message}`);\n  }\n}\n\n// src/tools/liquidswap/remove-liquidity.ts\nasync function removeLiquidity(agent, mintX, mintY, lpAmount, minMintX = 0, minMintY = 0) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x9dd974aea0f927ead664b9e1c295e4215bd441a9fb4e53e5ea0bf22f356c8a2b::router::remove_liquidity_v05\",\n        typeArguments: [\n          mintX,\n          mintY,\n          \"0x163df34fccbf003ce219d3f1d9e70d140b60622cb9dd47599c25fb2f797ba6e::curves::Uncorrelated\"\n        ],\n        functionArguments: [lpAmount, minMintX, minMintY]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Remove liquidity failed\");\n      throw new Error(\"Remove liquidity failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Remove liquidity failed: ${error.message}`);\n  }\n}\n\n// src/tools/panora/swap.ts\n\nasync function swapWithPanora(agent, fromToken, toToken, swapAmount, toWalletAddress) {\n  try {\n    const panoraParameters = {\n      fromTokenAddress: fromToken,\n      toTokenAddress: toToken,\n      fromTokenAmount: swapAmount.toString(),\n      toWalletAddress: toWalletAddress ? toWalletAddress : agent.account.getAddress().toString()\n    };\n    const url = `https://api.panora.exchange/swap?${new URLSearchParams(panoraParameters).toString()}`;\n    const panoraApiKey = agent.config.PANORA_API_KEY;\n    if (!panoraApiKey) {\n      throw new Error(\"No PANORA_API_KEY in config\");\n    }\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\n      url,\n      {},\n      {\n        headers: {\n          \"x-api-key\": panoraApiKey\n        }\n      }\n    );\n    const response = await res.data;\n    if (response.quotes.length <= 0) {\n      throw new Error(\"no quotes available from panora\");\n    }\n    const transactionData = response.quotes[0].txData;\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: transactionData.function,\n        typeArguments: transactionData.type_arguments,\n        functionArguments: transactionData.arguments\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Swap failed\");\n      throw new Error(\"Swap tx failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Swap failed: ${error.message}`);\n  }\n}\n\n// src/tools/openai/create-image.ts\n\nasync function createImage(agent, prompt, size = \"1024x1024\", n = 1) {\n  try {\n    const apiKey = agent.config.OPENAI_API_KEY;\n    if (!apiKey) {\n      throw new Error(\"No OPENAI_API_KEY in config\");\n    }\n    const openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({ apiKey });\n    const response = await openai.images.generate({\n      prompt,\n      n,\n      size\n    });\n    return {\n      images: response.data.map((img) => img.url)\n    };\n  } catch (error) {\n    throw new Error(`Image generation failed: ${error.message}`);\n  }\n}\n\n// src/tools/thala/stake.ts\nasync function stakeTokenWithThala(agent, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6::scripts::stake_APT_and_thAPT\",\n        functionArguments: [amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Stake APT failed\");\n      throw new Error(\"Stake APT failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Stake APT failed: ${error.message}`);\n  }\n}\n\n// src/tools/thala/unstake.ts\nasync function unstakeAPTWithThala(agent, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6::scripts::unstake_thAPT\",\n        functionArguments: [amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Unstake token failed\");\n      throw new Error(\"Unstake token failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Unstake token failed: ${error.message}`);\n  }\n}\n\n// src/tools/thala/mint-mod.ts\nasync function mintMODWithThala(agent, mintType, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x6f986d146e4a90b828d8c12c14b6f4e003fdff11a8eecceceb63744363eaac01::psm_scripts::mint\",\n        typeArguments: [mintType],\n        functionArguments: [amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Mint MOD failed\");\n      throw new Error(\"Mint MOD failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Mint MOD failed: ${error.message}`);\n  }\n}\n\n// src/tools/thala/redeem-mod.ts\nasync function redeemMODWithThala(agent, mintType, amount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x6f986d146e4a90b828d8c12c14b6f4e003fdff11a8eecceceb63744363eaac01::psm_scripts::redeem\",\n        typeArguments: [mintType],\n        functionArguments: [amount]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Redeem MOD failed\");\n      throw new Error(\"Redeem MOD failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Redeem MOD failed: ${error.message}`);\n  }\n}\n\n// src/tools/thala/add-liquidity.ts\nasync function addLiquidityWithThala(agent, mintTypeX, mintTypeY, mintXAmount, mintYAmount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool_scripts::add_liquidity\",\n        typeArguments: [\n          mintTypeX,\n          mintTypeY,\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\"\n        ],\n        functionArguments: [mintXAmount, mintYAmount, 0, 0, 0, 0, 0, 0]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Add liquidity failed\");\n      throw new Error(\"Add liquidity failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Add liquidity failed: ${error.message}`);\n  }\n}\n\n// src/tools/thala/remove-liquidity.ts\nasync function removeLiquidityWithThala(agent, mintTypeX, mintTypeY, lpAmount) {\n  try {\n    const transaction = await agent.aptos.transaction.build.simple({\n      sender: agent.account.getAddress(),\n      data: {\n        function: \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool_scripts::remove_liquidity\",\n        typeArguments: [\n          mintTypeX,\n          mintTypeY,\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n          \"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\"\n        ],\n        functionArguments: [lpAmount, 0, 0, 0, 0]\n      }\n    });\n    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n    const signedTransaction = await agent.aptos.waitForTransaction({\n      transactionHash: committedTransactionHash\n    });\n    if (!signedTransaction.success) {\n      console.error(signedTransaction, \"Remove liquidity failed\");\n      throw new Error(\"Remove liquidity failed\");\n    }\n    return signedTransaction.hash;\n  } catch (error) {\n    throw new Error(`Remove liquidity failed: ${error.message}`);\n  }\n}\n\n// src/utils/get-pool-address-by-token-name.ts\nvar tokensList = [\n  {\n    name: \"USDt\",\n    poolAddress: \"0xac00e90cdadec06d81e0d5ce7a3e93d63d563e982dea0ca15bad2b067f42d2be\",\n    decimals: 6,\n    tokenAddress: \"0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\"\n  },\n  {\n    name: \"zUSDT\",\n    poolAddress: \"0x447b3b516546f28e8c4f6825a6287b09161659e7c500c599c29c28a8492844b8\",\n    decimals: 6,\n    tokenAddress: \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\"\n  },\n  {\n    name: \"zUSDC\",\n    poolAddress: \"0xa9c51ca3bcd93978d0c4aada7c4cf47c0791caced3cdc4e15f2c8e0797d1f93c\",\n    decimals: 6,\n    tokenAddress: \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC\"\n  },\n  {\n    name: \"APT\",\n    poolAddress: \"0x761a97787fa8b3ae0cef91ebc2d96e56cc539df5bc88dadabee98ae00363a831\",\n    decimals: 8,\n    tokenAddress: \"0x1::aptos_coin::AptosCoin\"\n  },\n  {\n    name: \"sthAPT\",\n    poolAddress: \"0xed6bf9fe7e3f42c6831ffac91824a545c4b8bfcb40a59b3f4ccfe203cafb7f42\",\n    decimals: 8,\n    tokenAddress: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6::staking::StakedThalaAPT\"\n  },\n  {\n    name: \"MOD\",\n    poolAddress: \"0xef2ae89796725d0eb363326ecb7df159feb949f6d1f400f76deeeebccbac00f1\",\n    decimals: 8,\n    tokenAddress: \"0x6f986d146e4a90b828d8c12c14b6f4e003fdff11a8eecceceb63744363eaac01::mod_coin::MOD\"\n  },\n  {\n    name: \"THL\",\n    poolAddress: \"0x127ea5b4c450be695e488da1c3bc013e2e93d8cf00270ef90385189844bc9755\",\n    decimals: 8,\n    tokenAddress: \"0x7fd500c11216f0fe3095d0c4b8aa4d64a4e2e04f83758462f2b127255643615::thl_coin::THL\"\n  },\n  {\n    name: \"wUSDC\",\n    poolAddress: \"0xa76ebfb432982c864783fdb33cdf5a9edb18ac1b950deb8037f5cf8c984da3d2\",\n    decimals: 6,\n    tokenAddress: \"0x5e156f1207d0ebfa19a9eeff00d62a282278fb8719f4fab3a586a0a2c0fffbea::coin::T\"\n  },\n  {\n    name: \"zWETH\",\n    poolAddress: \"0x548cf587bd918a0005b3372a1d23e64b18ace3c61962f087a21eac52cf228504\",\n    decimals: 6,\n    tokenAddress: \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::WETH\"\n  },\n  {\n    name: \"wWETH\",\n    poolAddress: \"0x114ee519ffa1e8697784bd1a350822cb37601a1476289051b8295165597a4538\",\n    decimals: 6,\n    tokenAddress: \"0xcc8a89c8dce9693d354449f1f73e60e14e347417854f029db5bc8e7454008abb::coin::T\"\n  },\n  {\n    name: \"CAKE\",\n    poolAddress: \"0x41b039e5518b1a3786ee798d895e0ddf3141fbbc20009284323fa51ea279c819\",\n    decimals: 8,\n    tokenAddress: \"0x159df6b7689437016108a019fd5bef736bac692b6d4a1f10c941f6fbb9a74ca6::oft::CakeOFT\"\n  },\n  {\n    name: \"stAPT\",\n    poolAddress: \"0xc3c9cc885a52004e0490f6a8291b3bc5854f0e42d931fb124736bd189c9f0f45\",\n    decimals: 8,\n    tokenAddress: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::stapt_token::StakedApt\"\n  },\n  {\n    name: \"aBTC\",\n    poolAddress: \"0xacb7262b33a147b47b950a3a26d7699e1a58bcaa475ef636cb0fea53fa0eb872\",\n    decimals: 10,\n    tokenAddress: \"0x4e1854f6d332c9525e258fb6e66f84b6af8aba687bbcb832a24768c4e175feec::abtc::ABTC\"\n  },\n  {\n    name: \"STONE\",\n    poolAddress: \"0x075c39f18c7bc00ac0f81a0f9ab7e319e23790d7d8c3df968d84a23699584bd9\",\n    decimals: 8,\n    tokenAddress: \"0x543c5660aa4d496687e2068c11765f04607c4f4b639a83233a9333604fb8ce59::stakestone_ether::StakeStoneEther\"\n  },\n  {\n    name: \"truAPT\",\n    poolAddress: \"0x7bd5be03df0fb3841fed337b8e7a353818b917cce6db28b807b691002a122d73\",\n    decimals: 8,\n    tokenAddress: \"0xaef6a8c3182e076db72d64324617114cacf9a52f28325edc10b483f7f05da0e7\"\n  },\n  {\n    name: \"sBTC\",\n    poolAddress: \"0x754114c656e26498a8c0b20fa24af663fed5e4b24acb471c103daea0f7006b40\",\n    decimals: 8,\n    tokenAddress: \"0x5dee1d4b13fae338a1e1780f9ad2709a010e824388efd169171a26e3ea9029bb::stakestone_bitcoin::StakeStoneBitcoin\"\n  }\n];\nvar getTokenByTokenName = (name) => {\n  const token = tokensList.find(\n    (token2) => token2.name.toLowerCase() === name.toLowerCase() || token2.name.toLowerCase().includes(name.toLowerCase())\n  );\n  return token;\n};\nvar getTokenByTokenAddress = (address) => {\n  const token = tokensList.find((token2) => token2.tokenAddress.toLowerCase() === address.toLowerCase());\n  return token;\n};\n\n// src/agent.ts\nvar AgentRuntime = class {\n  account;\n  aptos;\n  config;\n  constructor(account, aptos, config) {\n    this.account = account;\n    this.aptos = aptos;\n    this.config = config ? config : {};\n  }\n  async getPythData() {\n    const connection = new _pythnetwork_pyth_aptos_js__WEBPACK_IMPORTED_MODULE_1__.AptosPriceServiceConnection(\"https://hermes.pyth.network\");\n    return await connection.getPriceFeedsUpdateData(priceFeed);\n  }\n  getBalance(mint) {\n    return getBalance(this, mint);\n  }\n  getTokenDetails(token) {\n    return getTokenDetails(token);\n  }\n  getTokenByTokenName(name) {\n    return getTokenByTokenName(name);\n  }\n  getTokenPrice(query) {\n    return getTokenPrice(query);\n  }\n  transferTokens(to, amount, mint) {\n    return transferTokens(this, to, amount, mint);\n  }\n  getTransaction(hash) {\n    return getTransaction(this, hash);\n  }\n  burnToken(amount, mint) {\n    return burnToken(this, amount, mint);\n  }\n  createToken(name, symbol, iconURI, projectURI) {\n    return createToken(this, name, symbol, iconURI, projectURI);\n  }\n  mintToken(to, mint, amount) {\n    return mintToken(this, to, mint, amount);\n  }\n  stakeTokensWithAmnis(to, amount) {\n    return stakeTokens(this, to, amount);\n  }\n  withdrawStakeFromAmnis(to, amount) {\n    return unstakeTokens(this, to, amount);\n  }\n  transferNFT(to, mint) {\n    return transferNFT(this, to, mint);\n  }\n  burnNFT(mint) {\n    return burnNFT(this, mint);\n  }\n  lendToken(amount, mint, positionId, newPosition, fungibleAsset) {\n    return lendToken(this, amount, mint, positionId, newPosition, fungibleAsset);\n  }\n  borrowToken(amount, mint, positionId, fungibleAsset) {\n    return borrowToken(this, amount, mint, positionId, fungibleAsset);\n  }\n  withdrawToken(amount, mint, positionId, fungibleAsset) {\n    return withdrawToken(this, amount, mint, positionId, fungibleAsset);\n  }\n  repayToken(amount, mint, positionId, fungibleAsset) {\n    return repayToken(this, amount, mint, positionId, fungibleAsset);\n  }\n  getUserPosition(userAddress, positionId) {\n    return getUserPosition(this, userAddress, positionId);\n  }\n  getUserAllPositions(userAddress) {\n    return getUserAllPositions(this, userAddress);\n  }\n  getPoolDetails(mint) {\n    return getPoolDetails(this, mint);\n  }\n  addLiquidity(mintX, mintY, mintXAmount, mintYAmount) {\n    return addLiquidity(this, mintX, mintY, mintXAmount, mintYAmount);\n  }\n  removeLiquidity(mintX, mintY, lpAmount, minMintX = 0, minMintY = 0) {\n    return removeLiquidity(this, mintX, mintY, lpAmount, minMintX, minMintY);\n  }\n  swap(mintX, mintY, swapAmount, minCoinOut) {\n    return swap(this, mintX, mintY, swapAmount, minCoinOut);\n  }\n  createPool(mintX, mintY) {\n    return createPool(this, mintX, mintY);\n  }\n  // Aries\n  createAriesProfile() {\n    return createAriesProfile(this);\n  }\n  lendAriesToken(mintType, amount) {\n    return lendAriesToken(this, mintType, amount);\n  }\n  borrowAriesToken(mintType, amount) {\n    return borrowAriesToken(this, mintType, amount);\n  }\n  withdrawAriesToken(mintType, amount) {\n    return withdrawAriesToken(this, mintType, amount);\n  }\n  repayAriesToken(mintType, amount) {\n    return repayAriesToken(this, mintType, amount);\n  }\n  // Thala\n  stakeTokensWithThala(amount) {\n    return stakeTokenWithThala(this, amount);\n  }\n  unstakeTokensWithThala(amount) {\n    return unstakeAPTWithThala(this, amount);\n  }\n  mintMODWithThala(mintType, amount) {\n    return mintMODWithThala(this, mintType, amount);\n  }\n  redeemMODWithThala(mintType, amount) {\n    return redeemMODWithThala(this, mintType, amount);\n  }\n  addLiquidityWithThala(mintX, mintY, mintXAmount, mintYAmount) {\n    return addLiquidityWithThala(this, mintX, mintY, mintXAmount, mintYAmount);\n  }\n  removeLiquidityWithThala(mintX, mintY, lpAmount) {\n    return removeLiquidityWithThala(this, mintX, mintY, lpAmount);\n  }\n  // panora\n  swapWithPanora(fromToken, toToken, swapAmount, toWalletAddress) {\n    return swapWithPanora(this, fromToken, toToken, swapAmount, toWalletAddress);\n  }\n  // openai\n  createImageWithOpenAI(prompt, size, n) {\n    return createImage(this, prompt, size, n);\n  }\n  // Echo\n  stakeTokenWithEcho(amount) {\n    return stakeTokenWithEcho(this, amount);\n  }\n  unstakeTokenWithEcho(amount) {\n    return unstakeTokenWithEcho(this, amount);\n  }\n  // Echelon\n  lendTokenWithEchelon(mintType, amount, poolAddress, fungibleAsset) {\n    return lendTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset);\n  }\n  withdrawTokenWithEchelon(mintType, amount, poolAddress, fungibleAsset) {\n    return withdrawTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset);\n  }\n  repayTokenWithEchelon(mintType, amount, poolAddress, fungibleAsset) {\n    return repayTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset);\n  }\n  borrowTokenWithEchelon(mintType, amount, poolAddress, fungibleAsset) {\n    return borrowTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset);\n  }\n};\n\n// src/langchain/account/address.ts\n\nvar AptosAccountAddressTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_get_wallet_address\";\n  description = \"Get the wallet address of the agent\";\n  async _call(_input) {\n    return this.agent.account.getAddress().toString();\n  }\n};\n\n// src/langchain/amnis/stake.ts\n\n\nvar AmnisStakeTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"amnis_stake\";\n  description = `this tool can be used to stake APT (Aptos) to amnis validator and receive its liquid staking token stAPT (staked APT)\n\n\tkeep recipient blank if user themselves wants to receive stAPT and not send to anybody else\n\n  Inputs ( input is a JSON string ) (required):\n  amount: number, eg 1 or 0.01 (required)\n  recipient: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const recipient = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(parsedInput.recipient) || this.agent.account.getAddress();\n      const stakeTransactionHash = await this.agent.stakeTokensWithAmnis(\n        recipient,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        stakeTransactionHash,\n        token: {\n          name: \"stAPT\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/amnis/withdraw-stake.ts\n\n\nvar AmnisWithdrawStakeTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"amnis_withdraw_stake\";\n  description = `this tool can be used to withdraw staked APT (Aptos) from amnis validator and receive back APT\n\n\tkeep recipient blank if user themselves wants to receive APT and not send to anybody else\n\n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  recipient: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const recipient = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(parsedInput.recipient) || this.agent.account.getAddress();\n      const withdrawStakeTransactionHash = await this.agent.withdrawStakeFromAmnis(\n        recipient,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        withdrawStakeTransactionHash,\n        token: {\n          name: \"APT\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/balance.ts\n\nvar AptosBalanceTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_balance\";\n  description = `Get the balance of a Aptos account.\n\n  If you want to get the balance of your wallet, you don't need to provide the mint.\n  If no mint is provided, the balance will be in APT.\n  if you want to get balance of a fungible asset, you need to provide the asset address as mint\n\n  Inputs ( input is a JSON string ):\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"\n  0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\" (optional)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mint = parsedInput.mint || void 0;\n      const mintDetails = this.agent.getTokenDetails(mint);\n      const balance = await this.agent.getBalance(mint);\n      return JSON.stringify({\n        status: \"success\",\n        balance,\n        token: {\n          name: mintDetails.name || \"APT\",\n          decimals: mintDetails.decimals || 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/get-token-details.ts\n\nvar AptosGetTokenDetailTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_token_details\";\n  description = `Get the detail of any aptos tokens\n\n  details also include decimals which you can use to make onchain values readable to a human user\n\n  Inputs ( input is a JSON string ):\n  token: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (optional)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mint = parsedInput.token || \"\";\n      const tokenData = await this.agent.getTokenDetails(mint);\n      return JSON.stringify({\n        status: \"success\",\n        tokenData\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/transfer-token.ts\n\n\nvar AptosTransferTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_transfer_token\";\n  description = `this tool can be used to transfer APT, any token or fungible asset to a recipient\n\n  if you want to transfer APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to transfer token other than APT, you need to provide the mint of that specific token\n  if you want to transfer fungible asset, add fungible asset address as mint\n\n  keep to blank if user themselves wants to receive the token and not send to anybody else\n\n  Inputs ( input is a JSON string ):\n  to: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" \n  or \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const recipient = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(parsedInput.to) || this.agent.account.getAddress();\n      const transferTokenTransactionHash = await this.agent.transferTokens(\n        recipient,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 6),\n        parsedInput.mint\n      );\n      return JSON.stringify({\n        status: \"success\",\n        transferTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/burn-token.ts\n\n\nvar AptosBurnTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_burn_token\";\n  description = `this tool can be used to burn a fungible asset\n\n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required) \n  mint: string, \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const burnTransactionHash = await this.agent.burnToken(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        parsedInput.mint\n      );\n      return JSON.stringify({\n        status: \"success\",\n        burnTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/mint-token.ts\n\n\nvar AptosMintTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_mint_token\";\n  description = `this tool can be used to create fungible asset to a recipient\n\nif the recipient wants to receive the token and not send to anybody else, keep to blank\n\n  Inputs ( input is a JSON string ):\n  to: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const recipient = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(parsedInput.to) || this.agent.account.getAddress();\n      const mintTokenTransactionHash = await this.agent.mintToken(recipient, parsedInput.mint, parsedInput.amount);\n      return JSON.stringify({\n        status: \"success\",\n        mintTokenTransactionHash,\n        token: {\n          name: mintDetail.name || \"APT\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/create-token.ts\n\nvar AptosCreateTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_create_token\";\n  description = `this tool can be used to create fungible asset to a recipient\n\n  Inputs ( input is a JSON string ):\n  name: string, eg \"USDT\" (required)\n  symbol: string, eg \"USDT\" (required)\n  iconURI: string, eg \"https://example.com/icon.png\" (required)\n  projectURI: string, eg \"https://example.com/project\" (required)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const createTokenTransactionHash = await this.agent.createToken(\n        parsedInput.name,\n        parsedInput.symbol,\n        parsedInput.iconURI,\n        parsedInput.projectURI\n      );\n      return JSON.stringify({\n        status: \"success\",\n        createTokenTransactionHash,\n        token: {\n          name: parsedInput.name,\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/get-transaction.ts\n\nvar AptosTransactionTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_get_transaction\";\n  description = `Fetches a transaction from aptos blockchain\n\n  Inputs ( input is a JSON string ):\n  transactionHash: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const aptosTransaction = await this.agent.getTransaction(parsedInput.transactionHash);\n      return JSON.stringify({\n        status: \"success\",\n        aptosTransaction\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aptos/get-token-price.ts\n\nvar AptosGetTokenPriceTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aptos_token_price\";\n  description = `Get the live price of any aptos tokens in USD.\n\tdo not do any decimals conversion here, the price is already in USD\n\n  details also include decimals which you can use to make onchain values readable to a human user\n\n  Inputs ( input is a JSON string - this is IMPORTANT):\n  token: string, eg usdt, btc etc.`;\n  async _call(input) {\n    console.log(\"input\", input);\n    try {\n      const parsedInput = parseJson(input);\n      const token = parsedInput.token || input || \"usdt\";\n      const tokenData = await this.agent.getTokenPrice(token);\n      return JSON.stringify({\n        status: \"success\",\n        tokenData\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aries/create-profile.ts\n\nvar AriesCreateProfileTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aries_create_profile\";\n  description = `this tool can be used to create a profile in Aries\n    `;\n  async _call() {\n    try {\n      const createProfileTransactionHash = await this.agent.createAriesProfile();\n      return JSON.stringify({\n        status: \"success\",\n        createProfileTransactionHash\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aries/lend-token.ts\n\n\n\n// src/utils/parse-json.ts\nvar parseJson = (input) => {\n  try {\n    const forbiddenWords = [\"null\", \"undefined\", \"{}\"];\n    if (input in forbiddenWords) throw new Error();\n    const parsedInput = JSON.parse(input);\n    return parsedInput;\n  } catch (e) {\n    return {};\n  }\n};\n\n// src/langchain/aries/lend-token.ts\nvar AriesLendTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aries_lend\";\n  description = `this tool can be used to lend tokens in Aries\n\n    if you want to lend APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const lendTokenTransactionHash = await this.agent.lendAriesToken(\n        parsedInput.mintType,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        lendTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aries/withdraw-token.ts\n\n\nvar AriesWithdrawTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aries_withdraw\";\n  description = `this tool can be used to withdraw tokens from Aries\n\n    if you want to withdraw APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const withdrawTokenTransactionHash = await this.agent.withdrawAriesToken(\n        parsedInput.mintType,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        withdrawTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals || 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aries/borrow-token.ts\n\n\nvar AriesBorrowTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aries_borrow\";\n  description = `this tool can be used to borrow tokens from Aries\n\n    if you want to borrow APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const borrowTokenTransactionHash = await this.agent.borrowAriesToken(\n        parsedInput.mintType,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        borrowTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/aries/repay-token.ts\n\n\nvar AriesRepayTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"aries_repay\";\n  description = `this tool can be used to repay tokens in Aries\n\n    if you want to repay APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const repayTokenTransactionHash = await this.agent.repayAriesToken(\n        parsedInput.mintType,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        repayTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/joule/lend-token.ts\n\n\nvar JouleLendTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"joule_lend_token\";\n  description = `this tool can be used to lend APT, tokens or fungible asset to a position\n\n  if you want to lend APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to lend token other than APT, you need to provide the mint of that specific token\n  if you want to lend fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n\n  if positionId is not provided, the positionId will be 1234 and newPosition should be true\n  \n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  newPosition: boolean, (required)  \n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const fungibleAsset = mintDetail.faAddress.toLowerCase() === parsedInput.mint.toLowerCase();\n      const lendTokenTransactionHash = await this.agent.lendToken(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        parsedInput.mint,\n        parsedInput.positionId,\n        parsedInput.newPosition,\n        fungibleAsset\n      );\n      return JSON.stringify({\n        status: \"success\",\n        lendTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/joule/borrow-token.ts\n\n\nvar JouleBorrowTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"joule_borrow_token\";\n  description = `this tool can be used to borrow APT, tokens or fungible asset from a position\n\n  if you want to borrow APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to borrow token other than APT, you need to provide the mint of that specific token\n  if you want to borrow fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n  \n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const fungibleAsset = mintDetail.faAddress.toLowerCase() === parsedInput.mint.toLowerCase();\n      const borrowTokenTransactionHash = await this.agent.borrowToken(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        parsedInput.mint,\n        parsedInput.positionId,\n        fungibleAsset\n      );\n      return JSON.stringify({\n        status: \"success\",\n        borrowTokenTransactionHash,\n        token: {\n          name: mintDetail.name || \"APT\",\n          decimals: mintDetail.decimals || 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/joule/withdraw-token.ts\n\n\nvar JouleWithdrawTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"joule_withdraw_token\";\n  description = `this tool can be used to withdraw APT, tokens or fungible asset from a position\n\n  if you want to withdraw APT, add \"0x1::aptos_coin::AptosCoin\" as mint\n  if you want to withdraw token other than APT, you need to provide the mint of that specific token\n  if you want to withdraw fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n  \n  Inputs ( input is a JSON string ):\n\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const fungibleAsset = mintDetail.faAddress.toLowerCase() === parsedInput.mint.toLowerCase();\n      const withdrawTokenTransactionHash = await this.agent.withdrawToken(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        parsedInput.mint,\n        parsedInput.positionId,\n        fungibleAsset\n      );\n      return JSON.stringify({\n        status: \"success\",\n        withdrawTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/joule/repay-token.ts\n\n\nvar JouleRepayTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"joule_repay_token\";\n  description = `this tool can be used to repay APT, tokens or fungible asset from a position\n\n  if you want to repay APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to repay token other than APT, you need to provide the mint of that specific token\n  if you want to repay fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n  \n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  fungibleAssetAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintDetail = await this.agent.getTokenDetails(parsedInput.mint);\n      const repayTokenTransactionHash = await this.agent.repayToken(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        parsedInput.mint,\n        parsedInput.positionId,\n        parsedInput.fungibleAssetAddress\n      );\n      return JSON.stringify({\n        status: \"success\",\n        repayTokenTransactionHash,\n        token: {\n          name: mintDetail.name,\n          decimals: mintDetail.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/joule/get-pool-details.ts\n\nvar JouleGetPoolDetails = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"joule_get_pool_details\";\n  description = `the tool can be used to get a token / fungible asset pool details\n\n  Inputs ( input is a JSON string ):\n     mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n\n  Example: '{\"mint\": \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\"}'\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const pool = await this.agent.getPoolDetails(parsedInput.mint);\n      return JSON.stringify({\n        status: \"success\",\n        pool\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/joule/get-user-position.ts\n\n\nvar JouleGetUserPosition = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"joule_get_user_position\";\n  description = `the tool can be used to get details about a user's position\n\n\tkeep userAddress blank if user wants to get their own position or didn't provide any other user's address\n\n\task user to provide positionId from the list of positions they have if they want to get details about a specific position.\n\tdo not fill random positionId if the user didn't provide any positionId\n\n  Inputs ( input is a JSON string ):\n     userAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n     positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const userAddress = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(parsedInput.userAddress) || this.agent.account.getAddress();\n      const jouleUserPosition = await this.agent.getUserPosition(userAddress, parsedInput.positionId);\n      return JSON.stringify({\n        status: \"success\",\n        jouleUserPosition\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/joule/get-user-all-positions.ts\n\n\nvar JouleGetUserAllPositions = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"joule_get_user_all_positions\";\n  description = `the tool can be used to get details about a user's all positions\n\n\tkeep userAddress blank if user wants to get their own position or didn't provide any other user's address\n\n  Inputs ( input is a JSON string ):\n     userAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const userAddress = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(parsedInput.userAddress) || this.agent.account.getAddress();\n      const jouleUserAllPositions = await this.agent.getUserAllPositions(userAddress);\n      return JSON.stringify({\n        status: \"success\",\n        jouleUserAllPositions,\n        tokens: tokensList.map((token) => {\n          return {\n            name: token.name,\n            decimals: token.decimals,\n            tokenAddress: token.tokenAddress\n          };\n        })\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/liquidswap/swap.ts\n\n\nvar LiquidSwapSwapTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"liquidswap_swap\";\n  description = `this tool can be used to swap tokens in liquidswap\n\nwant to swap APT and one of the token, mint is 0x1::aptos_coin::AptosCoin\none of the token is USDT, use 0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\n\nif user added mintX or mintY as asset name, and you don't have the address of the asset, use these token names:\nusdt,zusdt,zusdc,apt,sthapt,mod,thl,wusdc,zweth,wweth,cake,stapt,abtc,stone,truapt,sbtc\nor whatever name the user has provided, you can use the token name to get the address of the token \n\ncant swap any fungible tokens. only coin standard swap allowed. if user trying to swap fungible token, ask it to swap via panora.\n\ncoin standard format : string::string::string\n\nInputs (input is a JSON string):\nmintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\nmintY: string, eg (same as mintX) (required)\nswapAmount: number, eg 1 or 0.01 (required)\nminCoinOut: number, eg 1 or 0.01 (optional)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      let mintX = parsedInput.mintX;\n      const tokenX = getTokenByTokenName(mintX);\n      if (tokenX) {\n        mintX = tokenX.tokenAddress;\n      }\n      let mintY = parsedInput.mintY;\n      const tokenY = getTokenByTokenName(mintY);\n      if (tokenY) {\n        mintY = tokenY.tokenAddress;\n      }\n      const mintXDetail = await this.agent.getTokenDetails(mintX);\n      const mintYDetail = await this.agent.getTokenDetails(mintY);\n      const swapTransactionHash = await this.agent.swap(\n        mintX,\n        mintY,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.swapAmount, mintXDetail.decimals),\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.minCoinOut, mintXDetail.decimals) || 0\n      );\n      return JSON.stringify({\n        status: \"success\",\n        swapTransactionHash,\n        token: [\n          {\n            mintX: mintXDetail.name,\n            decimals: mintXDetail.decimals\n          },\n          {\n            mintY: mintYDetail.name,\n            decimals: mintYDetail.decimals\n          }\n        ]\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/liquidswap/create-pool.ts\n\n\n// src/utils/parse-fungible-asset-to-wrapped-asset.ts\nvar parseFungibleAssetAddressToWrappedAssetAddress = (assetAddress) => {\n  if (assetAddress === \"0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\") {\n    return \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::fa_to_coin_wrapper::WrappedUSDT\";\n  }\n  return assetAddress;\n};\n\n// src/langchain/liquidswap/create-pool.ts\nvar LiquidSwapCreatePoolTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"liquidswap_create_pool\";\n  description = `this tool can be used to create a new pool in liquidswap\n\n    if you want to create a pool with APT and one of the token, mint will be \"0x1::aptos_coin::AptosCoin\"\n\n\tif user added mintX or mintY as asset name, and you don't have the address of the asset, you can use the following token names:\n\t['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n\tor whatever name the user has provided, you can use the token name to get the address of the token \n\n    Inputs ( input is a JSON string ):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      let mintX = parsedInput.mintX;\n      const tokenX = getTokenByTokenName(mintX);\n      if (tokenX) {\n        mintX = tokenX.tokenAddress;\n      }\n      let mintY = parsedInput.mintY;\n      const tokenY = getTokenByTokenName(mintY);\n      if (tokenY) {\n        mintY = tokenY.tokenAddress;\n      }\n      const mintXDetail = await this.agent.getTokenDetails(mintX);\n      const mintYDetail = await this.agent.getTokenDetails(mintY);\n      const createPoolTransactionHash = await this.agent.createPool(\n        parseFungibleAssetAddressToWrappedAssetAddress(mintX),\n        parseFungibleAssetAddressToWrappedAssetAddress(mintY)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        createPoolTransactionHash,\n        token: [\n          {\n            mintX: mintXDetail.name,\n            decimals: mintXDetail.decimals\n          },\n          {\n            mintY: mintYDetail.name,\n            decimals: mintYDetail.decimals\n          }\n        ]\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/liquidswap/add-liquidity.ts\n\n\nvar LiquidSwapAddLiquidityTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"liquidswap_add_liquidity\";\n  description = `this tool can be used to add liquidity in liquidswap\n\n    if you want to add APT and one of the token, mint will be \"0x1::aptos_coin::AptosCoin\"\n\n\tif user added mintX or mintY as asset name, and you don't have the address of the asset, you can use the following token names:\n\t['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n\tor whatever name the user has provided, you can use the token name to get the address of the token \n\n\n    Inputs ( input is a JSON string ):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    mintXAmount: number, eg 1 or 0.01 (required)\n    mintYAmount: number, eg 1 or 0.01 (required)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      let mintX = parsedInput.mintX;\n      const tokenX = getTokenByTokenName(mintX);\n      if (tokenX) {\n        mintX = tokenX.tokenAddress;\n      }\n      let mintY = parsedInput.mintY;\n      const tokenY = getTokenByTokenName(mintY);\n      if (tokenY) {\n        mintY = tokenY.tokenAddress;\n      }\n      const wrappedMintX = parseFungibleAssetAddressToWrappedAssetAddress(mintX);\n      const wrappedMintY = parseFungibleAssetAddressToWrappedAssetAddress(mintY);\n      const mintXDetail = await this.agent.getTokenDetails(wrappedMintX);\n      const mintYDetail = await this.agent.getTokenDetails(wrappedMintY);\n      const swapTransactionHash = await this.agent.addLiquidity(\n        wrappedMintX,\n        wrappedMintY,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.mintXAmount, mintXDetail.decimals),\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.mintYAmount, mintYDetail.decimals)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        swapTransactionHash,\n        token: [\n          {\n            mintX: mintXDetail.name,\n            decimals: mintXDetail.decimals\n          },\n          {\n            mintY: mintYDetail.name,\n            decimals: mintYDetail.decimals\n          }\n        ]\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/liquidswap/remove-liquidity.ts\n\n\nvar LiquidSwapRemoveLiquidityTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"liquidswap_remove_liquidity\";\n  description = `this tool can be used to remove liquidity from liquidswap\n\nif you want to remove APT and one of the token, mint will be \"0x1::aptos_coin::AptosCoin\"\n\nif user added mintX or mintY as asset name, and you don't have the address of the asset, use these token names:\nusdt,zusdt,zusdc,apt,sthapt,mod,thl,wusdc,zweth,wweth,cake,stapt,abtc,stone,truapt,sbtc\nor whatever name the user has provided, you can use the token name to get the address of the token \n\nminMintX and minMintY are minimum amount of tokens to receive, default is 0\n\ndeposit liquidity in one of the pools to get LP tokens if you don't have LP tokens\n\nInputs (input is a JSON string):\nmintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\nmintY: string, eg same as mintX (required)\nlpAmount: number, eg 1 or 0.01 (required)\nminMintX: number, eg 1 or 0.01 (optional)\nminMintY: number, eg 1 or 0.01 (optional)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      let mintX = parsedInput.mintX;\n      const tokenX = getTokenByTokenName(mintX);\n      if (tokenX) {\n        mintX = tokenX.tokenAddress;\n      }\n      let mintY = parsedInput.mintY;\n      const tokenY = getTokenByTokenName(mintY);\n      if (tokenY) {\n        mintY = tokenY.tokenAddress;\n      }\n      const mintXDetail = await this.agent.getTokenDetails(mintX);\n      const mintYDetail = await this.agent.getTokenDetails(mintY);\n      const removeLiquidityTransactionHash = await this.agent.removeLiquidity(\n        parseFungibleAssetAddressToWrappedAssetAddress(mintX),\n        parseFungibleAssetAddressToWrappedAssetAddress(mintY),\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.lpAmount, 6),\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.minMintX || 0, mintXDetail.decimals),\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.minMintY || 0, mintYDetail.decimals)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        removeLiquidityTransactionHash,\n        token: [\n          {\n            mintX: mintXDetail.name,\n            decimals: mintXDetail.decimals\n          },\n          {\n            mintY: mintYDetail.name,\n            decimals: mintYDetail.decimals\n          }\n        ]\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/echelon/lend-token.ts\n\n\nvar EchelonLendTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"echelon_lend_token\";\n  description = `this tool can be used to lend APT, tokens or fungible asset to a position\n\n    if you want to lend APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n    if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n    ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n    or whatever name the user has provided, you can use the token name to get the address of the token\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    amount: number, eg 1 or 0.01 (required)\n    mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint);\n      if (!token) throw new Error(\"Token not found\");\n      const mintDetail = await this.agent.getTokenDetails(token.tokenAddress);\n      console.log(\"mintDetail\", mintDetail);\n      const lendTokenTransactionHash = await this.agent.lendTokenWithEchelon(\n        token.tokenAddress,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        token.poolAddress,\n        token.tokenAddress.split(\"::\").length !== 3\n      );\n      return JSON.stringify({\n        status: \"success\",\n        lendTokenTransactionHash,\n        token: {\n          name: mintDetail.name || \"APT\",\n          decimals: mintDetail.decimals || 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/echelon/withdraw-token.ts\n\n\nvar EchelonWithdrawTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"echelon_withdraw_token\";\n  description = `this tool can be used to withdraw APT, tokens or fungible asset from a position\n\n    if you want to withdraw APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n    if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n    ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n    or whatever name the user has provided, you can use the token name to get the address of the token\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    amount: number, eg 1 or 0.01 (required)\n    mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint);\n      if (!token) throw new Error(\"Token not found\");\n      const mintDetail = await this.agent.getTokenDetails(token.tokenAddress);\n      console.log(\"mintDetail\", mintDetail);\n      const withdrawTokenTransactionHash = await this.agent.withdrawTokenWithEchelon(\n        token.tokenAddress,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        token.poolAddress,\n        token.tokenAddress.split(\"::\").length !== 3\n      );\n      return JSON.stringify({\n        status: \"success\",\n        withdrawTokenTransactionHash,\n        token: {\n          name: mintDetail.name || \"APT\",\n          decimals: mintDetail.decimals || 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/echelon/repay-token.ts\n\n\nvar EchelonRepayTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"echelon_repay_token\";\n  description = `this tool can be used to repay APT, tokens or fungible asset from a position\n\n    if you want to repay APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n    if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n    ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n    or whatever name the user has provided, you can use the token name to get the address of the token\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    amount: number, eg 1 or 0.01 (required)\n    mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint);\n      if (!token) throw new Error(\"Token not found\");\n      const mintDetail = await this.agent.getTokenDetails(token.tokenAddress);\n      const repayTokenTransactionHash = await this.agent.repayTokenWithEchelon(\n        token.tokenAddress,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        token.poolAddress,\n        token.tokenAddress.split(\"::\").length !== 3\n      );\n      return JSON.stringify({\n        status: \"success\",\n        repayTokenTransactionHash,\n        token: {\n          name: mintDetail.name || \"APT\",\n          decimals: mintDetail.decimals || 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/echelon/borrow-token.ts\n\n\nvar EchelonBorrowTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"echelon_borrow_token\";\n  description = `this tool can be used to borrow APT, tokens or fungible asset from a position\n\n  if you want to borrow APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n\n  if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n  ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n  or whatever name the user has provided, you can use the token name to get the address of the token \n\n\n  Inputs ( input is a JSON string ) (IMPORTANT):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n  `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint);\n      if (!token) throw new Error(\"Token not found\");\n      const mintDetail = await this.agent.getTokenDetails(token.tokenAddress);\n      const borrowTokenTransactionHash = await this.agent.borrowTokenWithEchelon(\n        token.tokenAddress,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, mintDetail.decimals || 8),\n        token.poolAddress,\n        token.tokenAddress.split(\"::\").length !== 3\n      );\n      return JSON.stringify({\n        status: \"success\",\n        borrowTokenTransactionHash,\n        token: {\n          name: mintDetail.name || \"APT\",\n          decimals: mintDetail.decimals || 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/echo/stake.ts\n\n\nvar EchoStakeTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"echo_stake_token\";\n  description = `this tool can be used to stake token in Echo\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const stakeTransactionHash = await this.agent.stakeTokenWithEcho(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        stakeTransactionHash,\n        token: {\n          name: \"eAPT\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/echo/unstake.ts\n\n\nvar EchoUnstakeTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"echo_unstake_token\";\n  description = `this tool can be used to unstake token in Echo\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const unstakeTransactionHash = await this.agent.unstakeTokenWithEcho(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        unstakeTransactionHash,\n        token: {\n          name: \"APT\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/openai/create-image.ts\n\nvar OpenAICreateImageTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"openai_create_image\";\n  description = `\n    Generate an image using OpenAI's DALL-E\n\n    Inputs ( input is a JSON string ):\n    prompt: string, Text description of the image to generate (required)\n    size: string, Image size ('256x256', '512x512', or '1024x1024') (default: '1024x1024')\n    n: number, Number of images to generate (default: 1)`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const response = await this.agent.createImageWithOpenAI(parsedInput.prompt, parsedInput.size, parsedInput.n);\n      return JSON.stringify({\n        status: \"success\",\n        response\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/panora/swap.ts\n\nvar PanoraSwapTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"panora_aggregator_swap\";\n  description = `this tool can be used to swap tokens in panora - liquidity aggregator on aptos\n\n\tif you want to swap APT and one of the token, fromToken will be \"0x1::aptos_coin::AptosCoin\"\n\n\tInputs ( input is a JSON string ):\n\tfromToken: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n\ttoToken: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n\tswapAmount: number, eg 1 or 0.01 (required)\n\ttoWalletAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n\t`;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintXDetail = await this.agent.getTokenDetails(parsedInput.fromToken);\n      const mintYDetail = await this.agent.getTokenDetails(parsedInput.toToken);\n      const swapTransactionHash = await this.agent.swapWithPanora(\n        parsedInput.fromToken,\n        parsedInput.toToken,\n        parsedInput.swapAmount,\n        parsedInput.toWalletAddress\n      );\n      return JSON.stringify({\n        status: \"success\",\n        swapTransactionHash,\n        token: [\n          {\n            mintX: mintXDetail.name,\n            decimals: mintXDetail.decimals\n          },\n          {\n            mintY: mintYDetail.name,\n            decimals: mintYDetail.decimals\n          }\n        ]\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/thala/stake.ts\n\n\nvar ThalaStakeTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"thala_stake_token\";\n  description = `this tool can be used to stake thAPT in Thala\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const stakeTransactionHash = await this.agent.stakeTokensWithThala(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        stakeTransactionHash,\n        token: {\n          name: \"thAPT\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/thala/unstake.ts\n\n\nvar ThalaUnstakeTokenTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"thala_unstake_token\";\n  description = `this tool can be used to unstake thAPT in Thala\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const unstakeTransactionHash = await this.agent.unstakeTokensWithThala(\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 8)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        unstakeTransactionHash,\n        token: {\n          name: \"APT\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/thala/mint-mod.ts\n\n\nvar ThalaMintMODTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"thala_mint_mod\";\n  description = `this tool can be used to mint move dollar (MOD) in Thala\n\n    Only supported coin types: lzUSDC, whUSDC, or USDt\n\n\tif the user coin is not in the list , default to lzUSDC\n\n\tmintType for lzUSDC - 0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC\n\tmintType for wUSDC - 0x5e156f1207d0ebfa19a9eeff00d62a282278fb8719f4fab3a586a0a2c0fffbea::coin::T\n\tmintType for USDt - 0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\n\n    Inputs ( input is a JSON string ):\n    mintType: eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintMODTransactionHash = await this.agent.mintMODWithThala(\n        parsedInput.mintType,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 6)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        mintMODTransactionHash,\n        token: {\n          name: \"MOD\",\n          decimals: 8\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/thala/redeem-mod.ts\n\n\nvar ThalaRedeemMODTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"thala_redeem_mod\";\n  description = `this tool can be used to redeem move dollar (MOD) in Thala\n\n  Only supported coin types: lzUSDC, whUSDC, or USDt\n\n\tif the user coin is not in the list , default to lzUSDC\n\n\tmintType for lzUSDC - 0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC\n\tmintType for wUSDC - 0x5e156f1207d0ebfa19a9eeff00d62a282278fb8719f4fab3a586a0a2c0fffbea::coin::T\n\tmintType for USDt - 0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\n\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const tokenDetails = await this.agent.getTokenDetails(parsedInput.mintType);\n      const redeemMODTransactionHash = await this.agent.redeemMODWithThala(\n        parsedInput.mintType,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.amount, 6)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        redeemMODTransactionHash,\n        token: {\n          name: tokenDetails.name,\n          decimals: tokenDetails.decimals\n        }\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/thala/add-liquidity.ts\n\n\nvar ThalaAddLiquidityTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"thala_add_liquidity\";\n  description = `this tool can be used to add liquidity to a Thala pool\n\n    If you want to add APT, use \"0x1::aptos_coin::AptosCoin\" as the coin type\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    mintXAmount: number, eg 1 or 0.01 (required)\n    mintYAmount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintXDetail = await this.agent.getTokenDetails(parsedInput.mintX);\n      const mintYDetail = await this.agent.getTokenDetails(parsedInput.mintY);\n      const addLiquidityTransactionHash = await this.agent.addLiquidityWithThala(\n        parsedInput.mintX,\n        parsedInput.mintY,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.mintXAmount, mintXDetail.decimals),\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.mintYAmount, mintYDetail.decimals)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        addLiquidityTransactionHash,\n        tokens: [\n          {\n            mintX: mintXDetail.name,\n            decimals: mintXDetail.decimals\n          },\n          {\n            mintY: mintYDetail.name,\n            decimals: mintYDetail.decimals\n          }\n        ]\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/thala/remove-liquidity.ts\n\n\nvar ThalaRemoveLiquidityTool = class extends langchain_tools__WEBPACK_IMPORTED_MODULE_4__.Tool {\n  constructor(agent) {\n    super();\n    this.agent = agent;\n  }\n  name = \"thala_remove_liquidity\";\n  description = `this tool can be used to remove liquidity from a Thala pool\n\n    If one of your coins is APT, use \"0x1::aptos_coin::AptosCoin\" as the coin type\n\n    Inputs ( input is a JSON string ):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    lpAmount: number, eg 1 or 0.01 (required)\n    `;\n  async _call(input) {\n    try {\n      const parsedInput = parseJson(input);\n      const mintXDetail = await this.agent.getTokenDetails(parsedInput.mintX);\n      const mintYDetail = await this.agent.getTokenDetails(parsedInput.mintY);\n      const removeLiquidityTransactionHash = await this.agent.removeLiquidityWithThala(\n        parsedInput.mintX,\n        parsedInput.mintY,\n        (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.convertAmountFromHumanReadableToOnChain)(parsedInput.lpAmount, 6)\n      );\n      return JSON.stringify({\n        status: \"success\",\n        removeLiquidityTransactionHash,\n        tokens: [\n          {\n            mintX: mintXDetail.name,\n            decimals: 6\n          },\n          {\n            mintY: mintYDetail.name,\n            decimals: 6\n          }\n        ]\n      });\n    } catch (error) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\"\n      });\n    }\n  }\n};\n\n// src/langchain/index.ts\nvar createAptosTools = (agent, config = {}) => {\n  const tools = [\n    // Aptos tools\n    new AptosBalanceTool(agent),\n    new AptosAccountAddressTool(agent),\n    new AptosTransferTokenTool(agent),\n    // new AptosBurnNFTTool(agent),\n    new AptosBurnTokenTool(agent),\n    // new AptosTransferNFTTool(agent),\n    new AptosTransactionTool(agent),\n    new AptosGetTokenDetailTool(agent),\n    new AptosMintTokenTool(agent),\n    new AptosCreateTokenTool(agent),\n    new AptosGetTokenPriceTool(agent),\n    // Amnis tools\n    new AmnisStakeTool(agent),\n    new AmnisWithdrawStakeTool(agent),\n    // Joule tools\n    new JouleLendTokenTool(agent),\n    new JouleWithdrawTokenTool(agent),\n    new JouleBorrowTokenTool(agent),\n    new JouleRepayTokenTool(agent),\n    new JouleGetPoolDetails(agent),\n    new JouleGetUserPosition(agent),\n    new JouleGetUserAllPositions(agent),\n    // LiquidSwap tools\n    new LiquidSwapCreatePoolTool(agent),\n    new LiquidSwapAddLiquidityTool(agent),\n    new LiquidSwapRemoveLiquidityTool(agent),\n    new LiquidSwapSwapTool(agent),\n    // Aries tools\n    new AriesCreateProfileTool(agent),\n    new AriesWithdrawTool(agent),\n    new AriesBorrowTool(agent),\n    new AriesLendTool(agent),\n    new AriesRepayTool(agent),\n    // Thala tools\n    new ThalaAddLiquidityTool(agent),\n    new ThalaRemoveLiquidityTool(agent),\n    new ThalaMintMODTool(agent),\n    new ThalaRedeemMODTool(agent),\n    new ThalaUnstakeTokenTool(agent),\n    new ThalaStakeTokenTool(agent),\n    // Panora tools\n    new PanoraSwapTool(agent),\n    // OpenAI tools\n    new OpenAICreateImageTool(agent),\n    // Echo tools\n    new EchoStakeTokenTool(agent),\n    new EchoUnstakeTokenTool(agent),\n    // Echelon tools\n    new EchelonLendTokenTool(agent),\n    new EchelonWithdrawTokenTool(agent),\n    new EchelonRepayTokenTool(agent),\n    new EchelonBorrowTokenTool(agent)\n  ];\n  return config.filter ? tools.filter((tool) => config?.filter?.includes(tool.name)) : tools;\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/move-agent-kit@0.1.3_@aptos-labs+ts-sdk@1.35.0_axios@1.7.9_got@11.8.6__@aptos-labs+wallet-ada_gjjxnooyl53gptg3emkop5uql4/node_modules/move-agent-kit/dist/index.mjs\n");

/***/ })

};
;