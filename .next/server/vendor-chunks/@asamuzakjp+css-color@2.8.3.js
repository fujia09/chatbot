"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@asamuzakjp+css-color@2.8.3";
exports.ids = ["vendor-chunks/@asamuzakjp+css-color@2.8.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/index.cjs":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/index.cjs ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst convert = __webpack_require__(/*! ./js/convert.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/convert.cjs\");\nconst cssCalc = __webpack_require__(/*! ./js/css-calc.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs\");\nconst resolve = __webpack_require__(/*! ./js/resolve.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/resolve.cjs\");\nconst util = __webpack_require__(/*! ./js/util.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\");\nexports.convert = convert.convert;\nexports.cssCalc = cssCalc.cssCalc;\nexports.resolve = resolve.resolve;\nexports.isColor = util.isColor;\n//# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFzYW11emFranArY3NzLWNvbG9yQDIuOC4zL25vZGVfbW9kdWxlcy9AYXNhbXV6YWtqcC9jc3MtY29sb3IvZGlzdC9janMvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IscURBQXFELGlCQUFpQjtBQUN0RSxnQkFBZ0IsbUJBQU8sQ0FBQywySUFBa0I7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsNklBQW1CO0FBQzNDLGdCQUFnQixtQkFBTyxDQUFDLDJJQUFrQjtBQUMxQyxhQUFhLG1CQUFPLENBQUMscUlBQWU7QUFDcEMsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvZnVqaWF3YW5nL0Rlc2t0b3AvY2hhdGJvdC9ub2RlX21vZHVsZXMvLnBucG0vQGFzYW11emFranArY3NzLWNvbG9yQDIuOC4zL25vZGVfbW9kdWxlcy9AYXNhbXV6YWtqcC9jc3MtY29sb3IvZGlzdC9janMvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KTtcbmNvbnN0IGNvbnZlcnQgPSByZXF1aXJlKFwiLi9qcy9jb252ZXJ0LmNqc1wiKTtcbmNvbnN0IGNzc0NhbGMgPSByZXF1aXJlKFwiLi9qcy9jc3MtY2FsYy5janNcIik7XG5jb25zdCByZXNvbHZlID0gcmVxdWlyZShcIi4vanMvcmVzb2x2ZS5janNcIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vanMvdXRpbC5janNcIik7XG5leHBvcnRzLmNvbnZlcnQgPSBjb252ZXJ0LmNvbnZlcnQ7XG5leHBvcnRzLmNzc0NhbGMgPSBjc3NDYWxjLmNzc0NhbGM7XG5leHBvcnRzLnJlc29sdmUgPSByZXNvbHZlLnJlc29sdmU7XG5leHBvcnRzLmlzQ29sb3IgPSB1dGlsLmlzQ29sb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/color.cjs":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/color.cjs ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst common = __webpack_require__(/*! ./common.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\");\nconst util = __webpack_require__(/*! ./util.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\");\nconst constant = __webpack_require__(/*! ./constant.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\");\nconst VAL_MIX = \"mixValue\";\nconst PPTH = 1e-3;\nconst HALF = 0.5;\nconst DUO = 2;\nconst TRIA = 3;\nconst QUAT = 4;\nconst OCT = 8;\nconst DEC = 10;\nconst DOZ = 12;\nconst HEX = 16;\nconst SEXA = 60;\nconst DEG = 360;\nconst MAX_PCT = 100;\nconst MAX_RGB = 255;\nconst POW_SQR = 2;\nconst POW_CUBE = 3;\nconst POW_LINEAR = 2.4;\nconst LINEAR_COEF = 12.92;\nconst LINEAR_OFFSET = 0.055;\nconst LAB_L = 116;\nconst LAB_A = 500;\nconst LAB_B = 200;\nconst LAB_EPSILON = 216 / 24389;\nconst LAB_KAPPA = 24389 / 27;\nconst D50 = [0.3457 / 0.3585, 1, (1 - 0.3457 - 0.3585) / 0.3585];\nconst MATRIX_D50_TO_D65 = [\n  [0.955473421488075, -0.02309845494876471, 0.06325924320057072],\n  [-0.0283697093338637, 1.0099953980813041, 0.021041441191917323],\n  [0.012314014864481998, -0.020507649298898964, 1.330365926242124]\n];\nconst MATRIX_D65_TO_D50 = [\n  [1.0479297925449969, 0.022946870601609652, -0.05019226628920524],\n  [0.02962780877005599, 0.9904344267538799, -0.017073799063418826],\n  [-0.009243040646204504, 0.015055191490298152, 0.7518742814281371]\n];\nconst MATRIX_L_RGB_TO_XYZ = [\n  [506752 / 1228815, 87881 / 245763, 12673 / 70218],\n  [87098 / 409605, 175762 / 245763, 12673 / 175545],\n  [7918 / 409605, 87881 / 737289, 1001167 / 1053270]\n];\nconst MATRIX_XYZ_TO_L_RGB = [\n  [12831 / 3959, -329 / 214, -1974 / 3959],\n  [-851781 / 878810, 1648619 / 878810, 36519 / 878810],\n  [705 / 12673, -2585 / 12673, 705 / 667]\n];\nconst MATRIX_XYZ_TO_LMS = [\n  [0.819022437996703, 0.3619062600528904, -0.1288737815209879],\n  [0.0329836539323885, 0.9292868615863434, 0.0361446663506424],\n  [0.0481771893596242, 0.2642395317527308, 0.6335478284694309]\n];\nconst MATRIX_LMS_TO_XYZ = [\n  [1.2268798758459243, -0.5578149944602171, 0.2813910456659647],\n  [-0.0405757452148008, 1.112286803280317, -0.0717110580655164],\n  [-0.0763729366746601, -0.4214933324022432, 1.5869240198367816]\n];\nconst MATRIX_OKLAB_TO_LMS = [\n  [1, 0.3963377773761749, 0.2158037573099136],\n  [1, -0.1055613458156586, -0.0638541728258133],\n  [1, -0.0894841775298119, -1.2914855480194092]\n];\nconst MATRIX_LMS_TO_OKLAB = [\n  [0.210454268309314, 0.7936177747023054, -0.0040720430116193],\n  [1.9779985324311684, -2.42859224204858, 0.450593709617411],\n  [0.0259040424655478, 0.7827717124575296, -0.8086757549230774]\n];\nconst MATRIX_P3_TO_XYZ = [\n  [608311 / 1250200, 189793 / 714400, 198249 / 1000160],\n  [35783 / 156275, 247089 / 357200, 198249 / 2500400],\n  [0 / 1, 32229 / 714400, 5220557 / 5000800]\n];\nconst MATRIX_REC2020_TO_XYZ = [\n  [63426534 / 99577255, 20160776 / 139408157, 47086771 / 278816314],\n  [26158966 / 99577255, 472592308 / 697040785, 8267143 / 139408157],\n  [0 / 1, 19567812 / 697040785, 295819943 / 278816314]\n];\nconst MATRIX_A98_TO_XYZ = [\n  [573536 / 994567, 263643 / 1420810, 187206 / 994567],\n  [591459 / 1989134, 6239551 / 9945670, 374412 / 4972835],\n  [53769 / 1989134, 351524 / 4972835, 4929758 / 4972835]\n];\nconst MATRIX_PROPHOTO_TO_XYZ_D50 = [\n  [0.7977666449006423, 0.13518129740053308, 0.0313477341283922],\n  [0.2880748288194013, 0.711835234241873, 8993693872564e-17],\n  [0, 0, 0.8251046025104602]\n];\nconst REG_COLOR = new RegExp(`^(?:${constant.SYN_COLOR_TYPE})$`);\nconst REG_CS_HUE = new RegExp(`^${constant.CS_HUE_CAPT}$`);\nconst REG_CS_XYZ = /^xyz(?:-d(?:50|65))?$/;\nconst REG_CURRENT = /^currentColor$/i;\nconst REG_FN_COLOR = new RegExp(`^color\\\\(\\\\s*(${constant.SYN_FN_COLOR})\\\\s*\\\\)$`);\nconst REG_HSL = new RegExp(`^hsla?\\\\(\\\\s*(${constant.SYN_HSL}|${constant.SYN_HSL_LV3})\\\\s*\\\\)$`);\nconst REG_HWB = new RegExp(`^hwb\\\\(\\\\s*(${constant.SYN_HSL})\\\\s*\\\\)$`);\nconst REG_LAB = new RegExp(`^lab\\\\(\\\\s*(${constant.SYN_MOD})\\\\s*\\\\)$`);\nconst REG_LCH = new RegExp(`^lch\\\\(\\\\s*(${constant.SYN_LCH})\\\\s*\\\\)$`);\nconst REG_MIX = new RegExp(`^${constant.SYN_MIX}$`);\nconst REG_MIX_CAPT = new RegExp(`^${constant.SYN_MIX_CAPT}$`);\nconst REG_MIX_NEST = new RegExp(`${constant.SYN_MIX}`, \"g\");\nconst REG_OKLAB = new RegExp(`^oklab\\\\(\\\\s*(${constant.SYN_MOD})\\\\s*\\\\)$`);\nconst REG_OKLCH = new RegExp(`^oklch\\\\(\\\\s*(${constant.SYN_LCH})\\\\s*\\\\)$`);\nconst REG_SPEC = /^(?:specifi|comput)edValue$/;\nconst NAMED_COLORS = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  grey: [128, 128, 128],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  rebeccapurple: [102, 51, 153],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\nconst validateColorComponents = (arr, opt = {}) => {\n  if (!Array.isArray(arr)) {\n    throw new TypeError(`${arr} is not an array.`);\n  }\n  const {\n    alpha = false,\n    minLength = TRIA,\n    maxLength = QUAT,\n    minRange = 0,\n    maxRange = 1,\n    validateRange = true\n  } = opt;\n  if (!Number.isFinite(minLength)) {\n    throw new TypeError(`${minLength} is not a number.`);\n  }\n  if (!Number.isFinite(maxLength)) {\n    throw new TypeError(`${maxLength} is not a number.`);\n  }\n  if (!Number.isFinite(minRange)) {\n    throw new TypeError(`${minRange} is not a number.`);\n  }\n  if (!Number.isFinite(maxRange)) {\n    throw new TypeError(`${maxRange} is not a number.`);\n  }\n  const l = arr.length;\n  if (l < minLength || l > maxLength) {\n    throw new Error(`Unexpected array length ${l}.`);\n  }\n  let i = 0;\n  while (i < l) {\n    const v = arr[i];\n    if (!Number.isFinite(v)) {\n      throw new TypeError(`${v} is not a number.`);\n    } else if (i < TRIA && validateRange && (v < minRange || v > maxRange)) {\n      throw new RangeError(`${v} is not between ${minRange} and ${maxRange}.`);\n    } else if (i === TRIA && (v < 0 || v > 1)) {\n      throw new RangeError(`${v} is not between 0 and 1.`);\n    }\n    i++;\n  }\n  if (alpha && l === TRIA) {\n    arr.push(1);\n  }\n  return arr;\n};\nconst transformMatrix = (mtx, vct, skip = false) => {\n  if (!Array.isArray(mtx)) {\n    throw new TypeError(`${mtx} is not an array.`);\n  } else if (mtx.length !== TRIA) {\n    throw new Error(`Unexpected array length ${mtx.length}.`);\n  } else if (!skip) {\n    for (let i of mtx) {\n      i = validateColorComponents(i, {\n        maxLength: TRIA,\n        validateRange: false\n      });\n    }\n  }\n  const [[r1c1, r1c2, r1c3], [r2c1, r2c2, r2c3], [r3c1, r3c2, r3c3]] = mtx;\n  let v1, v2, v3;\n  if (skip) {\n    [v1, v2, v3] = vct;\n  } else {\n    [v1, v2, v3] = validateColorComponents(vct, {\n      maxLength: TRIA,\n      validateRange: false\n    });\n  }\n  const p1 = r1c1 * v1 + r1c2 * v2 + r1c3 * v3;\n  const p2 = r2c1 * v1 + r2c2 * v2 + r2c3 * v3;\n  const p3 = r3c1 * v1 + r3c2 * v2 + r3c3 * v3;\n  return [p1, p2, p3];\n};\nconst normalizeColorComponents = (colorA, colorB, skip = false) => {\n  if (!Array.isArray(colorA)) {\n    throw new TypeError(`${colorA} is not an array.`);\n  } else if (colorA.length !== QUAT) {\n    throw new Error(`Unexpected array length ${colorA.length}.`);\n  }\n  if (!Array.isArray(colorB)) {\n    throw new TypeError(`${colorB} is not an array.`);\n  } else if (colorB.length !== QUAT) {\n    throw new Error(`Unexpected array length ${colorB.length}.`);\n  }\n  let i = 0;\n  while (i < QUAT) {\n    if (colorA[i] === constant.NONE && colorB[i] === constant.NONE) {\n      colorA[i] = 0;\n      colorB[i] = 0;\n    } else if (colorA[i] === constant.NONE) {\n      colorA[i] = colorB[i];\n    } else if (colorB[i] === constant.NONE) {\n      colorB[i] = colorA[i];\n    }\n    i++;\n  }\n  if (!skip) {\n    colorA = validateColorComponents(colorA, {\n      minLength: QUAT,\n      validateRange: false\n    });\n    colorB = validateColorComponents(colorB, {\n      minLength: QUAT,\n      validateRange: false\n    });\n  }\n  return [colorA, colorB];\n};\nconst numberToHexString = (value) => {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`${value} is not a number.`);\n  } else {\n    value = Math.round(value);\n    if (value < 0 || value > MAX_RGB) {\n      throw new RangeError(`${value} is not between 0 and ${MAX_RGB}.`);\n    }\n  }\n  let hex = value.toString(HEX);\n  if (hex.length === 1) {\n    hex = `0${hex}`;\n  }\n  return hex;\n};\nconst angleToDeg = (angle) => {\n  if (common.isString(angle)) {\n    angle = angle.trim();\n  } else {\n    throw new TypeError(`${angle} is not a string.`);\n  }\n  const GRAD = DEG / 400;\n  const RAD = DEG / (Math.PI * DUO);\n  const reg = new RegExp(`^(${constant.NUM})(${constant.ANGLE})?$`);\n  if (!reg.test(angle)) {\n    throw new SyntaxError(`Invalid property value: ${angle}`);\n  }\n  const [, val, unit] = angle.match(reg);\n  const value = val[0] === \".\" ? `0${val}` : val;\n  let deg;\n  switch (unit) {\n    case \"grad\":\n      deg = parseFloat(value) * GRAD;\n      break;\n    case \"rad\":\n      deg = parseFloat(value) * RAD;\n      break;\n    case \"turn\":\n      deg = parseFloat(value) * DEG;\n      break;\n    default:\n      deg = parseFloat(value);\n  }\n  deg %= DEG;\n  if (deg < 0) {\n    deg += DEG;\n  } else if (Object.is(deg, -0)) {\n    deg = 0;\n  }\n  return deg;\n};\nconst parseAlpha = (_alpha) => {\n  let alpha = _alpha;\n  if (common.isString(alpha)) {\n    alpha = alpha.trim();\n    if (!alpha) {\n      alpha = 1;\n    } else if (alpha === constant.NONE) {\n      alpha = 0;\n    } else {\n      if (alpha[0] === \".\") {\n        alpha = `0${alpha}`;\n      }\n      if (alpha.endsWith(\"%\")) {\n        alpha = parseFloat(alpha) / MAX_PCT;\n      } else {\n        alpha = parseFloat(alpha);\n      }\n      if (!Number.isFinite(alpha)) {\n        throw new TypeError(`${alpha} is not a number.`);\n      }\n      if (alpha < PPTH) {\n        alpha = 0;\n      } else if (alpha > 1) {\n        alpha = 1;\n      } else {\n        alpha = parseFloat(alpha.toFixed(3));\n      }\n    }\n  } else {\n    alpha = 1;\n  }\n  return alpha;\n};\nconst parseHexAlpha = (value) => {\n  if (common.isString(value)) {\n    if (value === \"\") {\n      throw new SyntaxError(\"Invalid property value: (empty string)\");\n    }\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  let alpha = parseInt(value, HEX);\n  if (alpha <= 0) {\n    return 0;\n  }\n  if (alpha >= MAX_RGB) {\n    return 1;\n  }\n  const alphaMap = /* @__PURE__ */ new Map();\n  for (let i = 1; i < MAX_PCT; i++) {\n    alphaMap.set(Math.round(i * MAX_RGB / MAX_PCT), i);\n  }\n  if (alphaMap.has(alpha)) {\n    alpha = alphaMap.get(alpha) / MAX_PCT;\n  } else {\n    alpha = Math.round(alpha / MAX_RGB / PPTH) * PPTH;\n  }\n  return parseFloat(alpha.toFixed(3));\n};\nconst convertRgbToLinearRgb = (rgb, skip = false) => {\n  let rr, gg, bb;\n  if (skip) {\n    [rr, gg, bb] = rgb;\n  } else {\n    [rr, gg, bb] = validateColorComponents(rgb, {\n      maxLength: TRIA,\n      maxRange: MAX_RGB\n    });\n  }\n  let r = rr / MAX_RGB;\n  let g = gg / MAX_RGB;\n  let b = bb / MAX_RGB;\n  const COND_POW = 0.04045;\n  if (r > COND_POW) {\n    r = Math.pow((r + LINEAR_OFFSET) / (1 + LINEAR_OFFSET), POW_LINEAR);\n  } else {\n    r /= LINEAR_COEF;\n  }\n  if (g > COND_POW) {\n    g = Math.pow((g + LINEAR_OFFSET) / (1 + LINEAR_OFFSET), POW_LINEAR);\n  } else {\n    g /= LINEAR_COEF;\n  }\n  if (b > COND_POW) {\n    b = Math.pow((b + LINEAR_OFFSET) / (1 + LINEAR_OFFSET), POW_LINEAR);\n  } else {\n    b /= LINEAR_COEF;\n  }\n  return [r, g, b];\n};\nconst convertRgbToXyz = (rgb, skip = false) => {\n  let r, g, b, alpha;\n  if (skip) {\n    [r, g, b, alpha] = rgb;\n  } else {\n    [r, g, b, alpha] = validateColorComponents(rgb, {\n      alpha: true,\n      maxRange: MAX_RGB\n    });\n  }\n  const [rr, gg, bb] = convertRgbToLinearRgb([r, g, b], true);\n  const [x, y, z] = transformMatrix(MATRIX_L_RGB_TO_XYZ, [rr, gg, bb], true);\n  return [x, y, z, alpha];\n};\nconst convertRgbToHex = (rgb) => {\n  const [r, g, b, alpha] = validateColorComponents(rgb, {\n    alpha: true,\n    maxRange: MAX_RGB\n  });\n  const rr = numberToHexString(r);\n  const gg = numberToHexString(g);\n  const bb = numberToHexString(b);\n  const aa = numberToHexString(alpha * MAX_RGB);\n  let hex;\n  if (aa === \"ff\") {\n    hex = `#${rr}${gg}${bb}`;\n  } else {\n    hex = `#${rr}${gg}${bb}${aa}`;\n  }\n  return hex;\n};\nconst convertLinearRgbToRgb = (rgb, round = false) => {\n  let [r, g, b] = validateColorComponents(rgb, {\n    maxLength: TRIA\n  });\n  const COND_POW = 809 / 258400;\n  if (r > COND_POW) {\n    r = Math.pow(r, 1 / POW_LINEAR) * (1 + LINEAR_OFFSET) - LINEAR_OFFSET;\n  } else {\n    r *= LINEAR_COEF;\n  }\n  r *= MAX_RGB;\n  if (g > COND_POW) {\n    g = Math.pow(g, 1 / POW_LINEAR) * (1 + LINEAR_OFFSET) - LINEAR_OFFSET;\n  } else {\n    g *= LINEAR_COEF;\n  }\n  g *= MAX_RGB;\n  if (b > COND_POW) {\n    b = Math.pow(b, 1 / POW_LINEAR) * (1 + LINEAR_OFFSET) - LINEAR_OFFSET;\n  } else {\n    b *= LINEAR_COEF;\n  }\n  b *= MAX_RGB;\n  return [\n    round ? Math.round(r) : r,\n    round ? Math.round(g) : g,\n    round ? Math.round(b) : b\n  ];\n};\nconst convertXyzToRgb = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      validateRange: false\n    });\n  }\n  let [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n  [r, g, b] = convertLinearRgbToRgb(\n    [\n      Math.min(Math.max(r, 0), 1),\n      Math.min(Math.max(g, 0), 1),\n      Math.min(Math.max(b, 0), 1)\n    ],\n    true\n  );\n  return [r, g, b, alpha];\n};\nconst convertXyzToHsl = (xyz, skip = false) => {\n  const [rr, gg, bb, alpha] = convertXyzToRgb(xyz, skip);\n  const r = rr / MAX_RGB;\n  const g = gg / MAX_RGB;\n  const b = bb / MAX_RGB;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  const l = (max + min) * HALF * MAX_PCT;\n  let h, s;\n  if (Math.round(l) === 0 || Math.round(l) === MAX_PCT) {\n    h = constant.NONE;\n    s = constant.NONE;\n  } else {\n    s = d / (1 - Math.abs(max + min - 1)) * MAX_PCT;\n    if (s === 0) {\n      h = constant.NONE;\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d;\n          break;\n        case g:\n          h = (b - r) / d + DUO;\n          break;\n        case b:\n        default:\n          h = (r - g) / d + QUAT;\n          break;\n      }\n      h = h * SEXA % DEG;\n      if (h < 0) {\n        h += DEG;\n      }\n    }\n  }\n  return [h, s, l, alpha];\n};\nconst convertXyzToHwb = (xyz, skip = false) => {\n  const [r, g, b, alpha] = convertXyzToRgb(xyz, skip);\n  const w = Math.min(r, g, b) / MAX_RGB;\n  const bk = 1 - Math.max(r, g, b) / MAX_RGB;\n  let h;\n  if (w + bk === 1) {\n    h = constant.NONE;\n  } else {\n    [h] = convertXyzToHsl(xyz);\n  }\n  return [h, w * MAX_PCT, bk * MAX_PCT, alpha];\n};\nconst convertXyzToOklab = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      validateRange: false\n    });\n  }\n  const lms = transformMatrix(MATRIX_XYZ_TO_LMS, [x, y, z], true);\n  const xyzLms = lms.map((c) => Math.cbrt(c));\n  let [l, a, b] = transformMatrix(MATRIX_LMS_TO_OKLAB, xyzLms, true);\n  l = Math.min(Math.max(l, 0), 1);\n  const lPct = Math.round(parseFloat(l.toFixed(QUAT)) * MAX_PCT);\n  if (lPct === 0 || lPct === MAX_PCT) {\n    a = constant.NONE;\n    b = constant.NONE;\n  }\n  return [l, a, b, alpha];\n};\nconst convertXyzToOklch = (xyz, skip = false) => {\n  const [l, a, b, aa] = convertXyzToOklab(xyz, skip);\n  let c, h;\n  const lPct = Math.round(parseFloat(l.toFixed(QUAT)) * MAX_PCT);\n  if (lPct === 0 || lPct === MAX_PCT) {\n    c = constant.NONE;\n    h = constant.NONE;\n  } else {\n    c = Math.max(Math.sqrt(Math.pow(a, POW_SQR) + Math.pow(b, POW_SQR)), 0);\n    if (parseFloat(c.toFixed(QUAT)) === 0) {\n      h = constant.NONE;\n    } else {\n      h = Math.atan2(b, a) * DEG * HALF / Math.PI;\n      if (h < 0) {\n        h += DEG;\n      }\n    }\n  }\n  return [l, c, h, aa];\n};\nconst convertXyzD50ToRgb = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      minLength: QUAT,\n      validateRange: false\n    });\n  }\n  const xyzD65 = transformMatrix(MATRIX_D50_TO_D65, [x, y, z], true);\n  const [r, g, b] = convertXyzToRgb(xyzD65, true);\n  return [r, g, b, alpha];\n};\nconst convertXyzD50ToLab = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      validateRange: false\n    });\n  }\n  const xyzD50 = [x, y, z].map((val, i) => val / D50[i]);\n  const [f0, f1, f2] = xyzD50.map(\n    (val) => val > LAB_EPSILON ? Math.cbrt(val) : (val * LAB_KAPPA + HEX) / LAB_L\n  );\n  const l = Math.min(Math.max(LAB_L * f1 - HEX, 0), MAX_PCT);\n  let a, b;\n  if (l === 0 || l === MAX_PCT) {\n    a = constant.NONE;\n    b = constant.NONE;\n  } else {\n    a = (f0 - f1) * LAB_A;\n    b = (f1 - f2) * LAB_B;\n  }\n  return [l, a, b, alpha];\n};\nconst convertXyzD50ToLch = (xyz, skip = false) => {\n  const [l, a, b, alpha] = convertXyzD50ToLab(xyz, skip);\n  let c, h;\n  if (l === 0 || l === MAX_PCT) {\n    c = constant.NONE;\n    h = constant.NONE;\n  } else {\n    c = Math.max(Math.sqrt(Math.pow(a, POW_SQR) + Math.pow(b, POW_SQR)), 0);\n    h = Math.atan2(b, a) * DEG * HALF / Math.PI;\n    if (h < 0) {\n      h += DEG;\n    }\n  }\n  return [l, c, h, alpha];\n};\nconst convertHexToRgb = (value) => {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  if (!(/^#[\\da-f]{6}$/.test(value) || /^#[\\da-f]{3}$/.test(value) || /^#[\\da-f]{8}$/.test(value) || /^#[\\da-f]{4}$/.test(value))) {\n    throw new SyntaxError(`Invalid property value: ${value}`);\n  }\n  const arr = [];\n  if (/^#[\\da-f]{6}$/.test(value)) {\n    const [, r, g, b] = value.match(\n      /^#([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/\n    );\n    arr.push(parseInt(r, HEX), parseInt(g, HEX), parseInt(b, HEX), 1);\n  } else if (/^#[\\da-f]{3}$/.test(value)) {\n    const [, r, g, b] = value.match(/^#([\\da-f])([\\da-f])([\\da-f])$/);\n    arr.push(\n      parseInt(`${r}${r}`, HEX),\n      parseInt(`${g}${g}`, HEX),\n      parseInt(`${b}${b}`, HEX),\n      1\n    );\n  } else if (/^#[\\da-f]{8}$/.test(value)) {\n    const [, r, g, b, alpha] = value.match(\n      /^#([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/\n    );\n    arr.push(\n      parseInt(r, HEX),\n      parseInt(g, HEX),\n      parseInt(b, HEX),\n      parseHexAlpha(alpha)\n    );\n  } else if (/^#[\\da-f]{4}$/.test(value)) {\n    const [, r, g, b, alpha] = value.match(\n      /^#([\\da-f])([\\da-f])([\\da-f])([\\da-f])$/\n    );\n    arr.push(\n      parseInt(`${r}${r}`, HEX),\n      parseInt(`${g}${g}`, HEX),\n      parseInt(`${b}${b}`, HEX),\n      parseHexAlpha(`${alpha}${alpha}`)\n    );\n  }\n  return arr;\n};\nconst convertHexToLinearRgb = (value) => {\n  const [rr, gg, bb, alpha] = convertHexToRgb(value);\n  const [r, g, b] = convertRgbToLinearRgb([rr, gg, bb], true);\n  return [r, g, b, alpha];\n};\nconst convertHexToXyz = (value) => {\n  const [r, g, b, alpha] = convertHexToLinearRgb(value);\n  const [x, y, z] = transformMatrix(MATRIX_L_RGB_TO_XYZ, [r, g, b], true);\n  return [x, y, z, alpha];\n};\nconst parseRgb = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  const reg = new RegExp(`^rgba?\\\\(\\\\s*(${constant.SYN_MOD}|${constant.SYN_RGB_LV3})\\\\s*\\\\)$`);\n  if (!reg.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(reg);\n  let [v1, v2, v3, v4] = val.replace(/[,/]/g, \" \").split(/\\s+/);\n  let r, g, b;\n  if (v1 === constant.NONE) {\n    r = 0;\n  } else {\n    if (v1[0] === \".\") {\n      v1 = `0${v1}`;\n    }\n    if (v1.endsWith(\"%\")) {\n      r = parseFloat(v1) * MAX_RGB / MAX_PCT;\n    } else {\n      r = parseFloat(v1);\n    }\n    r = Math.min(Math.max(util.roundToPrecision(r, OCT), 0), MAX_RGB);\n  }\n  if (v2 === constant.NONE) {\n    g = 0;\n  } else {\n    if (v2[0] === \".\") {\n      v2 = `0${v2}`;\n    }\n    if (v2.endsWith(\"%\")) {\n      g = parseFloat(v2) * MAX_RGB / MAX_PCT;\n    } else {\n      g = parseFloat(v2);\n    }\n    g = Math.min(Math.max(util.roundToPrecision(g, OCT), 0), MAX_RGB);\n  }\n  if (v3 === constant.NONE) {\n    b = 0;\n  } else {\n    if (v3[0] === \".\") {\n      v3 = `0${v3}`;\n    }\n    if (v3.endsWith(\"%\")) {\n      b = parseFloat(v3) * MAX_RGB / MAX_PCT;\n    } else {\n      b = parseFloat(v3);\n    }\n    b = Math.min(Math.max(util.roundToPrecision(b, OCT), 0), MAX_RGB);\n  }\n  const alpha = parseAlpha(v4);\n  return [\"rgb\", r, g, b, format === VAL_MIX && v4 === constant.NONE ? constant.NONE : alpha];\n};\nconst parseHsl = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_HSL.test(value)) {\n    switch (format) {\n      case \"hsl\":\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(REG_HSL);\n  let [h, s, l, alpha] = val.replace(/[,/]/g, \" \").split(/\\s+/);\n  if (h === constant.NONE) {\n    if (format !== \"hsl\") {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (s === constant.NONE) {\n    if (format !== \"hsl\") {\n      s = 0;\n    }\n  } else {\n    if (s[0] === \".\") {\n      s = `0${s}`;\n    }\n    s = Math.min(Math.max(parseFloat(s), 0), MAX_PCT);\n  }\n  if (l === constant.NONE) {\n    if (format !== \"hsl\") {\n      l = 0;\n    }\n  } else {\n    if (l[0] === \".\") {\n      l = `0${l}`;\n    }\n    l = Math.min(Math.max(parseFloat(l), 0), MAX_PCT);\n  }\n  if (alpha !== constant.NONE || format !== \"hsl\") {\n    alpha = parseAlpha(alpha);\n  }\n  if (format === \"hsl\") {\n    return [format, h, s, l, alpha];\n  }\n  const ll = l / MAX_PCT;\n  const sa = s / MAX_PCT * Math.min(ll, 1 - ll);\n  const rk = h / DEG * DOZ % DOZ;\n  const gk = (8 + h / DEG * DOZ) % DOZ;\n  const bk = (4 + h / DEG * DOZ) % DOZ;\n  const r = ll - sa * Math.max(-1, Math.min(rk - TRIA, TRIA ** POW_SQR - rk, 1));\n  const g = ll - sa * Math.max(-1, Math.min(gk - TRIA, TRIA ** POW_SQR - gk, 1));\n  const b = ll - sa * Math.max(-1, Math.min(bk - TRIA, TRIA ** POW_SQR - bk, 1));\n  return [\n    \"rgb\",\n    Math.min(Math.max(util.roundToPrecision(r * MAX_RGB, OCT), 0), MAX_RGB),\n    Math.min(Math.max(util.roundToPrecision(g * MAX_RGB, OCT), 0), MAX_RGB),\n    Math.min(Math.max(util.roundToPrecision(b * MAX_RGB, OCT), 0), MAX_RGB),\n    alpha\n  ];\n};\nconst parseHwb = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_HWB.test(value)) {\n    switch (format) {\n      case \"hwb\":\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(REG_HWB);\n  let [h, w, b, alpha] = val.replace(\"/\", \" \").split(/\\s+/);\n  if (h === constant.NONE) {\n    if (format !== \"hwb\") {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (w === constant.NONE) {\n    if (format !== \"hwb\") {\n      w = 0;\n    }\n  } else {\n    if (w[0] === \".\") {\n      w = `0${w}`;\n    }\n    w = Math.min(Math.max(parseFloat(w), 0), MAX_PCT) / MAX_PCT;\n  }\n  if (b === constant.NONE) {\n    if (format !== \"hwb\") {\n      b = 0;\n    }\n  } else {\n    if (b[0] === \".\") {\n      b = `0${b}`;\n    }\n    b = Math.min(Math.max(parseFloat(b), 0), MAX_PCT) / MAX_PCT;\n  }\n  if (alpha !== constant.NONE || format !== \"hwb\") {\n    alpha = parseAlpha(alpha);\n  }\n  if (format === \"hwb\") {\n    return [\n      format,\n      h,\n      w === constant.NONE ? w : w * MAX_PCT,\n      b === constant.NONE ? b : b * MAX_PCT,\n      alpha\n    ];\n  }\n  if (w + b >= 1) {\n    const v = util.roundToPrecision(\n      w / (w + b) * MAX_RGB,\n      OCT\n    );\n    return [\"rgb\", v, v, v, alpha];\n  }\n  const factor = (1 - w - b) / MAX_RGB;\n  let [, rr, gg, bb] = parseHsl(`hsl(${h} 100 50)`);\n  rr = util.roundToPrecision(\n    (rr * factor + w) * MAX_RGB,\n    OCT\n  );\n  gg = util.roundToPrecision(\n    (gg * factor + w) * MAX_RGB,\n    OCT\n  );\n  bb = util.roundToPrecision(\n    (bb * factor + w) * MAX_RGB,\n    OCT\n  );\n  return [\n    \"rgb\",\n    Math.min(Math.max(rr, 0), MAX_RGB),\n    Math.min(Math.max(gg, 0), MAX_RGB),\n    Math.min(Math.max(bb, 0), MAX_RGB),\n    alpha\n  ];\n};\nconst parseLab = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_LAB.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 1.25;\n  const COND_POW = 8;\n  const [, val] = value.match(REG_LAB);\n  let [l, a, b, alpha] = val.replace(\"/\", \" \").split(/\\s+/);\n  if (l === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === \".\") {\n      l = `0${l}`;\n    }\n    if (l.endsWith(\"%\")) {\n      l = parseFloat(l);\n      if (l > MAX_PCT) {\n        l = MAX_PCT;\n      }\n    } else {\n      l = parseFloat(l);\n    }\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (a === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      a = 0;\n    }\n  } else {\n    if (a[0] === \".\") {\n      a = `0${a}`;\n    }\n    if (a.endsWith(\"%\")) {\n      a = parseFloat(a) * COEF_PCT;\n    } else {\n      a = parseFloat(a);\n    }\n  }\n  if (b === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      b = 0;\n    }\n  } else {\n    if (b.endsWith(\"%\")) {\n      b = parseFloat(b) * COEF_PCT;\n    } else {\n      b = parseFloat(b);\n    }\n  }\n  if (alpha !== constant.NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      \"lab\",\n      l === constant.NONE ? l : util.roundToPrecision(l, HEX),\n      a === constant.NONE ? a : util.roundToPrecision(a, HEX),\n      b === constant.NONE ? b : util.roundToPrecision(b, HEX),\n      alpha\n    ];\n  }\n  const fl = (l + HEX) / LAB_L;\n  const fa = a / LAB_A + fl;\n  const fb = fl - b / LAB_B;\n  const powFl = Math.pow(fl, POW_CUBE);\n  const powFa = Math.pow(fa, POW_CUBE);\n  const powFb = Math.pow(fb, POW_CUBE);\n  const xyz = [\n    powFa > LAB_EPSILON ? powFa : (fa * LAB_L - HEX) / LAB_KAPPA,\n    l > COND_POW ? powFl : l / LAB_KAPPA,\n    powFb > LAB_EPSILON ? powFb : (fb * LAB_L - HEX) / LAB_KAPPA\n  ];\n  const [x, y, z] = xyz.map((val2, i) => val2 * D50[i]);\n  return [\n    \"xyz-d50\",\n    util.roundToPrecision(x, HEX),\n    util.roundToPrecision(y, HEX),\n    util.roundToPrecision(z, HEX),\n    alpha\n  ];\n};\nconst parseLch = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_LCH.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 1.5;\n  const [, val] = value.match(REG_LCH);\n  let [l, c, h, alpha] = val.replace(\"/\", \" \").split(/\\s+/);\n  if (l === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === \".\") {\n      l = `0${l}`;\n    }\n    l = parseFloat(l);\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (c === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      c = 0;\n    }\n  } else {\n    if (c[0] === \".\") {\n      c = `0${c}`;\n    }\n    if (c.endsWith(\"%\")) {\n      c = parseFloat(c) * COEF_PCT;\n    } else {\n      c = parseFloat(c);\n    }\n  }\n  if (h === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (alpha !== constant.NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      \"lch\",\n      l === constant.NONE ? l : util.roundToPrecision(l, HEX),\n      c === constant.NONE ? c : util.roundToPrecision(c, HEX),\n      h === constant.NONE ? h : util.roundToPrecision(h, HEX),\n      alpha\n    ];\n  }\n  const a = c * Math.cos(h * Math.PI / (DEG * HALF));\n  const b = c * Math.sin(h * Math.PI / (DEG * HALF));\n  const [, x, y, z] = parseLab(`lab(${l} ${a} ${b})`);\n  return [\n    \"xyz-d50\",\n    util.roundToPrecision(x, HEX),\n    util.roundToPrecision(y, HEX),\n    util.roundToPrecision(z, HEX),\n    alpha\n  ];\n};\nconst parseOklab = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_OKLAB.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 0.4;\n  const [, val] = value.match(REG_OKLAB);\n  let [l, a, b, alpha] = val.replace(\"/\", \" \").split(/\\s+/);\n  if (l === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === \".\") {\n      l = `0${l}`;\n    }\n    if (l.endsWith(\"%\")) {\n      l = parseFloat(l) / MAX_PCT;\n    } else {\n      l = parseFloat(l);\n    }\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (a === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      a = 0;\n    }\n  } else {\n    if (a[0] === \".\") {\n      a = `0${a}`;\n    }\n    if (a.endsWith(\"%\")) {\n      a = parseFloat(a) * COEF_PCT / MAX_PCT;\n    } else {\n      a = parseFloat(a);\n    }\n  }\n  if (b === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      b = 0;\n    }\n  } else {\n    if (b.endsWith(\"%\")) {\n      b = parseFloat(b) * COEF_PCT / MAX_PCT;\n    } else {\n      b = parseFloat(b);\n    }\n  }\n  if (alpha !== constant.NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      \"oklab\",\n      l === constant.NONE ? l : util.roundToPrecision(l, HEX),\n      a === constant.NONE ? a : util.roundToPrecision(a, HEX),\n      b === constant.NONE ? b : util.roundToPrecision(b, HEX),\n      alpha\n    ];\n  }\n  const lms = transformMatrix(MATRIX_OKLAB_TO_LMS, [\n    l,\n    a,\n    b\n  ]);\n  const xyzLms = lms.map((c) => Math.pow(c, POW_CUBE));\n  const [x, y, z] = transformMatrix(MATRIX_LMS_TO_XYZ, xyzLms, true);\n  return [\n    \"xyz-d65\",\n    util.roundToPrecision(x, HEX),\n    util.roundToPrecision(y, HEX),\n    util.roundToPrecision(z, HEX),\n    alpha\n  ];\n};\nconst parseOklch = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_OKLCH.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 0.4;\n  const [, val] = value.match(REG_OKLCH);\n  let [l, c, h, alpha] = val.replace(\"/\", \" \").split(/\\s+/);\n  if (l === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === \".\") {\n      l = `0${l}`;\n    }\n    if (l.endsWith(\"%\")) {\n      l = parseFloat(l) / MAX_PCT;\n    } else {\n      l = parseFloat(l);\n    }\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (c === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      c = 0;\n    }\n  } else {\n    if (c[0] === \".\") {\n      c = `0${c}`;\n    }\n    if (c.endsWith(\"%\")) {\n      c = parseFloat(c) * COEF_PCT / MAX_PCT;\n    } else {\n      c = parseFloat(c);\n    }\n    if (c < 0) {\n      c = 0;\n    }\n  }\n  if (h === constant.NONE) {\n    if (!REG_SPEC.test(format)) {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (alpha !== constant.NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      \"oklch\",\n      l === constant.NONE ? l : util.roundToPrecision(l, HEX),\n      c === constant.NONE ? c : util.roundToPrecision(c, HEX),\n      h === constant.NONE ? h : util.roundToPrecision(h, HEX),\n      alpha\n    ];\n  }\n  const a = c * Math.cos(h * Math.PI / (DEG * HALF));\n  const b = c * Math.sin(h * Math.PI / (DEG * HALF));\n  const lms = transformMatrix(MATRIX_OKLAB_TO_LMS, [l, a, b]);\n  const xyzLms = lms.map((cl) => Math.pow(cl, POW_CUBE));\n  const [x, y, z] = transformMatrix(MATRIX_LMS_TO_XYZ, xyzLms, true);\n  return [\n    \"xyz-d65\",\n    util.roundToPrecision(x, HEX),\n    util.roundToPrecision(y, HEX),\n    util.roundToPrecision(z, HEX),\n    alpha\n  ];\n};\nconst parseColorFunc = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, d50, format } = opt;\n  if (!REG_FN_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(REG_FN_COLOR);\n  let [cs, v1, v2, v3, v4] = val.replace(\"/\", \" \").split(/\\s+/);\n  let r, g, b;\n  if (cs === \"xyz\") {\n    cs = \"xyz-d65\";\n  }\n  if (v1 === constant.NONE) {\n    r = 0;\n  } else {\n    if (v1[0] === \".\") {\n      v1 = `0${v1}`;\n    }\n    r = v1.endsWith(\"%\") ? parseFloat(v1) / MAX_PCT : parseFloat(v1);\n  }\n  if (v2 === constant.NONE) {\n    g = 0;\n  } else {\n    if (v2[0] === \".\") {\n      v2 = `0${v2}`;\n    }\n    g = v2.endsWith(\"%\") ? parseFloat(v2) / MAX_PCT : parseFloat(v2);\n  }\n  if (v3 === constant.NONE) {\n    b = 0;\n  } else {\n    if (v3[0] === \".\") {\n      v3 = `0${v3}`;\n    }\n    b = v3.endsWith(\"%\") ? parseFloat(v3) / MAX_PCT : parseFloat(v3);\n  }\n  const alpha = parseAlpha(v4);\n  if (REG_SPEC.test(format) || format === VAL_MIX && cs === colorSpace) {\n    return [\n      cs,\n      v1 === constant.NONE ? constant.NONE : util.roundToPrecision(r, DEC),\n      v2 === constant.NONE ? constant.NONE : util.roundToPrecision(g, DEC),\n      v3 === constant.NONE ? constant.NONE : util.roundToPrecision(b, DEC),\n      v4 === constant.NONE ? constant.NONE : alpha\n    ];\n  }\n  let x, y, z;\n  if (cs === \"srgb\") {\n    [x, y, z] = convertRgbToXyz([r * MAX_RGB, g * MAX_RGB, b * MAX_RGB]);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (cs === \"srgb-linear\") {\n    [x, y, z] = transformMatrix(MATRIX_L_RGB_TO_XYZ, [r, g, b]);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (cs === \"display-p3\") {\n    const linearRgb = convertRgbToLinearRgb([\n      r * MAX_RGB,\n      g * MAX_RGB,\n      b * MAX_RGB\n    ]);\n    [x, y, z] = transformMatrix(MATRIX_P3_TO_XYZ, linearRgb);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (cs === \"rec2020\") {\n    const ALPHA = 1.09929682680944;\n    const BETA = 0.018053968510807;\n    const REC_COEF = 0.45;\n    const rgb = [r, g, b].map((c) => {\n      let cl;\n      if (c < BETA * REC_COEF * DEC) {\n        cl = c / (REC_COEF * DEC);\n      } else {\n        cl = Math.pow((c + ALPHA - 1) / ALPHA, 1 / REC_COEF);\n      }\n      return cl;\n    });\n    [x, y, z] = transformMatrix(MATRIX_REC2020_TO_XYZ, rgb);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (cs === \"a98-rgb\") {\n    const POW_A98 = 563 / 256;\n    const rgb = [r, g, b].map((c) => {\n      const cl = Math.pow(c, POW_A98);\n      return cl;\n    });\n    [x, y, z] = transformMatrix(MATRIX_A98_TO_XYZ, rgb);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (cs === \"prophoto-rgb\") {\n    const POW_PROPHOTO = 1.8;\n    const rgb = [r, g, b].map((c) => {\n      let cl;\n      if (c > 1 / (HEX * DUO)) {\n        cl = Math.pow(c, POW_PROPHOTO);\n      } else {\n        cl = c / HEX;\n      }\n      return cl;\n    });\n    [x, y, z] = transformMatrix(MATRIX_PROPHOTO_TO_XYZ_D50, rgb);\n    if (!d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D50_TO_D65,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (/^xyz(?:-d(?:50|65))?$/.test(cs)) {\n    [x, y, z] = [r, g, b];\n    if (cs === \"xyz-d50\") {\n      if (!d50) {\n        [x, y, z] = transformMatrix(MATRIX_D50_TO_D65, [x, y, z]);\n      }\n    } else if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  }\n  return [\n    d50 ? \"xyz-d50\" : \"xyz-d65\",\n    util.roundToPrecision(x, HEX),\n    util.roundToPrecision(y, HEX),\n    util.roundToPrecision(z, HEX),\n    format === VAL_MIX && v4 === constant.NONE ? constant.NONE : alpha\n  ];\n};\nconst parseColorValue = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { d50, format } = opt;\n  if (!REG_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  let x, y, z, alpha;\n  if (REG_CURRENT.test(value)) {\n    if (format === constant.VAL_COMP) {\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    if (format === constant.VAL_SPEC) {\n      return value;\n    }\n    x = 0;\n    y = 0;\n    z = 0;\n    alpha = 0;\n  } else if (/^[a-z]+$/.test(value)) {\n    if (Object.prototype.hasOwnProperty.call(NAMED_COLORS, value)) {\n      if (format === constant.VAL_SPEC) {\n        return value;\n      }\n      const [r, g, b] = NAMED_COLORS[value];\n      alpha = 1;\n      if (format === constant.VAL_COMP) {\n        return [\"rgb\", r, g, b, alpha];\n      }\n      [x, y, z] = convertRgbToXyz([r, g, b], true);\n      if (d50) {\n        [x, y, z] = transformMatrix(\n          MATRIX_D65_TO_D50,\n          [x, y, z],\n          true\n        );\n      }\n    } else {\n      if (format === constant.VAL_COMP) {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n      if (format === constant.VAL_SPEC) {\n        if (value === \"transparent\") {\n          return value;\n        }\n        return \"\";\n      }\n      if (format === VAL_MIX) {\n        if (value === \"transparent\") {\n          return [\"rgb\", 0, 0, 0, 0];\n        }\n        return null;\n      }\n      x = 0;\n      y = 0;\n      z = 0;\n      alpha = 0;\n    }\n  } else if (value[0] === \"#\") {\n    if (REG_SPEC.test(format)) {\n      const rgb = convertHexToRgb(value);\n      return [\"rgb\", ...rgb];\n    }\n    [x, y, z, alpha] = convertHexToXyz(value);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (value.startsWith(\"lab\")) {\n    if (REG_SPEC.test(format)) {\n      return parseLab(value, opt);\n    }\n    [, x, y, z, alpha] = parseLab(value);\n    if (!d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D50_TO_D65,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (value.startsWith(\"lch\")) {\n    if (REG_SPEC.test(format)) {\n      return parseLch(value, opt);\n    }\n    [, x, y, z, alpha] = parseLch(value);\n    if (!d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D50_TO_D65,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (value.startsWith(\"oklab\")) {\n    if (REG_SPEC.test(format)) {\n      return parseOklab(value, opt);\n    }\n    [, x, y, z, alpha] = parseOklab(value);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else if (value.startsWith(\"oklch\")) {\n    if (REG_SPEC.test(format)) {\n      return parseOklch(value, opt);\n    }\n    [, x, y, z, alpha] = parseOklch(value);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  } else {\n    let r, g, b;\n    if (value.startsWith(\"hsl\")) {\n      [, r, g, b, alpha] = parseHsl(value);\n    } else if (value.startsWith(\"hwb\")) {\n      [, r, g, b, alpha] = parseHwb(value);\n    } else {\n      [, r, g, b, alpha] = parseRgb(value, opt);\n    }\n    if (REG_SPEC.test(format)) {\n      return [\n        \"rgb\",\n        Math.round(r),\n        Math.round(g),\n        Math.round(b),\n        alpha\n      ];\n    }\n    [x, y, z] = convertRgbToXyz([r, g, b]);\n    if (d50) {\n      [x, y, z] = transformMatrix(\n        MATRIX_D65_TO_D50,\n        [x, y, z],\n        true\n      );\n    }\n  }\n  return [\n    d50 ? \"xyz-d50\" : \"xyz-d65\",\n    util.roundToPrecision(x, HEX),\n    util.roundToPrecision(y, HEX),\n    util.roundToPrecision(z, HEX),\n    alpha\n  ];\n};\nconst resolveColorValue = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, format } = opt;\n  if (!REG_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  let cs, r, g, b, alpha;\n  if (REG_CURRENT.test(value)) {\n    if (format === constant.VAL_SPEC) {\n      return value;\n    }\n    r = 0;\n    g = 0;\n    b = 0;\n    alpha = 0;\n  } else if (/^[a-z]+$/.test(value)) {\n    if (Object.prototype.hasOwnProperty.call(NAMED_COLORS, value)) {\n      if (format === constant.VAL_SPEC) {\n        return value;\n      }\n      [r, g, b] = NAMED_COLORS[value];\n      alpha = 1;\n    } else {\n      if (format === constant.VAL_SPEC) {\n        if (value === \"transparent\") {\n          return value;\n        }\n        return \"\";\n      }\n      if (format === VAL_MIX) {\n        if (value === \"transparent\") {\n          return [\"rgb\", 0, 0, 0, 0];\n        }\n        return null;\n      }\n      r = 0;\n      g = 0;\n      b = 0;\n      alpha = 0;\n    }\n  } else if (value[0] === \"#\") {\n    [r, g, b, alpha] = convertHexToRgb(value);\n  } else if (value.startsWith(\"rgb\")) {\n    [, r, g, b, alpha] = parseRgb(value, opt);\n  } else if (value.startsWith(\"hsl\")) {\n    [, r, g, b, alpha] = parseHsl(value, opt);\n  } else if (value.startsWith(\"hwb\")) {\n    [, r, g, b, alpha] = parseHwb(value, opt);\n  } else if (/^l(?:ab|ch)/.test(value)) {\n    let x, y, z;\n    if (value.startsWith(\"lab\")) {\n      [cs, x, y, z, alpha] = parseLab(value, opt);\n    } else {\n      [cs, x, y, z, alpha] = parseLch(value, opt);\n    }\n    if (REG_SPEC.test(format)) {\n      return [cs, x, y, z, alpha];\n    }\n    [r, g, b, alpha] = convertXyzD50ToRgb([\n      x,\n      y,\n      z,\n      alpha\n    ]);\n  } else if (/^okl(?:ab|ch)/.test(value)) {\n    let x, y, z;\n    if (value.startsWith(\"oklab\")) {\n      [cs, x, y, z, alpha] = parseOklab(value, opt);\n    } else {\n      [cs, x, y, z, alpha] = parseOklch(value, opt);\n    }\n    if (REG_SPEC.test(format)) {\n      return [cs, x, y, z, alpha];\n    }\n    [r, g, b, alpha] = convertXyzToRgb([\n      x,\n      y,\n      z,\n      alpha\n    ]);\n  }\n  if (format === VAL_MIX && colorSpace === \"srgb\") {\n    return [\n      \"srgb\",\n      r / MAX_RGB,\n      g / MAX_RGB,\n      b / MAX_RGB,\n      alpha\n    ];\n  }\n  return [\n    \"rgb\",\n    Math.round(r),\n    Math.round(g),\n    Math.round(b),\n    alpha\n  ];\n};\nconst resolveColorFunc = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, format } = opt;\n  if (!REG_FN_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case constant.VAL_SPEC: {\n        return \"\";\n      }\n      default: {\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    }\n  }\n  const [cs, x, y, z, alpha] = parseColorFunc(value, opt);\n  if (REG_SPEC.test(format) || format === VAL_MIX && cs === colorSpace) {\n    return [cs, x, y, z, alpha];\n  }\n  const [r, g, b] = convertXyzToRgb([\n    x,\n    y,\n    z\n  ], true);\n  return [\"rgb\", r, g, b, alpha];\n};\nconst convertColorToLinearRgb = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, format } = opt;\n  let cs, r, g, b, alpha, x, y, z;\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [cs, x, y, z, alpha] = xyz;\n    if (cs === colorSpace) {\n      return [x, y, z, alpha];\n    }\n    [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    const [, val] = value.match(REG_FN_COLOR);\n    const [cs2] = val.replace(\"/\", \" \").split(/\\s+/);\n    if (cs2 === \"srgb-linear\") {\n      [, r, g, b, alpha] = resolveColorFunc(value, {\n        format: constant.VAL_COMP\n      });\n    } else {\n      [, x, y, z, alpha] = parseColorFunc(value);\n      [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n    }\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n    [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n  }\n  return [\n    Math.min(Math.max(r, 0), 1),\n    Math.min(Math.max(g, 0), 1),\n    Math.min(Math.max(b, 0), 1),\n    alpha\n  ];\n};\nconst convertColorToRgb = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let r, g, b, alpha;\n  if (format === VAL_MIX) {\n    let rgb;\n    if (value.startsWith(constant.FN_COLOR)) {\n      rgb = resolveColorFunc(value, opt);\n    } else {\n      rgb = resolveColorValue(value, opt);\n    }\n    if (rgb === null) {\n      return rgb;\n    }\n    [, r, g, b, alpha] = rgb;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    const [, val] = value.match(REG_FN_COLOR);\n    const [cs] = val.replace(\"/\", \" \").split(/\\s+/);\n    if (cs === \"srgb\") {\n      [, r, g, b, alpha] = resolveColorFunc(value, {\n        format: constant.VAL_COMP\n      });\n      r *= MAX_RGB;\n      g *= MAX_RGB;\n      b *= MAX_RGB;\n    } else {\n      [, r, g, b, alpha] = resolveColorFunc(value);\n    }\n  } else if (/^(?:ok)?l(?:ab|ch)/.test(value)) {\n    [r, g, b, alpha] = convertColorToLinearRgb(value);\n    [r, g, b] = convertLinearRgbToRgb([r, g, b]);\n  } else {\n    [, r, g, b, alpha] = resolveColorValue(value, {\n      format: constant.VAL_COMP\n    });\n  }\n  return [r, g, b, alpha];\n};\nconst convertColorToXyz = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { d50, format } = opt;\n  let x, y, z, alpha;\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    const [, val] = value.match(REG_FN_COLOR);\n    const [cs] = val.replace(\"/\", \" \").split(/\\s+/);\n    if (d50) {\n      if (cs === \"xyz-d50\") {\n        [, x, y, z, alpha] = resolveColorFunc(value, {\n          format: constant.VAL_COMP\n        });\n      } else {\n        [, x, y, z, alpha] = parseColorFunc(value, opt);\n      }\n    } else if (/^xyz(?:-d65)?$/.test(cs)) {\n      [, x, y, z, alpha] = resolveColorFunc(value, {\n        format: constant.VAL_COMP\n      });\n    } else {\n      [, x, y, z, alpha] = parseColorFunc(value);\n    }\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value, opt);\n  }\n  return [x, y, z, alpha];\n};\nconst convertColorToHsl = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let h, s, l, alpha, x, y, z;\n  if (REG_HSL.test(value)) {\n    [, h, s, l, alpha] = parseHsl(value, {\n      format: \"hsl\"\n    });\n    if (format === \"hsl\") {\n      return [\n        Math.round(h),\n        Math.round(s),\n        Math.round(l),\n        alpha\n      ];\n    }\n    return [h, s, l, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [h, s, l] = convertXyzToHsl([x, y, z], true);\n  if (format === \"hsl\") {\n    return [Math.round(h), Math.round(s), Math.round(l), alpha];\n  }\n  return [h, s, l, alpha];\n};\nconst convertColorToHwb = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let h, w, b, alpha, x, y, z;\n  if (REG_HWB.test(value)) {\n    [, h, w, b, alpha] = parseHwb(value, {\n      format: \"hwb\"\n    });\n    if (format === \"hwb\") {\n      return [Math.round(h), Math.round(w), Math.round(b), alpha];\n    }\n    return [h, w, b, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [h, w, b] = convertXyzToHwb([x, y, z], true);\n  if (format === \"hwb\") {\n    return [Math.round(h), Math.round(w), Math.round(b), alpha];\n  }\n  return [h, w, b, alpha];\n};\nconst convertColorToLab = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, a, b, alpha, x, y, z;\n  if (REG_LAB.test(value)) {\n    [, l, a, b, alpha] = parseLab(value, {\n      format: constant.VAL_COMP\n    });\n    return [l, a, b, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    opt.d50 = true;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value, {\n      d50: true\n    });\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value, {\n      d50: true\n    });\n  }\n  [l, a, b] = convertXyzD50ToLab([x, y, z], true);\n  return [l, a, b, alpha];\n};\nconst convertColorToLch = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, c, h, alpha, x, y, z;\n  if (REG_LCH.test(value)) {\n    [, l, c, h, alpha] = parseLch(value, {\n      format: constant.VAL_COMP\n    });\n    return [l, c, h, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    opt.d50 = true;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value, {\n      d50: true\n    });\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value, {\n      d50: true\n    });\n  }\n  [l, c, h] = convertXyzD50ToLch([x, y, z], true);\n  return [l, c, h, alpha];\n};\nconst convertColorToOklab = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, a, b, alpha, x, y, z;\n  if (REG_OKLAB.test(value)) {\n    [, l, a, b, alpha] = parseOklab(value, {\n      format: constant.VAL_COMP\n    });\n    return [l, a, b, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [l, a, b] = convertXyzToOklab([x, y, z], true);\n  return [l, a, b, alpha];\n};\nconst convertColorToOklch = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, c, h, alpha, x, y, z;\n  if (REG_OKLCH.test(value)) {\n    [, l, c, h, alpha] = parseOklch(value, {\n      format: constant.VAL_COMP\n    });\n    return [l, c, h, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(constant.FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(constant.FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [l, c, h] = convertXyzToOklch([x, y, z], true);\n  return [l, c, h, alpha];\n};\nconst resolveColorMix = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  const nestedItems = [];\n  if (!REG_MIX.test(value)) {\n    if (value.startsWith(constant.FN_MIX) && REG_MIX_NEST.test(value)) {\n      const regColorSpace = new RegExp(`^(?:${constant.CS_RGB}|${constant.CS_XYZ})$`);\n      const items = value.match(REG_MIX_NEST);\n      for (const item of items) {\n        let val = resolveColorMix(item, {\n          format: format === constant.VAL_SPEC ? format : constant.VAL_COMP\n        });\n        if (Array.isArray(val)) {\n          const [v1, v2, v3, v4, v5] = val;\n          if (v2 === 0 && v3 === 0 && v4 === 0 && v5 === 0) {\n            value = \"\";\n            break;\n          }\n          if (regColorSpace.test(v1)) {\n            if (v5 === 1) {\n              val = `color(${v1} ${v2} ${v3} ${v4})`;\n            } else {\n              val = `color(${v1} ${v2} ${v3} ${v4} / ${v5})`;\n            }\n          } else if (v5 === 1) {\n            val = `${v1}(${v2} ${v3} ${v4})`;\n          } else {\n            val = `${v1}(${v2} ${v3} ${v4} / ${v5})`;\n          }\n        } else if (!REG_MIX.test(val)) {\n          value = \"\";\n          break;\n        }\n        nestedItems.push(val);\n        value = value.replace(item, val);\n      }\n      if (!value) {\n        if (format === constant.VAL_SPEC) {\n          return \"\";\n        }\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n    } else if (format === constant.VAL_SPEC) {\n      return \"\";\n    } else {\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n  }\n  let colorSpace, hueArc, colorA, pctA, colorB, pctB;\n  if (nestedItems.length && format === constant.VAL_SPEC) {\n    const regColorSpace = new RegExp(`^color-mix\\\\(\\\\s*in\\\\s+(${constant.CS_MIX})\\\\s*,`);\n    const [, cs] = value.match(regColorSpace);\n    if (REG_CS_HUE.test(cs)) {\n      [, colorSpace, hueArc] = cs.match(REG_CS_HUE);\n    } else {\n      colorSpace = cs;\n    }\n    if (nestedItems.length === 2) {\n      const itemA = nestedItems[0].replace(/(?=[()])/g, \"\\\\\");\n      const regA = new RegExp(`(${itemA})(?:\\\\s+(${constant.PCT}))?`);\n      [, colorA, pctA] = value.match(regA);\n      const itemB = nestedItems[1].replace(/(?=[()])/g, \"\\\\\");\n      const regB = new RegExp(`(${itemB})(?:\\\\s+(${constant.PCT}))?`);\n      [, colorB, pctB] = value.match(regB);\n    } else {\n      const colorPart = `(?:${constant.SYN_COLOR_TYPE})(?:\\\\s+${constant.PCT})?`;\n      const item = nestedItems[0].replace(/(?=[()])/g, \"\\\\\");\n      const itemPart = `${item}(?:\\\\s+${constant.PCT})?`;\n      const itemPartCapt = `(${item})(?:\\\\s+(${constant.PCT}))?`;\n      const regColorPart = new RegExp(`^(${constant.SYN_COLOR_TYPE})(?:\\\\s+(${constant.PCT}))?$`);\n      const regItemPart = new RegExp(`^${itemPartCapt}$`);\n      const regPosition = new RegExp(`${itemPartCapt}\\\\s*\\\\)$`);\n      if (regPosition.test(value)) {\n        const reg = new RegExp(`(${colorPart})\\\\s*,\\\\s*(${itemPart})\\\\s*\\\\)$`);\n        const [, colorPartA, colorPartB] = value.match(reg);\n        [, colorA, pctA] = colorPartA.match(regColorPart);\n        [, colorB, pctB] = colorPartB.match(regItemPart);\n      } else {\n        const reg = new RegExp(`(${itemPart})\\\\s*,\\\\s*(${colorPart})\\\\s*\\\\)$`);\n        const [, colorPartA, colorPartB] = value.match(reg);\n        [, colorA, pctA] = colorPartA.match(regItemPart);\n        [, colorB, pctB] = colorPartB.match(regColorPart);\n      }\n    }\n  } else {\n    const [, cs, colorPartA, colorPartB] = value.match(REG_MIX_CAPT);\n    const reg = new RegExp(`^(${constant.SYN_COLOR_TYPE})(?:\\\\s+(${constant.PCT}))?$`);\n    [, colorA, pctA] = colorPartA.match(reg);\n    [, colorB, pctB] = colorPartB.match(reg);\n    if (REG_CS_HUE.test(cs)) {\n      [, colorSpace, hueArc] = REG_CS_HUE.exec(cs);\n    } else {\n      colorSpace = cs;\n    }\n  }\n  let pA, pB, m;\n  if (pctA && pctB) {\n    const p1 = parseFloat(pctA) / MAX_PCT;\n    const p2 = parseFloat(pctB) / MAX_PCT;\n    if (p1 < 0 || p1 > 1 || p2 < 0 || p2 > 1) {\n      if (format === constant.VAL_SPEC) {\n        return \"\";\n      }\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    const factor = p1 + p2;\n    if (factor === 0) {\n      if (format === constant.VAL_SPEC) {\n        return \"\";\n      }\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    pA = p1 / factor;\n    pB = p2 / factor;\n    m = factor < 1 ? factor : 1;\n  } else {\n    if (pctA) {\n      pA = parseFloat(pctA) / MAX_PCT;\n      if (pA < 0 || pA > 1) {\n        if (format === constant.VAL_SPEC) {\n          return \"\";\n        }\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n      pB = 1 - pA;\n    } else if (pctB) {\n      pB = parseFloat(pctB) / MAX_PCT;\n      if (pB < 0 || pB > 1) {\n        if (format === constant.VAL_SPEC) {\n          return \"\";\n        }\n        return [\"rgb\", 0, 0, 0, 0];\n      }\n      pA = 1 - pB;\n    } else {\n      pA = HALF;\n      pB = HALF;\n    }\n    m = 1;\n  }\n  if (colorSpace === \"xyz\") {\n    colorSpace = \"xyz-d65\";\n  }\n  if (format === constant.VAL_SPEC) {\n    let valueA, valueB;\n    if (colorA.startsWith(constant.FN_MIX)) {\n      valueA = colorA;\n    } else if (colorA.startsWith(constant.FN_COLOR)) {\n      valueA = parseColorFunc(colorA, opt);\n      if (Array.isArray(valueA)) {\n        const [v1, v2, v3, v4, v5] = [...valueA];\n        if (v5 === 1) {\n          valueA = `color(${v1} ${v2} ${v3} ${v4})`;\n        } else {\n          valueA = `color(${v1} ${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    } else {\n      valueA = parseColorValue(colorA, opt);\n      if (valueA === \"\") {\n        return valueA;\n      }\n      if (Array.isArray(valueA)) {\n        const [v1, v2, v3, v4, v5] = [...valueA];\n        if (v5 === 1) {\n          if (v1 === \"rgb\") {\n            valueA = `${v1}(${v2}, ${v3}, ${v4})`;\n          } else {\n            valueA = `${v1}(${v2} ${v3} ${v4})`;\n          }\n        } else if (v1 === \"rgb\") {\n          valueA = `${v1}a(${v2}, ${v3}, ${v4}, ${v5})`;\n        } else {\n          valueA = `${v1}(${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    }\n    if (colorB.startsWith(constant.FN_MIX)) {\n      valueB = colorB;\n    } else if (colorB.startsWith(constant.FN_COLOR)) {\n      valueB = parseColorFunc(colorB, opt);\n      if (Array.isArray(valueB)) {\n        const [v1, v2, v3, v4, v5] = [...valueB];\n        if (v5 === 1) {\n          valueB = `color(${v1} ${v2} ${v3} ${v4})`;\n        } else {\n          valueB = `color(${v1} ${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    } else {\n      valueB = parseColorValue(colorB, opt);\n      if (valueB === \"\") {\n        return valueB;\n      }\n      if (Array.isArray(valueB)) {\n        const [v1, v2, v3, v4, v5] = [...valueB];\n        if (v5 === 1) {\n          if (v1 === \"rgb\") {\n            valueB = `${v1}(${v2}, ${v3}, ${v4})`;\n          } else {\n            valueB = `${v1}(${v2} ${v3} ${v4})`;\n          }\n        } else if (v1 === \"rgb\") {\n          valueB = `${v1}a(${v2}, ${v3}, ${v4}, ${v5})`;\n        } else {\n          valueB = `${v1}(${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    }\n    if (pctA && pctB) {\n      valueA += ` ${parseFloat(pctA)}%`;\n      valueB += ` ${parseFloat(pctB)}%`;\n    } else if (pctA) {\n      const pA2 = parseFloat(pctA);\n      if (pA2 !== MAX_PCT * HALF) {\n        valueA += ` ${pA2}%`;\n      }\n    } else if (pctB) {\n      const pA2 = MAX_PCT - parseFloat(pctB);\n      if (pA2 !== MAX_PCT * HALF) {\n        valueA += ` ${pA2}%`;\n      }\n    }\n    if (hueArc) {\n      return `color-mix(in ${colorSpace} ${hueArc} hue, ${valueA}, ${valueB})`;\n    } else {\n      return `color-mix(in ${colorSpace}, ${valueA}, ${valueB})`;\n    }\n  }\n  let r, g, b, alpha;\n  if (/^srgb(?:-linear)?$/.test(colorSpace)) {\n    let rgbA, rgbB;\n    if (colorSpace === \"srgb\") {\n      if (REG_CURRENT.test(colorA)) {\n        rgbA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        rgbA = convertColorToRgb(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        rgbB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        rgbB = convertColorToRgb(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        rgbA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        rgbA = convertColorToLinearRgb(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        rgbB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        rgbB = convertColorToLinearRgb(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (rgbA === null || rgbB === null) {\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    let [rA, gA, bA, alphaA] = rgbA;\n    let [rB, gB, bB, alphaB] = rgbB;\n    const rNone = rA === constant.NONE && rB === constant.NONE;\n    const gNone = gA === constant.NONE && gB === constant.NONE;\n    const bNone = bA === constant.NONE && bB === constant.NONE;\n    const alphaNone = alphaA === constant.NONE && alphaB === constant.NONE;\n    [[rA, gA, bA, alphaA], [rB, gB, bB, alphaB]] = normalizeColorComponents(\n      [rA, gA, bA, alphaA],\n      [rB, gB, bB, alphaB],\n      true\n    );\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = factorA + factorB;\n    if (alpha === 0) {\n      r = rA * pA + rB * pB;\n      g = gA * pA + gB * pB;\n      b = bA * pA + bB * pB;\n    } else {\n      r = (rA * factorA + rB * factorB) / alpha;\n      g = (gA * factorA + gB * factorB) / alpha;\n      b = (bA * factorA + bB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === constant.VAL_COMP) {\n      return [\n        colorSpace,\n        rNone ? constant.NONE : util.roundToPrecision(r, HEX),\n        gNone ? constant.NONE : util.roundToPrecision(g, HEX),\n        bNone ? constant.NONE : util.roundToPrecision(b, HEX),\n        alphaNone ? constant.NONE : alpha * m\n      ];\n    }\n    r *= MAX_RGB;\n    g *= MAX_RGB;\n    b *= MAX_RGB;\n  } else if (REG_CS_XYZ.test(colorSpace)) {\n    let xyzA, xyzB;\n    if (REG_CURRENT.test(colorA)) {\n      xyzA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n    } else {\n      xyzA = convertColorToXyz(colorA, {\n        colorSpace,\n        d50: colorSpace === \"xyz-d50\",\n        format: VAL_MIX\n      });\n    }\n    if (REG_CURRENT.test(colorB)) {\n      xyzB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n    } else {\n      xyzB = convertColorToXyz(colorB, {\n        colorSpace,\n        d50: colorSpace === \"xyz-d50\",\n        format: VAL_MIX\n      });\n    }\n    if (xyzA === null || xyzB === null) {\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    let [xA, yA, zA, alphaA] = xyzA;\n    let [xB, yB, zB, alphaB] = xyzB;\n    const xNone = xA === constant.NONE && xB === constant.NONE;\n    const yNone = yA === constant.NONE && yB === constant.NONE;\n    const zNone = zA === constant.NONE && zB === constant.NONE;\n    const alphaNone = alphaA === constant.NONE && alphaB === constant.NONE;\n    [[xA, yA, zA, alphaA], [xB, yB, zB, alphaB]] = normalizeColorComponents(\n      [xA, yA, zA, alphaA],\n      [xB, yB, zB, alphaB],\n      true\n    );\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = factorA + factorB;\n    let x, y, z;\n    if (alpha === 0) {\n      x = xA * pA + xB * pB;\n      y = yA * pA + yB * pB;\n      z = zA * pA + zB * pB;\n    } else {\n      x = (xA * factorA + xB * factorB) / alpha;\n      y = (yA * factorA + yB * factorB) / alpha;\n      z = (zA * factorA + zB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === constant.VAL_COMP) {\n      return [\n        colorSpace,\n        xNone ? constant.NONE : util.roundToPrecision(x, HEX),\n        yNone ? constant.NONE : util.roundToPrecision(y, HEX),\n        zNone ? constant.NONE : util.roundToPrecision(z, HEX),\n        alphaNone ? constant.NONE : alpha * m\n      ];\n    }\n    if (colorSpace === \"xyz-d50\") {\n      [r, g, b] = convertXyzD50ToRgb([x, y, z], true);\n    } else {\n      [r, g, b] = convertXyzToRgb([x, y, z], true);\n    }\n  } else if (/^h(?:sl|wb)$/.test(colorSpace)) {\n    let hslA, hslB;\n    if (colorSpace === \"hsl\") {\n      if (REG_CURRENT.test(colorA)) {\n        hslA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        hslA = convertColorToHsl(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        hslB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        hslB = convertColorToHsl(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        hslA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        hslA = convertColorToHwb(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        hslB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        hslB = convertColorToHwb(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (hslA === null || hslB === null) {\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    let [hA, sA, lA, alphaA] = hslA;\n    let [hB, sB, lB, alphaB] = hslB;\n    const alphaNone = alphaA === constant.NONE && alphaB === constant.NONE;\n    [[hA, sA, lA, alphaA], [hB, sB, lB, alphaB]] = normalizeColorComponents(\n      [hA, sA, lA, alphaA],\n      [hB, sB, lB, alphaB],\n      true\n    );\n    if (hueArc) {\n      [hA, hB] = util.interpolateHue(hA, hB, hueArc);\n    }\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = factorA + factorB;\n    const h = (hA * pA + hB * pB) % DEG;\n    let s, l;\n    if (alpha === 0) {\n      s = sA * pA + sB * pB;\n      l = lA * pA + lB * pB;\n    } else {\n      s = (sA * factorA + sB * factorB) / alpha;\n      l = (lA * factorA + lB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    [r, g, b] = convertColorToRgb(`${colorSpace}(${h} ${s} ${l})`);\n    if (format === constant.VAL_COMP) {\n      return [\n        \"srgb\",\n        util.roundToPrecision(r / MAX_RGB, HEX),\n        util.roundToPrecision(g / MAX_RGB, HEX),\n        util.roundToPrecision(b / MAX_RGB, HEX),\n        alphaNone ? constant.NONE : alpha * m\n      ];\n    }\n  } else if (/^(?:ok)?lab$/.test(colorSpace)) {\n    let labA, labB;\n    if (colorSpace === \"lab\") {\n      if (REG_CURRENT.test(colorA)) {\n        labA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        labA = convertColorToLab(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        labB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        labB = convertColorToLab(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        labA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        labA = convertColorToOklab(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        labB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        labB = convertColorToOklab(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (labA === null || labB === null) {\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    let [lA, aA, bA, alphaA] = labA;\n    let [lB, aB, bB, alphaB] = labB;\n    const lNone = lA === constant.NONE && lB === constant.NONE;\n    const aNone = aA === constant.NONE && aB === constant.NONE;\n    const bNone = bA === constant.NONE && bB === constant.NONE;\n    const alphaNone = alphaA === constant.NONE && alphaB === constant.NONE;\n    [[lA, aA, bA, alphaA], [lB, aB, bB, alphaB]] = normalizeColorComponents(\n      [lA, aA, bA, alphaA],\n      [lB, aB, bB, alphaB],\n      true\n    );\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = factorA + factorB;\n    let l, aO, bO;\n    if (alpha === 0) {\n      l = lA * pA + lB * pB;\n      aO = aA * pA + aB * pB;\n      bO = bA * pA + bB * pB;\n    } else {\n      l = (lA * factorA + lB * factorB) / alpha;\n      aO = (aA * factorA + aB * factorB) / alpha;\n      bO = (bA * factorA + bB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === constant.VAL_COMP) {\n      return [\n        colorSpace,\n        lNone ? constant.NONE : util.roundToPrecision(l, HEX),\n        aNone ? constant.NONE : util.roundToPrecision(aO, HEX),\n        bNone ? constant.NONE : util.roundToPrecision(bO, HEX),\n        alphaNone ? constant.NONE : alpha * m\n      ];\n    }\n    [, r, g, b] = resolveColorValue(`${colorSpace}(${l} ${aO} ${bO})`);\n  } else if (/^(?:ok)?lch$/.test(colorSpace)) {\n    let lchA, lchB;\n    if (colorSpace === \"lch\") {\n      if (REG_CURRENT.test(colorA)) {\n        lchA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        lchA = convertColorToLch(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        lchB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        lchB = convertColorToLch(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        lchA = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        lchA = convertColorToOklch(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        lchB = [constant.NONE, constant.NONE, constant.NONE, constant.NONE];\n      } else {\n        lchB = convertColorToOklch(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (lchA === null || lchB === null) {\n      return [\"rgb\", 0, 0, 0, 0];\n    }\n    let [lA, cA, hA, alphaA] = lchA;\n    let [lB, cB, hB, alphaB] = lchB;\n    const lNone = lA === constant.NONE && lB === constant.NONE;\n    const cNone = cA === constant.NONE && cB === constant.NONE;\n    const hNone = hA === constant.NONE && hB === constant.NONE;\n    const alphaNone = alphaA === constant.NONE && alphaB === constant.NONE;\n    [[lA, cA, hA, alphaA], [lB, cB, hB, alphaB]] = normalizeColorComponents(\n      [lA, cA, hA, alphaA],\n      [lB, cB, hB, alphaB],\n      true\n    );\n    if (hueArc) {\n      [hA, hB] = util.interpolateHue(hA, hB, hueArc);\n    }\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = factorA + factorB;\n    const h = (hA * pA + hB * pB) % DEG;\n    let l, c;\n    if (alpha === 0) {\n      l = lA * pA + lB * pB;\n      c = cA * pA + cB * pB;\n    } else {\n      l = (lA * factorA + lB * factorB) / alpha;\n      c = (cA * factorA + cB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === constant.VAL_COMP) {\n      return [\n        colorSpace,\n        lNone ? constant.NONE : util.roundToPrecision(l, HEX),\n        cNone ? constant.NONE : util.roundToPrecision(c, HEX),\n        hNone ? constant.NONE : util.roundToPrecision(h, HEX),\n        alphaNone ? constant.NONE : alpha * m\n      ];\n    }\n    [, r, g, b] = resolveColorValue(`${colorSpace}(${l} ${c} ${h})`);\n  }\n  return [\n    \"rgb\",\n    Math.round(r),\n    Math.round(g),\n    Math.round(b),\n    parseFloat((alpha * m).toFixed(3))\n  ];\n};\nexports.NAMED_COLORS = NAMED_COLORS;\nexports.angleToDeg = angleToDeg;\nexports.convertColorToHsl = convertColorToHsl;\nexports.convertColorToHwb = convertColorToHwb;\nexports.convertColorToLab = convertColorToLab;\nexports.convertColorToLch = convertColorToLch;\nexports.convertColorToLinearRgb = convertColorToLinearRgb;\nexports.convertColorToOklab = convertColorToOklab;\nexports.convertColorToOklch = convertColorToOklch;\nexports.convertColorToRgb = convertColorToRgb;\nexports.convertColorToXyz = convertColorToXyz;\nexports.convertHexToLinearRgb = convertHexToLinearRgb;\nexports.convertHexToRgb = convertHexToRgb;\nexports.convertHexToXyz = convertHexToXyz;\nexports.convertLinearRgbToRgb = convertLinearRgbToRgb;\nexports.convertRgbToHex = convertRgbToHex;\nexports.convertRgbToLinearRgb = convertRgbToLinearRgb;\nexports.convertRgbToXyz = convertRgbToXyz;\nexports.convertXyzD50ToLab = convertXyzD50ToLab;\nexports.convertXyzD50ToLch = convertXyzD50ToLch;\nexports.convertXyzD50ToRgb = convertXyzD50ToRgb;\nexports.convertXyzToHsl = convertXyzToHsl;\nexports.convertXyzToHwb = convertXyzToHwb;\nexports.convertXyzToOklab = convertXyzToOklab;\nexports.convertXyzToOklch = convertXyzToOklch;\nexports.convertXyzToRgb = convertXyzToRgb;\nexports.normalizeColorComponents = normalizeColorComponents;\nexports.numberToHexString = numberToHexString;\nexports.parseAlpha = parseAlpha;\nexports.parseColorFunc = parseColorFunc;\nexports.parseColorValue = parseColorValue;\nexports.parseHexAlpha = parseHexAlpha;\nexports.parseHsl = parseHsl;\nexports.parseHwb = parseHwb;\nexports.parseLab = parseLab;\nexports.parseLch = parseLch;\nexports.parseOklab = parseOklab;\nexports.parseOklch = parseOklch;\nexports.parseRgb = parseRgb;\nexports.resolveColorFunc = resolveColorFunc;\nexports.resolveColorMix = resolveColorMix;\nexports.resolveColorValue = resolveColorValue;\nexports.transformMatrix = transformMatrix;\nexports.validateColorComponents = validateColorComponents;\n//# sourceMappingURL=color.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/color.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst isString = (o) => typeof o === \"string\" || o instanceof String;\nexports.isString = isString;\n//# sourceMappingURL=common.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFzYW11emFranArY3NzLWNvbG9yQDIuOC4zL25vZGVfbW9kdWxlcy9AYXNhbXV6YWtqcC9jc3MtY29sb3IvZGlzdC9janMvanMvY29tbW9uLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHFEQUFxRCxpQkFBaUI7QUFDdEU7QUFDQSxnQkFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9mdWppYXdhbmcvRGVza3RvcC9jaGF0Ym90L25vZGVfbW9kdWxlcy8ucG5wbS9AYXNhbXV6YWtqcCtjc3MtY29sb3JAMi44LjMvbm9kZV9tb2R1bGVzL0Bhc2FtdXpha2pwL2Nzcy1jb2xvci9kaXN0L2Nqcy9qcy9jb21tb24uY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KTtcbmNvbnN0IGlzU3RyaW5nID0gKG8pID0+IHR5cGVvZiBvID09PSBcInN0cmluZ1wiIHx8IG8gaW5zdGFuY2VvZiBTdHJpbmc7XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst VAL_COMP = \"computedValue\";\nconst VAL_SPEC = \"specifiedValue\";\nconst _DIGIT = \"(?:0|[1-9]\\\\d*)\";\nconst _COMP = \"clamp|max|min\";\nconst _STEP = \"mod|rem|round\";\nconst _TRIG = \"a?(?:cos|sin|tan)|atan2\";\nconst _EXP = \"exp|hypot|log|pow|sqrt\";\nconst _SIGN = \"abs|sign\";\nconst _MATH = `${_COMP}|${_STEP}|${_TRIG}|${_EXP}|${_SIGN}`;\nconst _CALC = `calc|${_MATH}`;\nconst _VAR = `var|${_CALC}`;\nconst ANGLE = \"deg|g?rad|turn\";\nconst NUM = `[+-]?(?:${_DIGIT}(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e-?${_DIGIT})?`;\nconst NONE = \"none\";\nconst PCT = `${NUM}%`;\nconst SYN_FN_MATH = `^(?:${_MATH})\\\\($`;\nconst SYN_FN_MATH_CALC = `^(?:${_CALC})\\\\(|(?<=[*\\\\/\\\\s\\\\(])(?:${_CALC})\\\\(`;\nconst SYN_FN_MATH_VAR = `^(?:${_VAR})\\\\(`;\nconst SYN_FN_VAR = \"^var\\\\(|(?<=[*\\\\/\\\\s\\\\(])var\\\\(\";\nconst _ALPHA = `(?:\\\\s*\\\\/\\\\s*(?:${NUM}|${PCT}|${NONE}))?`;\nconst _ALPHA_LV3 = `(?:\\\\s*,\\\\s*(?:${NUM}|${PCT}))?`;\nconst _COLOR_FUNC = \"(?:ok)?l(?:ab|ch)|color|hsla?|hwb|rgba?\";\nconst _COLOR_KEY = \"[a-z]+|#[\\\\da-f]{3}|#[\\\\da-f]{4}|#[\\\\da-f]{6}|#[\\\\da-f]{8}\";\nconst _CS_HUE = \"(?:ok)?lch|hsl|hwb\";\nconst _CS_HUE_ARC = \"(?:de|in)creasing|longer|shorter\";\nconst _NUM_ANGLE = `${NUM}(?:${ANGLE})?`;\nconst _NUM_ANGLE_NONE = `(?:${NUM}(?:${ANGLE})?|${NONE})`;\nconst _NUM_PCT_NONE = `(?:${NUM}|${PCT}|${NONE})`;\nconst CS_HUE = `(?:${_CS_HUE})(?:\\\\s(?:${_CS_HUE_ARC})\\\\shue)?`;\nconst CS_HUE_CAPT = `(${_CS_HUE})(?:\\\\s(${_CS_HUE_ARC})\\\\shue)?`;\nconst CS_LAB = \"(?:ok)?lab\";\nconst CS_LCH = \"(?:ok)?lch\";\nconst CS_SRGB = \"srgb(?:-linear)?\";\nconst CS_RGB = `(?:a98|prophoto)-rgb|display-p3|rec2020|${CS_SRGB}`;\nconst CS_XYZ = \"xyz(?:-d(?:50|65))?\";\nconst CS_MIX = `${CS_HUE}|${CS_LAB}|${CS_SRGB}|${CS_XYZ}`;\nconst FN_COLOR = \"color(\";\nconst FN_MIX = \"color-mix(\";\nconst FN_REL = `(?:${_COLOR_FUNC})\\\\(\\\\s*from\\\\s+`;\nconst FN_REL_CAPT = `(${_COLOR_FUNC})\\\\(\\\\s*from\\\\s+`;\nconst FN_VAR = \"var(\";\nconst SYN_FN_COLOR = `(?:${CS_RGB}|${CS_XYZ})(?:\\\\s+${_NUM_PCT_NONE}){3}${_ALPHA}`;\nconst SYN_FN_REL = `^${FN_REL}|(?<=[\\\\s])${FN_REL}`;\nconst SYN_HSL = `${_NUM_ANGLE_NONE}(?:\\\\s+${_NUM_PCT_NONE}){2}${_ALPHA}`;\nconst SYN_HSL_LV3 = `${_NUM_ANGLE}(?:\\\\s*,\\\\s*${PCT}){2}${_ALPHA_LV3}`;\nconst SYN_LCH = `(?:${_NUM_PCT_NONE}\\\\s+){2}${_NUM_ANGLE_NONE}${_ALPHA}`;\nconst SYN_MOD = `${_NUM_PCT_NONE}(?:\\\\s+${_NUM_PCT_NONE}){2}${_ALPHA}`;\nconst SYN_RGB_LV3 = `(?:${NUM}(?:\\\\s*,\\\\s*${NUM}){2}|${PCT}(?:\\\\s*,\\\\s*${PCT}){2})${_ALPHA_LV3}`;\nconst SYN_COLOR_TYPE = `${_COLOR_KEY}|hsla?\\\\(\\\\s*${SYN_HSL_LV3}\\\\s*\\\\)|rgba?\\\\(\\\\s*${SYN_RGB_LV3}\\\\s*\\\\)|(?:hsla?|hwb)\\\\(\\\\s*${SYN_HSL}\\\\s*\\\\)|(?:(?:ok)?lab|rgba?)\\\\(\\\\s*${SYN_MOD}\\\\s*\\\\)|(?:ok)?lch\\\\(\\\\s*${SYN_LCH}\\\\s*\\\\)|color\\\\(\\\\s*${SYN_FN_COLOR}\\\\s*\\\\)`;\nconst SYN_MIX_PART = `(?:${SYN_COLOR_TYPE})(?:\\\\s+${PCT})?`;\nconst SYN_MIX = `color-mix\\\\(\\\\s*in\\\\s+(?:${CS_MIX})\\\\s*,\\\\s*${SYN_MIX_PART}\\\\s*,\\\\s*${SYN_MIX_PART}\\\\s*\\\\)`;\nconst SYN_MIX_CAPT = `color-mix\\\\(\\\\s*in\\\\s+(${CS_MIX})\\\\s*,\\\\s*(${SYN_MIX_PART})\\\\s*,\\\\s*(${SYN_MIX_PART})\\\\s*\\\\)`;\nexports.ANGLE = ANGLE;\nexports.CS_HUE = CS_HUE;\nexports.CS_HUE_CAPT = CS_HUE_CAPT;\nexports.CS_LAB = CS_LAB;\nexports.CS_LCH = CS_LCH;\nexports.CS_MIX = CS_MIX;\nexports.CS_RGB = CS_RGB;\nexports.CS_SRGB = CS_SRGB;\nexports.CS_XYZ = CS_XYZ;\nexports.FN_COLOR = FN_COLOR;\nexports.FN_MIX = FN_MIX;\nexports.FN_REL = FN_REL;\nexports.FN_REL_CAPT = FN_REL_CAPT;\nexports.FN_VAR = FN_VAR;\nexports.NONE = NONE;\nexports.NUM = NUM;\nexports.PCT = PCT;\nexports.SYN_COLOR_TYPE = SYN_COLOR_TYPE;\nexports.SYN_FN_COLOR = SYN_FN_COLOR;\nexports.SYN_FN_MATH = SYN_FN_MATH;\nexports.SYN_FN_MATH_CALC = SYN_FN_MATH_CALC;\nexports.SYN_FN_MATH_VAR = SYN_FN_MATH_VAR;\nexports.SYN_FN_REL = SYN_FN_REL;\nexports.SYN_FN_VAR = SYN_FN_VAR;\nexports.SYN_HSL = SYN_HSL;\nexports.SYN_HSL_LV3 = SYN_HSL_LV3;\nexports.SYN_LCH = SYN_LCH;\nexports.SYN_MIX = SYN_MIX;\nexports.SYN_MIX_CAPT = SYN_MIX_CAPT;\nexports.SYN_MIX_PART = SYN_MIX_PART;\nexports.SYN_MOD = SYN_MOD;\nexports.SYN_RGB_LV3 = SYN_RGB_LV3;\nexports.VAL_COMP = VAL_COMP;\nexports.VAL_SPEC = VAL_SPEC;\n//# sourceMappingURL=constant.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFzYW11emFranArY3NzLWNvbG9yQDIuOC4zL25vZGVfbW9kdWxlcy9AYXNhbXV6YWtqcC9jc3MtY29sb3IvZGlzdC9janMvanMvY29uc3RhbnQuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IscURBQXFELGlCQUFpQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNO0FBQzFELHNCQUFzQixNQUFNO0FBQzVCLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0EsdUJBQXVCLE9BQU8sNkJBQTZCLE9BQU87QUFDbEU7QUFDQSxlQUFlLElBQUk7QUFDbkIsMkJBQTJCLE1BQU07QUFDakMsZ0NBQWdDLE1BQU0sMkJBQTJCLE1BQU07QUFDdkUsK0JBQStCLEtBQUs7QUFDcEM7QUFDQSxtQ0FBbUMsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLO0FBQ3RELHFDQUFxQyxJQUFJLEdBQUcsSUFBSTtBQUNoRDtBQUNBLHFDQUFxQyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFO0FBQzlFO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSSxLQUFLLE1BQU07QUFDckMsOEJBQThCLElBQUksS0FBSyxNQUFNLEtBQUssS0FBSztBQUN2RCw0QkFBNEIsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLO0FBQy9DLHFCQUFxQixRQUFRLFlBQVksWUFBWTtBQUNyRCx3QkFBd0IsUUFBUSxVQUFVLFlBQVk7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsMERBQTBELFFBQVE7QUFDbEU7QUFDQSxrQkFBa0IsT0FBTyxHQUFHLE9BQU8sR0FBRyxRQUFRLEdBQUcsT0FBTztBQUN4RDtBQUNBO0FBQ0EscUJBQXFCLFlBQVk7QUFDakMsd0JBQXdCLFlBQVk7QUFDcEM7QUFDQSwyQkFBMkIsT0FBTyxHQUFHLE9BQU8sVUFBVSxjQUFjLEVBQUUsRUFBRSxFQUFFLE9BQU87QUFDakYsdUJBQXVCLE9BQU8sYUFBYSxPQUFPO0FBQ2xELG1CQUFtQixnQkFBZ0IsU0FBUyxjQUFjLEVBQUUsRUFBRSxFQUFFLE9BQU87QUFDdkUsdUJBQXVCLFdBQVcsY0FBYyxJQUFJLEVBQUUsRUFBRSxFQUFFLFdBQVc7QUFDckUsc0JBQXNCLGNBQWMsTUFBTSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTztBQUN2RSxtQkFBbUIsY0FBYyxTQUFTLGNBQWMsRUFBRSxFQUFFLEVBQUUsT0FBTztBQUNyRSwwQkFBMEIsSUFBSSxjQUFjLElBQUksRUFBRSxFQUFFLEdBQUcsSUFBSSxjQUFjLElBQUksRUFBRSxFQUFFLEdBQUcsV0FBVztBQUMvRiwwQkFBMEIsV0FBVyxlQUFlLFlBQVksc0JBQXNCLFlBQVksOEJBQThCLFFBQVEscUNBQXFDLFFBQVEsMkJBQTJCLFFBQVEsc0JBQXNCLGFBQWE7QUFDM1AsMkJBQTJCLGVBQWUsVUFBVSxJQUFJO0FBQ3hELDRDQUE0QyxPQUFPLFlBQVksYUFBYSxXQUFXLGFBQWE7QUFDcEcsK0NBQStDLE9BQU8sYUFBYSxhQUFhLGFBQWEsYUFBYTtBQUMxRyxhQUFhO0FBQ2IsY0FBYztBQUNkLG1CQUFtQjtBQUNuQixjQUFjO0FBQ2QsY0FBYztBQUNkLGNBQWM7QUFDZCxjQUFjO0FBQ2QsZUFBZTtBQUNmLGNBQWM7QUFDZCxnQkFBZ0I7QUFDaEIsY0FBYztBQUNkLGNBQWM7QUFDZCxtQkFBbUI7QUFDbkIsY0FBYztBQUNkLFlBQVk7QUFDWixXQUFXO0FBQ1gsV0FBVztBQUNYLHNCQUFzQjtBQUN0QixvQkFBb0I7QUFDcEIsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4Qix1QkFBdUI7QUFDdkIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixlQUFlO0FBQ2YsbUJBQW1CO0FBQ25CLGVBQWU7QUFDZixlQUFlO0FBQ2Ysb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixlQUFlO0FBQ2YsbUJBQW1CO0FBQ25CLGdCQUFnQjtBQUNoQixnQkFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9mdWppYXdhbmcvRGVza3RvcC9jaGF0Ym90L25vZGVfbW9kdWxlcy8ucG5wbS9AYXNhbXV6YWtqcCtjc3MtY29sb3JAMi44LjMvbm9kZV9tb2R1bGVzL0Bhc2FtdXpha2pwL2Nzcy1jb2xvci9kaXN0L2Nqcy9qcy9jb25zdGFudC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcIk1vZHVsZVwiIH0pO1xuY29uc3QgVkFMX0NPTVAgPSBcImNvbXB1dGVkVmFsdWVcIjtcbmNvbnN0IFZBTF9TUEVDID0gXCJzcGVjaWZpZWRWYWx1ZVwiO1xuY29uc3QgX0RJR0lUID0gXCIoPzowfFsxLTldXFxcXGQqKVwiO1xuY29uc3QgX0NPTVAgPSBcImNsYW1wfG1heHxtaW5cIjtcbmNvbnN0IF9TVEVQID0gXCJtb2R8cmVtfHJvdW5kXCI7XG5jb25zdCBfVFJJRyA9IFwiYT8oPzpjb3N8c2lufHRhbil8YXRhbjJcIjtcbmNvbnN0IF9FWFAgPSBcImV4cHxoeXBvdHxsb2d8cG93fHNxcnRcIjtcbmNvbnN0IF9TSUdOID0gXCJhYnN8c2lnblwiO1xuY29uc3QgX01BVEggPSBgJHtfQ09NUH18JHtfU1RFUH18JHtfVFJJR318JHtfRVhQfXwke19TSUdOfWA7XG5jb25zdCBfQ0FMQyA9IGBjYWxjfCR7X01BVEh9YDtcbmNvbnN0IF9WQVIgPSBgdmFyfCR7X0NBTEN9YDtcbmNvbnN0IEFOR0xFID0gXCJkZWd8Zz9yYWR8dHVyblwiO1xuY29uc3QgTlVNID0gYFsrLV0/KD86JHtfRElHSVR9KD86XFxcXC5cXFxcZCopP3xcXFxcLlxcXFxkKykoPzplLT8ke19ESUdJVH0pP2A7XG5jb25zdCBOT05FID0gXCJub25lXCI7XG5jb25zdCBQQ1QgPSBgJHtOVU19JWA7XG5jb25zdCBTWU5fRk5fTUFUSCA9IGBeKD86JHtfTUFUSH0pXFxcXCgkYDtcbmNvbnN0IFNZTl9GTl9NQVRIX0NBTEMgPSBgXig/OiR7X0NBTEN9KVxcXFwofCg/PD1bKlxcXFwvXFxcXHNcXFxcKF0pKD86JHtfQ0FMQ30pXFxcXChgO1xuY29uc3QgU1lOX0ZOX01BVEhfVkFSID0gYF4oPzoke19WQVJ9KVxcXFwoYDtcbmNvbnN0IFNZTl9GTl9WQVIgPSBcIl52YXJcXFxcKHwoPzw9WypcXFxcL1xcXFxzXFxcXChdKXZhclxcXFwoXCI7XG5jb25zdCBfQUxQSEEgPSBgKD86XFxcXHMqXFxcXC9cXFxccyooPzoke05VTX18JHtQQ1R9fCR7Tk9ORX0pKT9gO1xuY29uc3QgX0FMUEhBX0xWMyA9IGAoPzpcXFxccyosXFxcXHMqKD86JHtOVU19fCR7UENUfSkpP2A7XG5jb25zdCBfQ09MT1JfRlVOQyA9IFwiKD86b2spP2woPzphYnxjaCl8Y29sb3J8aHNsYT98aHdifHJnYmE/XCI7XG5jb25zdCBfQ09MT1JfS0VZID0gXCJbYS16XSt8I1tcXFxcZGEtZl17M318I1tcXFxcZGEtZl17NH18I1tcXFxcZGEtZl17Nn18I1tcXFxcZGEtZl17OH1cIjtcbmNvbnN0IF9DU19IVUUgPSBcIig/Om9rKT9sY2h8aHNsfGh3YlwiO1xuY29uc3QgX0NTX0hVRV9BUkMgPSBcIig/OmRlfGluKWNyZWFzaW5nfGxvbmdlcnxzaG9ydGVyXCI7XG5jb25zdCBfTlVNX0FOR0xFID0gYCR7TlVNfSg/OiR7QU5HTEV9KT9gO1xuY29uc3QgX05VTV9BTkdMRV9OT05FID0gYCg/OiR7TlVNfSg/OiR7QU5HTEV9KT98JHtOT05FfSlgO1xuY29uc3QgX05VTV9QQ1RfTk9ORSA9IGAoPzoke05VTX18JHtQQ1R9fCR7Tk9ORX0pYDtcbmNvbnN0IENTX0hVRSA9IGAoPzoke19DU19IVUV9KSg/OlxcXFxzKD86JHtfQ1NfSFVFX0FSQ30pXFxcXHNodWUpP2A7XG5jb25zdCBDU19IVUVfQ0FQVCA9IGAoJHtfQ1NfSFVFfSkoPzpcXFxccygke19DU19IVUVfQVJDfSlcXFxcc2h1ZSk/YDtcbmNvbnN0IENTX0xBQiA9IFwiKD86b2spP2xhYlwiO1xuY29uc3QgQ1NfTENIID0gXCIoPzpvayk/bGNoXCI7XG5jb25zdCBDU19TUkdCID0gXCJzcmdiKD86LWxpbmVhcik/XCI7XG5jb25zdCBDU19SR0IgPSBgKD86YTk4fHByb3Bob3RvKS1yZ2J8ZGlzcGxheS1wM3xyZWMyMDIwfCR7Q1NfU1JHQn1gO1xuY29uc3QgQ1NfWFlaID0gXCJ4eXooPzotZCg/OjUwfDY1KSk/XCI7XG5jb25zdCBDU19NSVggPSBgJHtDU19IVUV9fCR7Q1NfTEFCfXwke0NTX1NSR0J9fCR7Q1NfWFlafWA7XG5jb25zdCBGTl9DT0xPUiA9IFwiY29sb3IoXCI7XG5jb25zdCBGTl9NSVggPSBcImNvbG9yLW1peChcIjtcbmNvbnN0IEZOX1JFTCA9IGAoPzoke19DT0xPUl9GVU5DfSlcXFxcKFxcXFxzKmZyb21cXFxccytgO1xuY29uc3QgRk5fUkVMX0NBUFQgPSBgKCR7X0NPTE9SX0ZVTkN9KVxcXFwoXFxcXHMqZnJvbVxcXFxzK2A7XG5jb25zdCBGTl9WQVIgPSBcInZhcihcIjtcbmNvbnN0IFNZTl9GTl9DT0xPUiA9IGAoPzoke0NTX1JHQn18JHtDU19YWVp9KSg/OlxcXFxzKyR7X05VTV9QQ1RfTk9ORX0pezN9JHtfQUxQSEF9YDtcbmNvbnN0IFNZTl9GTl9SRUwgPSBgXiR7Rk5fUkVMfXwoPzw9W1xcXFxzXSkke0ZOX1JFTH1gO1xuY29uc3QgU1lOX0hTTCA9IGAke19OVU1fQU5HTEVfTk9ORX0oPzpcXFxccyske19OVU1fUENUX05PTkV9KXsyfSR7X0FMUEhBfWA7XG5jb25zdCBTWU5fSFNMX0xWMyA9IGAke19OVU1fQU5HTEV9KD86XFxcXHMqLFxcXFxzKiR7UENUfSl7Mn0ke19BTFBIQV9MVjN9YDtcbmNvbnN0IFNZTl9MQ0ggPSBgKD86JHtfTlVNX1BDVF9OT05FfVxcXFxzKyl7Mn0ke19OVU1fQU5HTEVfTk9ORX0ke19BTFBIQX1gO1xuY29uc3QgU1lOX01PRCA9IGAke19OVU1fUENUX05PTkV9KD86XFxcXHMrJHtfTlVNX1BDVF9OT05FfSl7Mn0ke19BTFBIQX1gO1xuY29uc3QgU1lOX1JHQl9MVjMgPSBgKD86JHtOVU19KD86XFxcXHMqLFxcXFxzKiR7TlVNfSl7Mn18JHtQQ1R9KD86XFxcXHMqLFxcXFxzKiR7UENUfSl7Mn0pJHtfQUxQSEFfTFYzfWA7XG5jb25zdCBTWU5fQ09MT1JfVFlQRSA9IGAke19DT0xPUl9LRVl9fGhzbGE/XFxcXChcXFxccyoke1NZTl9IU0xfTFYzfVxcXFxzKlxcXFwpfHJnYmE/XFxcXChcXFxccyoke1NZTl9SR0JfTFYzfVxcXFxzKlxcXFwpfCg/OmhzbGE/fGh3YilcXFxcKFxcXFxzKiR7U1lOX0hTTH1cXFxccypcXFxcKXwoPzooPzpvayk/bGFifHJnYmE/KVxcXFwoXFxcXHMqJHtTWU5fTU9EfVxcXFxzKlxcXFwpfCg/Om9rKT9sY2hcXFxcKFxcXFxzKiR7U1lOX0xDSH1cXFxccypcXFxcKXxjb2xvclxcXFwoXFxcXHMqJHtTWU5fRk5fQ09MT1J9XFxcXHMqXFxcXClgO1xuY29uc3QgU1lOX01JWF9QQVJUID0gYCg/OiR7U1lOX0NPTE9SX1RZUEV9KSg/OlxcXFxzKyR7UENUfSk/YDtcbmNvbnN0IFNZTl9NSVggPSBgY29sb3ItbWl4XFxcXChcXFxccyppblxcXFxzKyg/OiR7Q1NfTUlYfSlcXFxccyosXFxcXHMqJHtTWU5fTUlYX1BBUlR9XFxcXHMqLFxcXFxzKiR7U1lOX01JWF9QQVJUfVxcXFxzKlxcXFwpYDtcbmNvbnN0IFNZTl9NSVhfQ0FQVCA9IGBjb2xvci1taXhcXFxcKFxcXFxzKmluXFxcXHMrKCR7Q1NfTUlYfSlcXFxccyosXFxcXHMqKCR7U1lOX01JWF9QQVJUfSlcXFxccyosXFxcXHMqKCR7U1lOX01JWF9QQVJUfSlcXFxccypcXFxcKWA7XG5leHBvcnRzLkFOR0xFID0gQU5HTEU7XG5leHBvcnRzLkNTX0hVRSA9IENTX0hVRTtcbmV4cG9ydHMuQ1NfSFVFX0NBUFQgPSBDU19IVUVfQ0FQVDtcbmV4cG9ydHMuQ1NfTEFCID0gQ1NfTEFCO1xuZXhwb3J0cy5DU19MQ0ggPSBDU19MQ0g7XG5leHBvcnRzLkNTX01JWCA9IENTX01JWDtcbmV4cG9ydHMuQ1NfUkdCID0gQ1NfUkdCO1xuZXhwb3J0cy5DU19TUkdCID0gQ1NfU1JHQjtcbmV4cG9ydHMuQ1NfWFlaID0gQ1NfWFlaO1xuZXhwb3J0cy5GTl9DT0xPUiA9IEZOX0NPTE9SO1xuZXhwb3J0cy5GTl9NSVggPSBGTl9NSVg7XG5leHBvcnRzLkZOX1JFTCA9IEZOX1JFTDtcbmV4cG9ydHMuRk5fUkVMX0NBUFQgPSBGTl9SRUxfQ0FQVDtcbmV4cG9ydHMuRk5fVkFSID0gRk5fVkFSO1xuZXhwb3J0cy5OT05FID0gTk9ORTtcbmV4cG9ydHMuTlVNID0gTlVNO1xuZXhwb3J0cy5QQ1QgPSBQQ1Q7XG5leHBvcnRzLlNZTl9DT0xPUl9UWVBFID0gU1lOX0NPTE9SX1RZUEU7XG5leHBvcnRzLlNZTl9GTl9DT0xPUiA9IFNZTl9GTl9DT0xPUjtcbmV4cG9ydHMuU1lOX0ZOX01BVEggPSBTWU5fRk5fTUFUSDtcbmV4cG9ydHMuU1lOX0ZOX01BVEhfQ0FMQyA9IFNZTl9GTl9NQVRIX0NBTEM7XG5leHBvcnRzLlNZTl9GTl9NQVRIX1ZBUiA9IFNZTl9GTl9NQVRIX1ZBUjtcbmV4cG9ydHMuU1lOX0ZOX1JFTCA9IFNZTl9GTl9SRUw7XG5leHBvcnRzLlNZTl9GTl9WQVIgPSBTWU5fRk5fVkFSO1xuZXhwb3J0cy5TWU5fSFNMID0gU1lOX0hTTDtcbmV4cG9ydHMuU1lOX0hTTF9MVjMgPSBTWU5fSFNMX0xWMztcbmV4cG9ydHMuU1lOX0xDSCA9IFNZTl9MQ0g7XG5leHBvcnRzLlNZTl9NSVggPSBTWU5fTUlYO1xuZXhwb3J0cy5TWU5fTUlYX0NBUFQgPSBTWU5fTUlYX0NBUFQ7XG5leHBvcnRzLlNZTl9NSVhfUEFSVCA9IFNZTl9NSVhfUEFSVDtcbmV4cG9ydHMuU1lOX01PRCA9IFNZTl9NT0Q7XG5leHBvcnRzLlNZTl9SR0JfTFYzID0gU1lOX1JHQl9MVjM7XG5leHBvcnRzLlZBTF9DT01QID0gVkFMX0NPTVA7XG5leHBvcnRzLlZBTF9TUEVDID0gVkFMX1NQRUM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudC5janMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/convert.cjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/convert.cjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst lruCache = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/commonjs/index.js\");\nconst color = __webpack_require__(/*! ./color.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/color.cjs\");\nconst common = __webpack_require__(/*! ./common.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\");\nconst cssCalc = __webpack_require__(/*! ./css-calc.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs\");\nconst cssVar = __webpack_require__(/*! ./css-var.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-var.cjs\");\nconst relativeColor = __webpack_require__(/*! ./relative-color.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/relative-color.cjs\");\nconst resolve = __webpack_require__(/*! ./resolve.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/resolve.cjs\");\nconst util = __webpack_require__(/*! ./util.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\");\nconst constant = __webpack_require__(/*! ./constant.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\");\nconst REG_FN_MATH_CALC = new RegExp(constant.SYN_FN_MATH_CALC);\nconst REG_FN_REL = new RegExp(constant.SYN_FN_REL);\nconst REG_FN_VAR = new RegExp(constant.SYN_FN_VAR);\nconst cachedResults = new lruCache.LRUCache({\n  max: 4096\n});\nconst preProcess = (value, opt = {}) => {\n  if (common.isString(value)) {\n    value = value.trim();\n    if (!value) {\n      return null;\n    }\n  } else {\n    return null;\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{preProcess:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  if (REG_FN_VAR.test(value)) {\n    const resolvedValue = cssVar.cssVar(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue;\n    } else {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, resolvedValue);\n      }\n      return null;\n    }\n  }\n  if (REG_FN_REL.test(value)) {\n    value = relativeColor.resolveRelativeColor(value, opt);\n  } else if (REG_FN_MATH_CALC.test(value)) {\n    const resolvedValue = cssCalc.cssCalc(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue;\n    } else {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, resolvedValue);\n      }\n      return null;\n    }\n  }\n  if (value.startsWith(\"color-mix\")) {\n    value = resolve.resolve(value, {\n      format: constant.VAL_COMP\n    });\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, value);\n  }\n  return value;\n};\nconst numberToHex = (value) => {\n  const cacheKey = typeof value === \"number\" && `{numberToHex:${value}}`;\n  if (cacheKey && cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  const hex = color.numberToHexString(value);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, hex);\n  }\n  return hex;\n};\nconst colorToHex = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return null;\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { alpha, customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToHex:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let hex;\n  if (alpha) {\n    opt.format = \"hexAlpha\";\n    hex = resolve.resolve(value, opt);\n  } else {\n    opt.format = \"hex\";\n    hex = resolve.resolve(value, opt);\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, hex);\n  }\n  return hex;\n};\nconst colorToHsl = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToHsl:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  opt.format = \"hsl\";\n  const hsl = color.convertColorToHsl(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, hsl);\n  }\n  return hsl;\n};\nconst colorToHwb = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToHwb:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  opt.format = \"hwb\";\n  const hwb = color.convertColorToHwb(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, hwb);\n  }\n  return hwb;\n};\nconst colorToLab = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToLab:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lab = color.convertColorToLab(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lab);\n  }\n  return lab;\n};\nconst colorToLch = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToLch:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lch = color.convertColorToLch(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lch);\n  }\n  return lch;\n};\nconst colorToOklab = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToOklab:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lab = color.convertColorToOklab(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lab);\n  }\n  return lab;\n};\nconst colorToOklch = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToOklch:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lch = color.convertColorToOklch(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lch);\n  }\n  return lch;\n};\nconst colorToRgb = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToRgb:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const rgb = color.convertColorToRgb(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, rgb);\n  }\n  return rgb;\n};\nconst colorToXyz = (value, opt = {}) => {\n  if (common.isString(value)) {\n    const resolvedValue = preProcess(value, opt);\n    if (resolvedValue) {\n      value = resolvedValue.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof (customProperty == null ? void 0 : customProperty.callback) !== \"function\") {\n    cacheKey = `{colorToXyz:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let xyz;\n  if (value.startsWith(\"color(\")) {\n    [, ...xyz] = color.parseColorFunc(value, opt);\n  } else {\n    [, ...xyz] = color.parseColorValue(value, opt);\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, xyz);\n  }\n  return xyz;\n};\nconst colorToXyzD50 = (value, opt = {}) => {\n  opt.d50 = true;\n  return colorToXyz(value, opt);\n};\nconst convert = {\n  colorToHex,\n  colorToHsl,\n  colorToHwb,\n  colorToLab,\n  colorToLch,\n  colorToOklab,\n  colorToOklch,\n  colorToRgb,\n  colorToXyz,\n  colorToXyzD50,\n  numberToHex\n};\nexports.cachedResults = cachedResults;\nexports.colorToHex = colorToHex;\nexports.colorToHsl = colorToHsl;\nexports.colorToHwb = colorToHwb;\nexports.colorToLab = colorToLab;\nexports.colorToLch = colorToLch;\nexports.colorToOklab = colorToOklab;\nexports.colorToOklch = colorToOklch;\nexports.colorToRgb = colorToRgb;\nexports.colorToXyz = colorToXyz;\nexports.colorToXyzD50 = colorToXyzD50;\nexports.convert = convert;\nexports.numberToHex = numberToHex;\nexports.preProcess = preProcess;\n//# sourceMappingURL=convert.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/convert.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _hasNum, _numSum, _numMul, _hasPct, _pctSum, _pctMul, _hasDim, _dimSum, _dimSub, _dimMul, _dimDiv, _hasEtc, _etcSum, _etcSub, _etcMul, _etcDiv;\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst cssCalc$1 = __webpack_require__(/*! @csstools/css-calc */ \"(ssr)/./node_modules/.pnpm/@csstools+css-calc@2.1.1_@csstools+css-parser-algorithms@3.0.4_@csstools+css-tokenizer@3.0.3__vlj2ym64kb6jtc2hg2j3v45yym/node_modules/@csstools/css-calc/dist/index.cjs\");\nconst cssTokenizer = __webpack_require__(/*! @csstools/css-tokenizer */ \"(ssr)/./node_modules/.pnpm/@csstools+css-tokenizer@3.0.3/node_modules/@csstools/css-tokenizer/dist/index.cjs\");\nconst lruCache = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/commonjs/index.js\");\nconst common = __webpack_require__(/*! ./common.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\");\nconst util = __webpack_require__(/*! ./util.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\");\nconst constant = __webpack_require__(/*! ./constant.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\");\nconst {\n  CloseParen: PAREN_CLOSE,\n  Comment: COMMENT,\n  Dimension: DIM,\n  EOF,\n  Function: FUNC,\n  OpenParen: PAREN_OPEN,\n  Whitespace: W_SPACE\n} = cssTokenizer.TokenType;\nconst HEX = 16;\nconst MAX_PCT = 100;\nconst REG_FN_MATH_CALC = new RegExp(constant.SYN_FN_MATH_CALC);\nconst REG_FN_VAR = new RegExp(constant.SYN_FN_VAR);\nconst REG_OPERATOR = /\\s[*+/-]\\s/;\nconst REG_START_MATH = new RegExp(constant.SYN_FN_MATH);\nconst REG_START_MATH_VAR = new RegExp(constant.SYN_FN_MATH_VAR);\nconst REG_TYPE_DIM = new RegExp(`^(${constant.NUM})([a-z]+)$`);\nconst REG_TYPE_DIM_PCT = new RegExp(`^(${constant.NUM})([a-z]+|%)$`);\nconst REG_TYPE_PCT = new RegExp(`^(${constant.NUM})%$`);\nconst cachedResults = new lruCache.LRUCache({\n  max: 4096\n});\nclass Calculator {\n  /**\n   * constructor\n   */\n  constructor() {\n    /* private */\n    // number\n    __privateAdd(this, _hasNum);\n    __privateAdd(this, _numSum);\n    __privateAdd(this, _numMul);\n    // percentage\n    __privateAdd(this, _hasPct);\n    __privateAdd(this, _pctSum);\n    __privateAdd(this, _pctMul);\n    // dimension\n    __privateAdd(this, _hasDim);\n    __privateAdd(this, _dimSum);\n    __privateAdd(this, _dimSub);\n    __privateAdd(this, _dimMul);\n    __privateAdd(this, _dimDiv);\n    // et cetra\n    __privateAdd(this, _hasEtc);\n    __privateAdd(this, _etcSum);\n    __privateAdd(this, _etcSub);\n    __privateAdd(this, _etcMul);\n    __privateAdd(this, _etcDiv);\n    __privateSet(this, _hasNum, false);\n    __privateSet(this, _numSum, []);\n    __privateSet(this, _numMul, []);\n    __privateSet(this, _hasPct, false);\n    __privateSet(this, _pctSum, []);\n    __privateSet(this, _pctMul, []);\n    __privateSet(this, _hasDim, false);\n    __privateSet(this, _dimSum, []);\n    __privateSet(this, _dimSub, []);\n    __privateSet(this, _dimMul, []);\n    __privateSet(this, _dimDiv, []);\n    __privateSet(this, _hasEtc, false);\n    __privateSet(this, _etcSum, []);\n    __privateSet(this, _etcSub, []);\n    __privateSet(this, _etcMul, []);\n    __privateSet(this, _etcDiv, []);\n  }\n  get hasNum() {\n    return __privateGet(this, _hasNum);\n  }\n  set hasNum(value) {\n    __privateSet(this, _hasNum, !!value);\n  }\n  get numSum() {\n    return __privateGet(this, _numSum);\n  }\n  get numMul() {\n    return __privateGet(this, _numMul);\n  }\n  get hasPct() {\n    return __privateGet(this, _hasPct);\n  }\n  set hasPct(value) {\n    __privateSet(this, _hasPct, !!value);\n  }\n  get pctSum() {\n    return __privateGet(this, _pctSum);\n  }\n  get pctMul() {\n    return __privateGet(this, _pctMul);\n  }\n  get hasDim() {\n    return __privateGet(this, _hasDim);\n  }\n  set hasDim(value) {\n    __privateSet(this, _hasDim, !!value);\n  }\n  get dimSum() {\n    return __privateGet(this, _dimSum);\n  }\n  get dimSub() {\n    return __privateGet(this, _dimSub);\n  }\n  get dimMul() {\n    return __privateGet(this, _dimMul);\n  }\n  get dimDiv() {\n    return __privateGet(this, _dimDiv);\n  }\n  get hasEtc() {\n    return __privateGet(this, _hasEtc);\n  }\n  set hasEtc(value) {\n    __privateSet(this, _hasEtc, !!value);\n  }\n  get etcSum() {\n    return __privateGet(this, _etcSum);\n  }\n  get etcSub() {\n    return __privateGet(this, _etcSub);\n  }\n  get etcMul() {\n    return __privateGet(this, _etcMul);\n  }\n  get etcDiv() {\n    return __privateGet(this, _etcDiv);\n  }\n  /**\n   * clear values\n   * @returns {void}\n   */\n  clear() {\n    __privateSet(this, _hasNum, false);\n    __privateSet(this, _numSum, []);\n    __privateSet(this, _numMul, []);\n    __privateSet(this, _hasPct, false);\n    __privateSet(this, _pctSum, []);\n    __privateSet(this, _pctMul, []);\n    __privateSet(this, _hasDim, false);\n    __privateSet(this, _dimSum, []);\n    __privateSet(this, _dimSub, []);\n    __privateSet(this, _dimMul, []);\n    __privateSet(this, _dimDiv, []);\n    __privateSet(this, _hasEtc, false);\n    __privateSet(this, _etcSum, []);\n    __privateSet(this, _etcSub, []);\n    __privateSet(this, _etcMul, []);\n    __privateSet(this, _etcDiv, []);\n  }\n  /**\n   * sort values\n   * @param {Array} values - values\n   * @returns {Array} - sorted values\n   */\n  sort(values = []) {\n    const arr = [...values];\n    if (arr.length > 1) {\n      arr.sort((a, b) => {\n        let res;\n        if (REG_TYPE_DIM_PCT.test(a) && REG_TYPE_DIM_PCT.test(b)) {\n          const [, valA, unitA] = a.match(REG_TYPE_DIM_PCT);\n          const [, valB, unitB] = b.match(REG_TYPE_DIM_PCT);\n          if (unitA === unitB) {\n            if (Number(valA) === Number(valB)) {\n              res = 0;\n            } else if (Number(valA) > Number(valB)) {\n              res = 1;\n            } else {\n              res = -1;\n            }\n          } else if (unitA > unitB) {\n            res = 1;\n          } else {\n            res = -1;\n          }\n        } else {\n          if (a === b) {\n            res = 0;\n          } else if (a > b) {\n            res = 1;\n          } else {\n            res = -1;\n          }\n        }\n        return res;\n      });\n    }\n    return arr;\n  }\n  /**\n   * multiply values\n   * @returns {?string} - resolved value\n   */\n  multiply() {\n    const value = [];\n    let num;\n    if (__privateGet(this, _hasNum)) {\n      num = 1;\n      for (const i of __privateGet(this, _numMul)) {\n        num *= i;\n        if (num === 0 || !Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      if (!__privateGet(this, _hasPct) && !__privateGet(this, _hasDim) && !this.hasEtc) {\n        value.push(num);\n      }\n    }\n    if (__privateGet(this, _hasPct)) {\n      if (!__privateGet(this, _hasNum)) {\n        num = 1;\n      }\n      for (const i of __privateGet(this, _pctMul)) {\n        num *= i;\n        if (num === 0 || !Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      if (Number.isFinite(num)) {\n        num = `${num}%`;\n      }\n      if (!__privateGet(this, _hasDim) && !this.hasEtc) {\n        value.push(num);\n      }\n    }\n    if (__privateGet(this, _hasDim)) {\n      let dim, mul, div;\n      if (__privateGet(this, _dimMul).length) {\n        if (__privateGet(this, _dimMul).length === 1) {\n          [mul] = __privateGet(this, _dimMul);\n        } else {\n          mul = `${this.sort(__privateGet(this, _dimMul)).join(\" * \")}`;\n        }\n      }\n      if (__privateGet(this, _dimDiv).length) {\n        if (__privateGet(this, _dimDiv).length === 1) {\n          [div] = __privateGet(this, _dimDiv);\n        } else {\n          div = `${this.sort(__privateGet(this, _dimDiv)).join(\" * \")}`;\n        }\n      }\n      if (Number.isFinite(num)) {\n        if (mul) {\n          if (div) {\n            if (div.includes(\"*\")) {\n              dim = cssCalc$1.calc(`calc(${num} * ${mul} / (${div}))`, {\n                toCanonicalUnits: true\n              });\n            } else {\n              dim = cssCalc$1.calc(`calc(${num} * ${mul} / ${div})`, {\n                toCanonicalUnits: true\n              });\n            }\n          } else {\n            dim = cssCalc$1.calc(`calc(${num} * ${mul})`, {\n              toCanonicalUnits: true\n            });\n          }\n        } else {\n          if (div.includes(\"*\")) {\n            dim = cssCalc$1.calc(`calc(${num} / (${div}))`, {\n              toCanonicalUnits: true\n            });\n          } else {\n            dim = cssCalc$1.calc(`calc(${num} / ${div})`, {\n              toCanonicalUnits: true\n            });\n          }\n        }\n        value.push(dim.replace(/^calc/, \"\"));\n      } else {\n        if (!value.length && num !== void 0) {\n          value.push(num);\n        }\n        if (mul) {\n          if (div) {\n            if (div.includes(\"*\")) {\n              dim = cssCalc$1.calc(`calc(${mul} / (${div}))`, {\n                toCanonicalUnits: true\n              });\n            } else {\n              dim = cssCalc$1.calc(`calc(${mul} / ${div})`, {\n                toCanonicalUnits: true\n              });\n            }\n          } else {\n            dim = cssCalc$1.calc(`calc(${mul})`, {\n              toCanonicalUnits: true\n            });\n          }\n          if (value.length) {\n            value.push(\"*\", dim.replace(/^calc/, \"\"));\n          } else {\n            value.push(dim.replace(/^calc/, \"\"));\n          }\n        } else {\n          dim = cssCalc$1.calc(`calc(${div})`, {\n            toCanonicalUnits: true\n          });\n          if (value.length) {\n            value.push(\"/\", dim.replace(/^calc/, \"\"));\n          } else {\n            value.push(\"1\", \"/\", dim.replace(/^calc/, \"\"));\n          }\n        }\n      }\n    }\n    if (__privateGet(this, _hasEtc)) {\n      if (__privateGet(this, _etcMul).length) {\n        if (!value.length && num !== void 0) {\n          value.push(num);\n        }\n        const mul = this.sort(__privateGet(this, _etcMul)).join(\" * \");\n        if (value.length) {\n          value.push(`* ${mul}`);\n        } else {\n          value.push(`${mul}`);\n        }\n      }\n      if (__privateGet(this, _etcDiv).length) {\n        const div = this.sort(__privateGet(this, _etcDiv)).join(\" * \");\n        if (div.includes(\"*\")) {\n          if (value.length) {\n            value.push(`/ (${div})`);\n          } else {\n            value.push(`1 / (${div})`);\n          }\n        } else if (value.length) {\n          value.push(`/ ${div}`);\n        } else {\n          value.push(`1 / ${div}`);\n        }\n      }\n    }\n    return value.join(\" \") || null;\n  }\n  /**\n   * sum values\n   * @returns {?string} - resolved value\n   */\n  sum() {\n    const value = [];\n    if (__privateGet(this, _hasNum)) {\n      let num = 0;\n      for (const i of __privateGet(this, _numSum)) {\n        num += i;\n        if (!Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      value.push(num);\n    }\n    if (__privateGet(this, _hasPct)) {\n      let num = 0;\n      for (const i of __privateGet(this, _pctSum)) {\n        num += i;\n        if (!Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      if (Number.isFinite(num)) {\n        num = `${num}%`;\n      }\n      if (value.length) {\n        value.push(`+ ${num}`);\n      } else {\n        value.push(num);\n      }\n    }\n    if (__privateGet(this, _hasDim)) {\n      let dim, sum, sub;\n      if (__privateGet(this, _dimSum).length) {\n        sum = __privateGet(this, _dimSum).join(\" + \");\n      }\n      if (__privateGet(this, _dimSub).length) {\n        sub = __privateGet(this, _dimSub).join(\" + \");\n      }\n      if (sum) {\n        if (sub) {\n          if (sub.includes(\"-\")) {\n            dim = cssCalc$1.calc(`calc(${sum} - (${sub}))`, {\n              toCanonicalUnits: true\n            });\n          } else {\n            dim = cssCalc$1.calc(`calc(${sum} - ${sub})`, {\n              toCanonicalUnits: true\n            });\n          }\n        } else {\n          dim = cssCalc$1.calc(`calc(${sum})`, {\n            toCanonicalUnits: true\n          });\n        }\n      } else {\n        dim = cssCalc$1.calc(`calc(-1 * (${sub}))`, {\n          toCanonicalUnits: true\n        });\n      }\n      if (value.length) {\n        value.push(\"+\", dim.replace(/^calc/, \"\"));\n      } else {\n        value.push(dim.replace(/^calc/, \"\"));\n      }\n    }\n    if (__privateGet(this, _hasEtc)) {\n      if (__privateGet(this, _etcSum).length) {\n        const sum = this.sort(__privateGet(this, _etcSum)).map((item) => {\n          let res;\n          if (REG_OPERATOR.test(item) && !item.startsWith(\"(\") && !item.endsWith(\")\")) {\n            res = `(${item})`;\n          } else {\n            res = item;\n          }\n          return res;\n        }).join(\" + \");\n        if (value.length) {\n          if (__privateGet(this, _etcSum).length > 1) {\n            value.push(`+ (${sum})`);\n          } else {\n            value.push(`+ ${sum}`);\n          }\n        } else {\n          value.push(`${sum}`);\n        }\n      }\n      if (__privateGet(this, _etcSub).length) {\n        const sub = this.sort(__privateGet(this, _etcSub)).map((item) => {\n          let res;\n          if (REG_OPERATOR.test(item) && !item.startsWith(\"(\") && !item.endsWith(\")\")) {\n            res = `(${item})`;\n          } else {\n            res = item;\n          }\n          return res;\n        }).join(\" + \");\n        if (value.length) {\n          if (__privateGet(this, _etcSub).length > 1) {\n            value.push(`- (${sub})`);\n          } else {\n            value.push(`- ${sub}`);\n          }\n        } else if (__privateGet(this, _etcSub).length > 1) {\n          value.push(`-1 * (${sub})`);\n        } else {\n          value.push(`-1 * ${sub}`);\n        }\n      }\n    }\n    return value.join(\" \") || null;\n  }\n}\n_hasNum = new WeakMap();\n_numSum = new WeakMap();\n_numMul = new WeakMap();\n_hasPct = new WeakMap();\n_pctSum = new WeakMap();\n_pctMul = new WeakMap();\n_hasDim = new WeakMap();\n_dimSum = new WeakMap();\n_dimSub = new WeakMap();\n_dimMul = new WeakMap();\n_dimDiv = new WeakMap();\n_hasEtc = new WeakMap();\n_etcSum = new WeakMap();\n_etcSub = new WeakMap();\n_etcMul = new WeakMap();\n_etcDiv = new WeakMap();\nconst sortCalcValues = (values = [], finalize = false) => {\n  if (values.length < 3) {\n    return null;\n  }\n  const start = values.shift();\n  const end = values.pop();\n  if (values.length === 1) {\n    const [value] = values;\n    return `${start}${value}${end}`;\n  }\n  const sortedValues = [];\n  const cal = new Calculator();\n  let operator;\n  for (let i = 0, l = values.length; i < l; i++) {\n    const value = values[i];\n    if (value === \"*\" || value === \"/\") {\n      operator = value;\n    } else if (value === \"+\" || value === \"-\") {\n      const sortedValue = cal.multiply();\n      sortedValues.push(sortedValue, value);\n      cal.clear();\n      operator = null;\n    } else {\n      switch (operator) {\n        case \"/\": {\n          const numValue = Number(value);\n          if (Number.isFinite(numValue)) {\n            cal.hasNum = true;\n            cal.numMul.push(1 / numValue);\n          } else if (REG_TYPE_PCT.test(value)) {\n            const [, val] = value.match(REG_TYPE_PCT);\n            cal.hasPct = true;\n            cal.pctMul.push(MAX_PCT * MAX_PCT / Number(val));\n          } else if (REG_TYPE_DIM.test(value)) {\n            cal.hasDim = true;\n            cal.dimDiv.push(value);\n          } else {\n            cal.hasEtc = true;\n            cal.etcDiv.push(value);\n          }\n          break;\n        }\n        case \"*\":\n        default: {\n          const numValue = Number(value);\n          if (Number.isFinite(numValue)) {\n            cal.hasNum = true;\n            cal.numMul.push(numValue);\n          } else if (REG_TYPE_PCT.test(value)) {\n            const [, val] = value.match(REG_TYPE_PCT);\n            cal.hasPct = true;\n            cal.pctMul.push(Number(val));\n          } else if (REG_TYPE_DIM.test(value)) {\n            cal.hasDim = true;\n            cal.dimMul.push(value);\n          } else {\n            cal.hasEtc = true;\n            cal.etcMul.push(value);\n          }\n        }\n      }\n      if (i === l - 1) {\n        const sortedValue = cal.multiply();\n        sortedValues.push(sortedValue);\n        cal.clear();\n        operator = null;\n      }\n    }\n  }\n  let resolvedValue;\n  if (finalize && (sortedValues.includes(\"+\") || sortedValues.includes(\"-\"))) {\n    const finalizedValues = [];\n    cal.clear();\n    operator = null;\n    for (let i = 0, l = sortedValues.length; i < l; i++) {\n      const value = sortedValues[i];\n      if (value === \"+\" || value === \"-\") {\n        operator = value;\n      } else {\n        switch (operator) {\n          case \"-\": {\n            const numValue = Number(value);\n            if (Number.isFinite(numValue)) {\n              cal.hasNum = true;\n              cal.numSum.push(-1 * numValue);\n            } else if (REG_TYPE_PCT.test(value)) {\n              const [, val] = value.match(REG_TYPE_PCT);\n              cal.hasPct = true;\n              cal.pctSum.push(-1 * Number(val));\n            } else if (REG_TYPE_DIM.test(value)) {\n              cal.hasDim = true;\n              cal.dimSub.push(value);\n            } else {\n              cal.hasEtc = true;\n              cal.etcSub.push(value);\n            }\n            break;\n          }\n          case \"+\":\n          default: {\n            const numValue = Number(value);\n            if (Number.isFinite(numValue)) {\n              cal.hasNum = true;\n              cal.numSum.push(numValue);\n            } else if (REG_TYPE_PCT.test(value)) {\n              const [, val] = value.match(REG_TYPE_PCT);\n              cal.hasPct = true;\n              cal.pctSum.push(Number(val));\n            } else if (REG_TYPE_DIM.test(value)) {\n              cal.hasDim = true;\n              cal.dimSum.push(value);\n            } else {\n              cal.hasEtc = true;\n              cal.etcSum.push(value);\n            }\n          }\n        }\n        if (i === l - 1) {\n          const sortedValue = cal.sum();\n          finalizedValues.push(sortedValue);\n          cal.clear();\n          operator = null;\n        }\n      }\n    }\n    resolvedValue = finalizedValues.join(\" \");\n  } else {\n    resolvedValue = sortedValues.join(\" \");\n  }\n  return `${start}${resolvedValue}${end}`;\n};\nconst serializeCalc = (value, opt = {}) => {\n  const { format } = opt;\n  if (common.isString(value)) {\n    if (!REG_START_MATH_VAR.test(value) || format !== constant.VAL_SPEC) {\n      return value;\n    }\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string`);\n  }\n  const cacheKey = `{serializeCalc:${value},opt:${util.valueToJsonString(opt)}}`;\n  if (cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  const items = cssTokenizer.tokenize({ css: value }).map((token) => {\n    const [type, value2] = token;\n    let res;\n    if (type !== W_SPACE && type !== COMMENT) {\n      res = value2;\n    }\n    return res;\n  }).filter((v) => v);\n  let startIndex = items.findLastIndex((item) => /\\($/.test(item));\n  while (startIndex) {\n    const endIndex = items.findIndex((item, index) => {\n      return item === \")\" && index > startIndex;\n    });\n    const slicedValues = items.slice(startIndex, endIndex + 1);\n    let serializedValue = sortCalcValues(slicedValues);\n    if (REG_START_MATH_VAR.test(serializedValue)) {\n      serializedValue = cssCalc$1.calc(serializedValue, {\n        toCanonicalUnits: true\n      });\n    }\n    items.splice(startIndex, endIndex - startIndex + 1, serializedValue);\n    startIndex = items.findLastIndex((item) => /\\($/.test(item));\n  }\n  const serializedCalc = sortCalcValues(items, true);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, serializedCalc);\n  }\n  return serializedCalc;\n};\nconst resolveDimension = (token, opt = {}) => {\n  if (!Array.isArray(token)) {\n    throw new TypeError(`${token} is not an array.`);\n  }\n  const [, value, , , detail = {}] = token;\n  const { unit, value: relativeValue } = detail;\n  const { dimension = {} } = opt;\n  if (unit === \"px\") {\n    return value;\n  }\n  let res;\n  if (unit && Number.isFinite(relativeValue)) {\n    let pixelValue;\n    if (Object.hasOwnProperty.call(dimension, unit)) {\n      pixelValue = dimension[unit];\n    } else if (typeof dimension.callback === \"function\") {\n      pixelValue = dimension.callback(unit);\n    }\n    pixelValue = Number(pixelValue);\n    if (Number.isFinite(pixelValue)) {\n      res = `${relativeValue * pixelValue}px`;\n    }\n  }\n  return res ?? null;\n};\nconst parseTokens = (tokens, opt = {}) => {\n  if (!Array.isArray(tokens)) {\n    throw new TypeError(`${tokens} is not an array.`);\n  }\n  const { format } = opt;\n  const mathFunc = /* @__PURE__ */ new Set();\n  let nest = 0;\n  const res = [];\n  while (tokens.length) {\n    const token = tokens.shift();\n    if (!Array.isArray(token)) {\n      throw new TypeError(`${token} is not an array.`);\n    }\n    const [type, value] = token;\n    switch (type) {\n      case DIM: {\n        let resolvedValue;\n        if (format === constant.VAL_SPEC && !mathFunc.has(nest)) {\n          resolvedValue = value;\n        } else {\n          resolvedValue = resolveDimension(token, opt);\n          if (!resolvedValue) {\n            resolvedValue = value;\n          }\n        }\n        res.push(resolvedValue);\n        break;\n      }\n      case FUNC:\n      case PAREN_OPEN: {\n        res.push(value);\n        nest++;\n        if (REG_START_MATH.test(value)) {\n          mathFunc.add(nest);\n        }\n        break;\n      }\n      case PAREN_CLOSE: {\n        if (res.length) {\n          const lastValue = res[res.length - 1];\n          if (lastValue === \" \") {\n            res.splice(-1, 1, value);\n          } else {\n            res.push(value);\n          }\n        } else {\n          res.push(value);\n        }\n        if (mathFunc.has(nest)) {\n          mathFunc.delete(nest);\n        }\n        nest--;\n        break;\n      }\n      case W_SPACE: {\n        if (res.length) {\n          const lastValue = res[res.length - 1];\n          if (!lastValue.endsWith(\"(\") && lastValue !== \" \") {\n            res.push(value);\n          }\n        }\n        break;\n      }\n      default: {\n        if (type !== COMMENT && type !== EOF) {\n          res.push(value);\n        }\n      }\n    }\n  }\n  return res;\n};\nconst cssCalc = (value, opt = {}) => {\n  const { format, dimension = {} } = opt;\n  if (common.isString(value)) {\n    if (REG_FN_VAR.test(value)) {\n      if (format === constant.VAL_SPEC) {\n        return value;\n      } else {\n        throw new SyntaxError(`Unexpected token ${constant.FN_VAR} found.`);\n      }\n    } else if (!REG_FN_MATH_CALC.test(value)) {\n      return value;\n    }\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string`);\n  }\n  let cacheKey;\n  if (typeof dimension.callback !== \"function\") {\n    cacheKey = `{cssCalc:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let resolvedValue;\n  if (dimension) {\n    const tokens = cssTokenizer.tokenize({ css: value });\n    const values = parseTokens(tokens, opt);\n    resolvedValue = cssCalc$1.calc(values.join(\"\"), {\n      toCanonicalUnits: true\n    });\n  } else {\n    resolvedValue = cssCalc$1.calc(value, {\n      toCanonicalUnits: true\n    });\n  }\n  if (REG_START_MATH_VAR.test(value)) {\n    if (REG_TYPE_DIM_PCT.test(resolvedValue)) {\n      const [, val, unit] = resolvedValue.match(REG_TYPE_DIM_PCT);\n      resolvedValue = `${util.roundToPrecision(Number(val), HEX)}${unit}`;\n    }\n    if (resolvedValue && !REG_START_MATH_VAR.test(resolvedValue) && format === constant.VAL_SPEC) {\n      resolvedValue = `calc(${resolvedValue})`;\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, resolvedValue);\n  }\n  return resolvedValue;\n};\nexports.Calculator = Calculator;\nexports.cachedResults = cachedResults;\nexports.cssCalc = cssCalc;\nexports.parseTokens = parseTokens;\nexports.resolveDimension = resolveDimension;\nexports.serializeCalc = serializeCalc;\nexports.sortCalcValues = sortCalcValues;\n//# sourceMappingURL=css-calc.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-var.cjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-var.cjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst cssTokenizer = __webpack_require__(/*! @csstools/css-tokenizer */ \"(ssr)/./node_modules/.pnpm/@csstools+css-tokenizer@3.0.3/node_modules/@csstools/css-tokenizer/dist/index.cjs\");\nconst lruCache = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/commonjs/index.js\");\nconst common = __webpack_require__(/*! ./common.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\");\nconst cssCalc = __webpack_require__(/*! ./css-calc.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs\");\nconst util = __webpack_require__(/*! ./util.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\");\nconst constant = __webpack_require__(/*! ./constant.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\");\nconst {\n  CloseParen: PAREN_CLOSE,\n  Comment: COMMENT,\n  EOF,\n  Ident: IDENT,\n  Whitespace: W_SPACE\n} = cssTokenizer.TokenType;\nconst REG_FN_MATH_CALC = new RegExp(constant.SYN_FN_MATH_CALC);\nconst REG_FN_VAR = new RegExp(constant.SYN_FN_VAR);\nconst cachedResults = new lruCache.LRUCache({\n  max: 4096\n});\nfunction resolveCustomProperty(tokens, opt = {}) {\n  if (!Array.isArray(tokens)) {\n    throw new TypeError(`${tokens} is not an array.`);\n  }\n  const { customProperty = {} } = opt;\n  const items = [];\n  while (tokens.length) {\n    const token = tokens.shift();\n    if (!Array.isArray(token)) {\n      throw new TypeError(`${token} is not an array.`);\n    }\n    const [type, value] = token;\n    if (type === PAREN_CLOSE) {\n      break;\n    }\n    if (value === constant.FN_VAR) {\n      const [restTokens, item] = resolveCustomProperty(tokens, opt);\n      tokens = restTokens;\n      if (item) {\n        items.push(item);\n      }\n    } else if (type === IDENT) {\n      if (value.startsWith(\"--\")) {\n        if (Object.hasOwnProperty.call(customProperty, value)) {\n          items.push(customProperty[value]);\n        } else if (typeof customProperty.callback === \"function\") {\n          const item = customProperty.callback(value);\n          if (item) {\n            items.push(item);\n          }\n        }\n      } else if (value) {\n        items.push(value);\n      }\n    }\n  }\n  let resolveAsColor;\n  if (items.length > 1) {\n    const lastValue = items[items.length - 1];\n    resolveAsColor = util.isColor(lastValue);\n  }\n  let resolvedValue;\n  for (let item of items) {\n    item = item.trim();\n    if (REG_FN_VAR.test(item)) {\n      item = cssVar(item, opt);\n      if (item) {\n        if (resolveAsColor) {\n          if (util.isColor(item)) {\n            resolvedValue = item;\n          }\n        } else {\n          resolvedValue = item;\n        }\n      }\n    } else if (REG_FN_MATH_CALC.test(item)) {\n      item = cssCalc.cssCalc(item, opt);\n      if (resolveAsColor) {\n        if (util.isColor(item)) {\n          resolvedValue = item;\n        }\n      } else {\n        resolvedValue = item;\n      }\n    } else if (item && !/^(?:inherit|initial|revert(?:-layer)?|unset)$/.test(item)) {\n      if (resolveAsColor) {\n        if (util.isColor(item)) {\n          resolvedValue = item;\n        }\n      } else {\n        resolvedValue = item;\n      }\n    }\n    if (resolvedValue) {\n      break;\n    }\n  }\n  return [tokens, resolvedValue];\n}\nfunction parseTokens(tokens, opt = {}) {\n  const res = [];\n  while (tokens.length) {\n    const token = tokens.shift();\n    const [type, value] = token;\n    if (value === constant.FN_VAR) {\n      const [restTokens, resolvedValue] = resolveCustomProperty(tokens, opt);\n      if (!resolvedValue) {\n        return null;\n      }\n      tokens = restTokens;\n      res.push(resolvedValue);\n    } else {\n      switch (type) {\n        case PAREN_CLOSE: {\n          if (res.length) {\n            const lastValue = res[res.length - 1];\n            if (lastValue === \" \") {\n              res.splice(-1, 1, value);\n            } else {\n              res.push(value);\n            }\n          } else {\n            res.push(value);\n          }\n          break;\n        }\n        case W_SPACE: {\n          if (res.length) {\n            const lastValue = res[res.length - 1];\n            if (!lastValue.endsWith(\"(\") && lastValue !== \" \") {\n              res.push(value);\n            }\n          }\n          break;\n        }\n        default: {\n          if (type !== COMMENT && type !== EOF) {\n            res.push(value);\n          }\n        }\n      }\n    }\n  }\n  return res;\n}\nfunction cssVar(value, opt = {}) {\n  const { customProperty = {}, format } = opt;\n  if (common.isString(value)) {\n    if (!REG_FN_VAR.test(value) || format === constant.VAL_SPEC) {\n      return value;\n    }\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  let cacheKey;\n  if (typeof customProperty.callback !== \"function\") {\n    cacheKey = `{cssVar:${value},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const tokens = cssTokenizer.tokenize({ css: value });\n  const values = parseTokens(tokens, opt);\n  if (Array.isArray(values)) {\n    let color = values.join(\"\");\n    if (REG_FN_MATH_CALC.test(color)) {\n      color = cssCalc.cssCalc(color, opt);\n    }\n    if (cacheKey) {\n      cachedResults.set(cacheKey, color);\n    }\n    return color;\n  } else {\n    if (cacheKey) {\n      cachedResults.set(cacheKey, null);\n    }\n    return null;\n  }\n}\nexports.cachedResults = cachedResults;\nexports.cssVar = cssVar;\nexports.parseTokens = parseTokens;\nexports.resolveCustomProperty = resolveCustomProperty;\n//# sourceMappingURL=css-var.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-var.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/relative-color.cjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/relative-color.cjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst cssColorParser = __webpack_require__(/*! @csstools/css-color-parser */ \"(ssr)/./node_modules/.pnpm/@csstools+css-color-parser@3.0.7_@csstools+css-parser-algorithms@3.0.4_@csstools+css-tokenize_ibxja5du4eckqjiltqinzz6xve/node_modules/@csstools/css-color-parser/dist/index.cjs\");\nconst cssParserAlgorithms = __webpack_require__(/*! @csstools/css-parser-algorithms */ \"(ssr)/./node_modules/.pnpm/@csstools+css-parser-algorithms@3.0.4_@csstools+css-tokenizer@3.0.3/node_modules/@csstools/css-parser-algorithms/dist/index.cjs\");\nconst cssTokenizer = __webpack_require__(/*! @csstools/css-tokenizer */ \"(ssr)/./node_modules/.pnpm/@csstools+css-tokenizer@3.0.3/node_modules/@csstools/css-tokenizer/dist/index.cjs\");\nconst lruCache = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/commonjs/index.js\");\nconst common = __webpack_require__(/*! ./common.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\");\nconst convert = __webpack_require__(/*! ./convert.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/convert.cjs\");\nconst cssCalc = __webpack_require__(/*! ./css-calc.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs\");\nconst resolve = __webpack_require__(/*! ./resolve.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/resolve.cjs\");\nconst util = __webpack_require__(/*! ./util.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\");\nconst constant = __webpack_require__(/*! ./constant.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\");\nconst color = __webpack_require__(/*! ./color.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/color.cjs\");\nconst {\n  CloseParen: PAREN_CLOSE,\n  Comment: COMMENT,\n  Dimension: DIM,\n  EOF,\n  Function: FUNC,\n  Ident: IDENT,\n  Number: NUM,\n  OpenParen: PAREN_OPEN,\n  Percentage: PCT,\n  Whitespace: W_SPACE\n} = cssTokenizer.TokenType;\nconst {\n  HasNoneKeywords: NONE_KEY\n} = cssColorParser.SyntaxFlag;\nconst OCT = 8;\nconst DEC = 10;\nconst HEX = 16;\nconst MAX_PCT = 100;\nconst MAX_RGB = 255;\nconst REG_COLOR_CAPT = new RegExp(\n  `^${constant.FN_REL}(${constant.SYN_COLOR_TYPE}|${constant.SYN_MIX})\\\\s+`\n);\nconst REG_CS_HSL = /(?:hsla?|hwb)$/;\nconst REG_CS_CIE = new RegExp(`^(?:${constant.CS_LAB}|${constant.CS_LCH})$`);\nconst REG_FN_VAR = new RegExp(constant.SYN_FN_VAR);\nconst REG_REL = new RegExp(constant.FN_REL);\nconst REG_REL_CAPT = new RegExp(`^${constant.FN_REL_CAPT}`);\nconst REG_START_MATH = new RegExp(constant.SYN_FN_MATH);\nconst REG_START_REL = new RegExp(`^${constant.FN_REL}`);\nconst cachedResults = new lruCache.LRUCache({\n  max: 4096\n});\nfunction resolveColorChannels(tokens, opt = {}) {\n  if (!Array.isArray(tokens)) {\n    throw new TypeError(`${tokens} is not an array.`);\n  }\n  const { colorSpace, format } = opt;\n  const colorChannels = /* @__PURE__ */ new Map([\n    [\"color\", [\"r\", \"g\", \"b\", \"alpha\"]],\n    [\"hsl\", [\"h\", \"s\", \"l\", \"alpha\"]],\n    [\"hsla\", [\"h\", \"s\", \"l\", \"alpha\"]],\n    [\"hwb\", [\"h\", \"w\", \"b\", \"alpha\"]],\n    [\"lab\", [\"l\", \"a\", \"b\", \"alpha\"]],\n    [\"lch\", [\"l\", \"c\", \"h\", \"alpha\"]],\n    [\"oklab\", [\"l\", \"a\", \"b\", \"alpha\"]],\n    [\"oklch\", [\"l\", \"c\", \"h\", \"alpha\"]],\n    [\"rgb\", [\"r\", \"g\", \"b\", \"alpha\"]],\n    [\"rgba\", [\"r\", \"g\", \"b\", \"alpha\"]]\n  ]);\n  const colorChannel = colorChannels.get(colorSpace);\n  const mathFunc = /* @__PURE__ */ new Set();\n  const channels = [[], [], [], []];\n  let i = 0;\n  let nest = 0;\n  let func = false;\n  while (tokens.length) {\n    const token = tokens.shift();\n    if (!Array.isArray(token)) {\n      throw new TypeError(`${token} is not an array.`);\n    }\n    const [type, value, , , detail = {}] = token;\n    const numValue = detail == null ? void 0 : detail.value;\n    const channel = channels[i];\n    switch (type) {\n      case DIM: {\n        let resolvedValue = cssCalc.resolveDimension(token, opt);\n        if (!resolvedValue) {\n          resolvedValue = value;\n        }\n        channel.push(resolvedValue);\n        break;\n      }\n      case FUNC: {\n        channel.push(value);\n        func = true;\n        nest++;\n        if (REG_START_MATH.test(value)) {\n          mathFunc.add(nest);\n        }\n        break;\n      }\n      case IDENT: {\n        if (!colorChannel || !colorChannel.includes(value)) {\n          return null;\n        }\n        channel.push(value);\n        if (!func) {\n          i++;\n        }\n        break;\n      }\n      case NUM: {\n        const n = numValue ?? parseFloat(value);\n        channel.push(n);\n        if (!func) {\n          i++;\n        }\n        break;\n      }\n      case PAREN_OPEN: {\n        channel.push(value);\n        nest++;\n        break;\n      }\n      case PAREN_CLOSE: {\n        if (func) {\n          const lastValue = channel[channel.length - 1];\n          if (lastValue === \" \") {\n            channel.splice(-1, 1, value);\n          } else {\n            channel.push(value);\n          }\n          if (mathFunc.has(nest)) {\n            mathFunc.delete(nest);\n          }\n          nest--;\n          if (nest === 0) {\n            func = false;\n            i++;\n          }\n        }\n        break;\n      }\n      case PCT: {\n        const n = numValue ?? parseFloat(value);\n        channel.push(n / MAX_PCT);\n        if (!func) {\n          i++;\n        }\n        break;\n      }\n      case W_SPACE: {\n        if (channel.length && func) {\n          const lastValue = channel[channel.length - 1];\n          if (typeof lastValue === \"number\") {\n            channel.push(value);\n          } else if (common.isString(lastValue) && !lastValue.endsWith(\"(\") && lastValue !== \" \") {\n            channel.push(value);\n          }\n        }\n        break;\n      }\n      default: {\n        if (type !== COMMENT && type !== EOF && func) {\n          channel.push(value);\n        }\n      }\n    }\n  }\n  const channelValues = [];\n  for (const channel of channels) {\n    if (channel.length === 1) {\n      const [resolvedValue] = channel;\n      channelValues.push(resolvedValue);\n    } else if (channel.length) {\n      const resolvedValue = cssCalc.serializeCalc(channel.join(\"\"), {\n        format\n      });\n      if (resolvedValue) {\n        channelValues.push(resolvedValue);\n      } else {\n        return null;\n      }\n    }\n  }\n  return channelValues;\n}\nfunction extractOriginColor(value, opt = {}) {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n    if (!value) {\n      return null;\n    }\n    if (!REG_START_REL.test(value)) {\n      return value;\n    }\n  } else {\n    return null;\n  }\n  const { currentColor, format } = opt;\n  const cacheKey = `{preProcess:${value},opt:${util.valueToJsonString(opt)}}`;\n  if (cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  if (/currentcolor/.test(value)) {\n    if (currentColor) {\n      value = value.replace(/currentcolor/g, currentColor);\n    } else {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, null);\n      }\n      return null;\n    }\n  }\n  const cs = value.match(REG_REL_CAPT);\n  let colorSpace;\n  if (cs) {\n    [, colorSpace] = cs;\n  } else {\n    return null;\n  }\n  opt.colorSpace = colorSpace;\n  if (REG_COLOR_CAPT.test(value)) {\n    const [, originColor] = value.match(REG_COLOR_CAPT);\n    const [, restValue] = value.split(originColor);\n    if (/^[a-z]+$/.test(originColor)) {\n      if (!/^transparent$/.test(originColor) && !Object.prototype.hasOwnProperty.call(color.NAMED_COLORS, originColor)) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n    } else if (format === constant.VAL_SPEC) {\n      const resolvedOriginColor = resolve.resolve(originColor, opt);\n      value = value.replace(originColor, resolvedOriginColor);\n    }\n    if (format === constant.VAL_SPEC) {\n      const tokens = cssTokenizer.tokenize({ css: restValue });\n      const channelValues = resolveColorChannels(tokens, opt);\n      if (!Array.isArray(channelValues)) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      let channelValue;\n      if (channelValues.length === 3) {\n        channelValue = ` ${channelValues.join(\" \")})`;\n      } else {\n        const [v1, v2, v3, v4] = channelValues;\n        channelValue = ` ${v1} ${v2} ${v3} / ${v4})`;\n      }\n      value = value.replace(restValue, channelValue);\n    }\n  } else {\n    const [, restValue] = value.split(REG_START_REL);\n    if (REG_START_REL.test(restValue)) {\n      const tokens = cssTokenizer.tokenize({ css: restValue });\n      const originColor = [];\n      let nest = 0;\n      while (tokens.length) {\n        const token = tokens.shift();\n        const [type, tokenValue] = token;\n        switch (type) {\n          case FUNC:\n          case PAREN_OPEN: {\n            originColor.push(tokenValue);\n            nest++;\n            break;\n          }\n          case PAREN_CLOSE: {\n            const lastValue = originColor[originColor.length - 1];\n            if (lastValue === \" \") {\n              originColor.splice(-1, 1, tokenValue);\n            } else {\n              originColor.push(tokenValue);\n            }\n            nest--;\n            break;\n          }\n          case W_SPACE: {\n            const lastValue = originColor[originColor.length - 1];\n            if (!lastValue.endsWith(\"(\") && lastValue !== \" \") {\n              originColor.push(tokenValue);\n            }\n            break;\n          }\n          default: {\n            if (type !== COMMENT && type !== EOF) {\n              originColor.push(tokenValue);\n            }\n          }\n        }\n        if (nest === 0) {\n          break;\n        }\n      }\n      const resolvedOriginColor = resolveRelativeColor(\n        originColor.join(\"\").trim(),\n        opt\n      );\n      if (!resolvedOriginColor) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      const channelValues = resolveColorChannels(tokens, opt);\n      if (!Array.isArray(channelValues)) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      let channelValue;\n      if (channelValues.length === 3) {\n        channelValue = ` ${channelValues.join(\" \")})`;\n      } else {\n        const [v1, v2, v3, v4] = channelValues;\n        channelValue = ` ${v1} ${v2} ${v3} / ${v4})`;\n      }\n      value = value.replace(restValue, `${resolvedOriginColor}${channelValue}`);\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, value);\n  }\n  return value;\n}\nfunction resolveRelativeColor(value, opt = {}) {\n  const { format } = opt;\n  if (common.isString(value)) {\n    if (REG_FN_VAR.test(value)) {\n      if (format === constant.VAL_SPEC) {\n        return value;\n      } else {\n        throw new SyntaxError(`Unexpected token ${constant.FN_VAR} found.`);\n      }\n    } else if (!REG_REL.test(value)) {\n      return value;\n    }\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string`);\n  }\n  const cacheKey = `{relativeColor:${value},opt:${util.valueToJsonString(opt)}}`;\n  if (cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  const originColor = extractOriginColor(value, opt);\n  if (originColor) {\n    value = originColor;\n  } else {\n    if (cacheKey) {\n      cachedResults.set(cacheKey, null);\n    }\n    return null;\n  }\n  if (format === constant.VAL_SPEC) {\n    if (value.startsWith(\"rgba(\")) {\n      value = value.replace(/^rgba\\(/, \"rgb(\");\n    } else if (value.startsWith(\"hsla(\")) {\n      value = value.replace(/^hsla\\(/, \"hsl(\");\n    }\n    return value;\n  }\n  const tokens = cssTokenizer.tokenize({ css: value });\n  const components = cssParserAlgorithms.parseComponentValue(tokens);\n  const parsedComponents = cssColorParser.color(components);\n  if (!parsedComponents) {\n    if (cacheKey) {\n      cachedResults.set(cacheKey, null);\n    }\n    return null;\n  }\n  const {\n    alpha: alphaComponent,\n    channels: channelsComponent,\n    colorNotation,\n    syntaxFlags\n  } = parsedComponents;\n  let alpha;\n  if (Number.isNaN(Number(alphaComponent))) {\n    if (syntaxFlags instanceof Set && syntaxFlags.has(NONE_KEY)) {\n      alpha = constant.NONE;\n    } else {\n      alpha = 0;\n    }\n  } else {\n    alpha = util.roundToPrecision(alphaComponent, OCT);\n  }\n  let v1;\n  let v2;\n  let v3;\n  [v1, v2, v3] = channelsComponent;\n  let resolvedValue;\n  if (REG_CS_CIE.test(colorNotation)) {\n    const hasNone = syntaxFlags instanceof Set && syntaxFlags.has(NONE_KEY);\n    if (Number.isNaN(v1)) {\n      if (hasNone) {\n        v1 = constant.NONE;\n      } else {\n        v1 = 0;\n      }\n    } else {\n      v1 = util.roundToPrecision(v1, HEX);\n    }\n    if (Number.isNaN(v2)) {\n      if (hasNone) {\n        v2 = constant.NONE;\n      } else {\n        v2 = 0;\n      }\n    } else {\n      v2 = util.roundToPrecision(v2, HEX);\n    }\n    if (Number.isNaN(v3)) {\n      if (hasNone) {\n        v3 = constant.NONE;\n      } else {\n        v3 = 0;\n      }\n    } else {\n      v3 = util.roundToPrecision(v3, HEX);\n    }\n    if (alpha === 1) {\n      resolvedValue = `${colorNotation}(${v1} ${v2} ${v3})`;\n    } else {\n      resolvedValue = `${colorNotation}(${v1} ${v2} ${v3} / ${alpha})`;\n    }\n  } else if (REG_CS_HSL.test(colorNotation)) {\n    if (Number.isNaN(v1)) {\n      v1 = 0;\n    }\n    if (Number.isNaN(v2)) {\n      v2 = 0;\n    }\n    if (Number.isNaN(v3)) {\n      v3 = 0;\n    }\n    let [r, g, b] = convert.colorToRgb(\n      `${colorNotation}(${v1} ${v2} ${v3} / ${alpha})`\n    );\n    r = util.roundToPrecision(r / MAX_RGB, DEC);\n    g = util.roundToPrecision(g / MAX_RGB, DEC);\n    b = util.roundToPrecision(b / MAX_RGB, DEC);\n    if (alpha === 1) {\n      resolvedValue = `color(srgb ${r} ${g} ${b})`;\n    } else {\n      resolvedValue = `color(srgb ${r} ${g} ${b} / ${alpha})`;\n    }\n  } else {\n    const cs = colorNotation === \"rgb\" ? \"srgb\" : colorNotation;\n    const hasNone = syntaxFlags instanceof Set && syntaxFlags.has(NONE_KEY);\n    if (Number.isNaN(v1)) {\n      if (hasNone) {\n        v1 = constant.NONE;\n      } else {\n        v1 = 0;\n      }\n    } else {\n      v1 = util.roundToPrecision(v1, DEC);\n    }\n    if (Number.isNaN(v2)) {\n      if (hasNone) {\n        v2 = constant.NONE;\n      } else {\n        v2 = 0;\n      }\n    } else {\n      v2 = util.roundToPrecision(v2, DEC);\n    }\n    if (Number.isNaN(v3)) {\n      if (hasNone) {\n        v3 = constant.NONE;\n      } else {\n        v3 = 0;\n      }\n    } else {\n      v3 = util.roundToPrecision(v3, DEC);\n    }\n    if (alpha === 1) {\n      resolvedValue = `color(${cs} ${v1} ${v2} ${v3})`;\n    } else {\n      resolvedValue = `color(${cs} ${v1} ${v2} ${v3} / ${alpha})`;\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, resolvedValue);\n  }\n  return resolvedValue;\n}\nexports.cachedResults = cachedResults;\nexports.extractOriginColor = extractOriginColor;\nexports.resolveColorChannels = resolveColorChannels;\nexports.resolveRelativeColor = resolveRelativeColor;\n//# sourceMappingURL=relative-color.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/relative-color.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/resolve.cjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/resolve.cjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst lruCache = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/commonjs/index.js\");\nconst color = __webpack_require__(/*! ./color.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/color.cjs\");\nconst common = __webpack_require__(/*! ./common.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\");\nconst cssCalc = __webpack_require__(/*! ./css-calc.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-calc.cjs\");\nconst cssVar = __webpack_require__(/*! ./css-var.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/css-var.cjs\");\nconst relativeColor = __webpack_require__(/*! ./relative-color.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/relative-color.cjs\");\nconst util = __webpack_require__(/*! ./util.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\");\nconst constant = __webpack_require__(/*! ./constant.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\");\nconst RGB_TRANSPARENT = \"rgba(0, 0, 0, 0)\";\nconst REG_FN_MATH_CALC = new RegExp(constant.SYN_FN_MATH_CALC);\nconst REG_FN_REL = new RegExp(constant.SYN_FN_REL);\nconst REG_FN_VAR = new RegExp(constant.SYN_FN_VAR);\nconst cachedResults = new lruCache.LRUCache({\n  max: 4096\n});\nconst resolve = (color$1, opt = {}) => {\n  if (common.isString(color$1)) {\n    color$1 = color$1.trim();\n  } else {\n    throw new TypeError(`${color$1} is not a string.`);\n  }\n  const { currentColor, customProperty = {}, format = constant.VAL_COMP, key } = opt;\n  let cacheKey;\n  if (!REG_FN_VAR.test(color$1) || typeof customProperty.callback === \"function\") {\n    cacheKey = `{resolve:${color$1},opt:${util.valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let res, cs, r, g, b, alpha;\n  if (REG_FN_VAR.test(color$1)) {\n    if (format === constant.VAL_SPEC) {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, color$1);\n      }\n      return color$1;\n    }\n    const resolvedColor = cssVar.cssVar(color$1, opt);\n    if (resolvedColor) {\n      color$1 = resolvedColor;\n    } else {\n      switch (format) {\n        case \"hex\":\n        case \"hexAlpha\": {\n          if (cacheKey) {\n            cachedResults.set(cacheKey, null);\n          }\n          return null;\n        }\n        default: {\n          res = RGB_TRANSPARENT;\n          if (cacheKey) {\n            cachedResults.set(cacheKey, res);\n          }\n          return res;\n        }\n      }\n    }\n  }\n  if (opt.format !== format) {\n    opt.format = format;\n  }\n  color$1 = color$1.toLowerCase();\n  if (REG_FN_REL.test(color$1)) {\n    const resolvedColor = relativeColor.resolveRelativeColor(color$1, opt);\n    if (format === constant.VAL_COMP) {\n      if (resolvedColor) {\n        res = resolvedColor;\n      } else {\n        res = RGB_TRANSPARENT;\n      }\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n    if (format === constant.VAL_SPEC) {\n      if (resolvedColor) {\n        res = resolvedColor;\n      } else {\n        res = \"\";\n      }\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n    if (resolvedColor) {\n      color$1 = resolvedColor;\n    } else {\n      color$1 = \"\";\n    }\n  }\n  if (REG_FN_MATH_CALC.test(color$1)) {\n    const resolvedColor = cssCalc.cssCalc(color$1, opt);\n    if (resolvedColor) {\n      color$1 = resolvedColor;\n    } else {\n      color$1 = \"\";\n    }\n  }\n  if (color$1 === \"transparent\") {\n    switch (format) {\n      case constant.VAL_SPEC: {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, color$1);\n        }\n        return color$1;\n      }\n      case \"hex\": {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      case \"hexAlpha\": {\n        res = \"#00000000\";\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n      case constant.VAL_COMP:\n      default: {\n        res = RGB_TRANSPARENT;\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n    }\n  } else if (color$1 === \"currentcolor\") {\n    if (format === constant.VAL_SPEC) {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, color$1);\n      }\n      return color$1;\n    }\n    if (currentColor) {\n      if (currentColor.startsWith(constant.FN_MIX)) {\n        [cs, r, g, b, alpha] = color.resolveColorMix(currentColor, opt);\n      } else if (currentColor.startsWith(constant.FN_COLOR)) {\n        [cs, r, g, b, alpha] = color.resolveColorFunc(currentColor, opt);\n      } else {\n        [cs, r, g, b, alpha] = color.resolveColorValue(currentColor, opt);\n      }\n    } else if (format === constant.VAL_COMP) {\n      res = RGB_TRANSPARENT;\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n  } else if (format === constant.VAL_SPEC) {\n    if (color$1.startsWith(constant.FN_MIX)) {\n      res = color.resolveColorMix(color$1, opt);\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    } else if (color$1.startsWith(constant.FN_COLOR)) {\n      [cs, r, g, b, alpha] = color.resolveColorFunc(color$1, opt);\n      if (alpha === 1) {\n        res = `color(${cs} ${r} ${g} ${b})`;\n      } else {\n        res = `color(${cs} ${r} ${g} ${b} / ${alpha})`;\n      }\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    } else {\n      const rgb = color.resolveColorValue(color$1, opt);\n      if (!rgb) {\n        res = \"\";\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n      [cs, r, g, b, alpha] = rgb;\n      if (cs === \"rgb\") {\n        if (alpha === 1) {\n          res = `${cs}(${r}, ${g}, ${b})`;\n        } else {\n          res = `${cs}a(${r}, ${g}, ${b}, ${alpha})`;\n        }\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n      if (alpha === 1) {\n        res = `${cs}(${r} ${g} ${b})`;\n      } else {\n        res = `${cs}(${r} ${g} ${b} / ${alpha})`;\n      }\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n  } else if (/currentcolor/.test(color$1)) {\n    if (currentColor) {\n      color$1 = color$1.replace(/currentcolor/g, currentColor);\n    }\n    if (/transparent/.test(color$1)) {\n      color$1 = color$1.replace(/transparent/g, RGB_TRANSPARENT);\n    }\n    if (color$1.startsWith(constant.FN_MIX)) {\n      [cs, r, g, b, alpha] = color.resolveColorMix(color$1, opt);\n    }\n  } else if (/transparent/.test(color$1)) {\n    color$1 = color$1.replace(/transparent/g, RGB_TRANSPARENT);\n    if (color$1.startsWith(constant.FN_MIX)) {\n      [cs, r, g, b, alpha] = color.resolveColorMix(color$1, opt);\n    }\n  } else if (color$1.startsWith(constant.FN_MIX)) {\n    [cs, r, g, b, alpha] = color.resolveColorMix(color$1, opt);\n  } else if (color$1.startsWith(constant.FN_COLOR)) {\n    [cs, r, g, b, alpha] = color.resolveColorFunc(color$1, opt);\n  } else if (color$1) {\n    [cs, r, g, b, alpha] = color.resolveColorValue(color$1, opt);\n  }\n  switch (format) {\n    case \"hex\": {\n      let hex;\n      if (isNaN(r) || isNaN(g) || isNaN(b) || isNaN(alpha) || alpha === 0) {\n        hex = null;\n      } else {\n        hex = color.convertRgbToHex([r, g, b]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    case \"hexAlpha\": {\n      let hex;\n      if (isNaN(r) || isNaN(g) || isNaN(b) || isNaN(alpha)) {\n        hex = null;\n      } else {\n        hex = color.convertRgbToHex([\n          r,\n          g,\n          b,\n          alpha\n        ]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    case constant.VAL_COMP:\n    default: {\n      let value;\n      switch (cs) {\n        case \"rgb\": {\n          if (alpha === 1) {\n            value = `${cs}(${r}, ${g}, ${b})`;\n          } else {\n            value = `${cs}a(${r}, ${g}, ${b}, ${alpha})`;\n          }\n          break;\n        }\n        case \"lab\":\n        case \"lch\":\n        case \"oklab\":\n        case \"oklch\": {\n          if (alpha === 1) {\n            value = `${cs}(${r} ${g} ${b})`;\n          } else {\n            value = `${cs}(${r} ${g} ${b} / ${alpha})`;\n          }\n          break;\n        }\n        // color()\n        default: {\n          if (alpha === 1) {\n            value = `color(${cs} ${r} ${g} ${b})`;\n          } else {\n            value = `color(${cs} ${r} ${g} ${b} / ${alpha})`;\n          }\n        }\n      }\n      if (key) {\n        res = [key, value];\n      } else {\n        res = value;\n      }\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, res);\n  }\n  return res;\n};\nexports.cachedResults = cachedResults;\nexports.resolve = resolve;\n//# sourceMappingURL=resolve.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/resolve.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst common = __webpack_require__(/*! ./common.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/common.cjs\");\nconst resolve = __webpack_require__(/*! ./resolve.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/resolve.cjs\");\nconst color = __webpack_require__(/*! ./color.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/color.cjs\");\nconst constant = __webpack_require__(/*! ./constant.cjs */ \"(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/constant.cjs\");\nconst DEC = 10;\nconst HEX = 16;\nconst DEG = 360;\nconst DEG_HALF = 180;\nconst REG_COLOR = new RegExp(`^(?:${constant.SYN_COLOR_TYPE})$`);\nconst REG_MIX = new RegExp(`${constant.SYN_MIX}`);\nconst isColor = (value) => {\n  if (common.isString(value)) {\n    value = value.toLowerCase().trim();\n    if (value) {\n      if (/^[a-z]+$/.test(value)) {\n        if (/^(?:currentcolor|transparent)$/.test(value) || Object.prototype.hasOwnProperty.call(color.NAMED_COLORS, value)) {\n          return true;\n        }\n      } else if (REG_COLOR.test(value) || REG_MIX.test(value)) {\n        return true;\n      } else {\n        const resolvedValue = resolve.resolve(value, {\n          format: constant.VAL_SPEC\n        });\n        if (resolvedValue) {\n          return true;\n        }\n        return false;\n      }\n    }\n  }\n  return false;\n};\nconst valueToJsonString = (value, func = false) => {\n  if (typeof value === \"undefined\") {\n    return \"\";\n  }\n  const res = JSON.stringify(value, (_key, val) => {\n    let replacedValue;\n    if (typeof val === \"undefined\") {\n      replacedValue = null;\n    } else if (typeof val === \"function\") {\n      if (func) {\n        replacedValue = val.toString();\n      } else {\n        replacedValue = val.name;\n      }\n    } else if (val instanceof Map || val instanceof Set) {\n      replacedValue = [...val];\n    } else if (typeof val === \"bigint\") {\n      replacedValue = val.toString();\n    } else {\n      replacedValue = val;\n    }\n    return replacedValue;\n  });\n  return res;\n};\nconst roundToPrecision = (value, bit = 0) => {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`${value} is not a number.`);\n  }\n  if (!Number.isFinite(bit)) {\n    throw new TypeError(`${bit} is not a number.`);\n  } else if (bit < 0 || bit > HEX) {\n    throw new RangeError(`${bit} is not between 0 and ${HEX}.`);\n  }\n  if (bit === 0) {\n    return Math.round(value);\n  }\n  let val;\n  if (bit === HEX) {\n    val = value.toPrecision(6);\n  } else if (bit < DEC) {\n    val = value.toPrecision(4);\n  } else {\n    val = value.toPrecision(5);\n  }\n  return parseFloat(val);\n};\nconst interpolateHue = (hueA, hueB, arc = \"shorter\") => {\n  if (!Number.isFinite(hueA)) {\n    throw new TypeError(`${hueA} is not a number.`);\n  }\n  if (!Number.isFinite(hueB)) {\n    throw new TypeError(`${hueB} is not a number.`);\n  }\n  switch (arc) {\n    case \"decreasing\": {\n      if (hueB > hueA) {\n        hueA += DEG;\n      }\n      break;\n    }\n    case \"increasing\": {\n      if (hueB < hueA) {\n        hueB += DEG;\n      }\n      break;\n    }\n    case \"longer\": {\n      if (hueB > hueA && hueB < hueA + DEG_HALF) {\n        hueA += DEG;\n      } else if (hueB > hueA + DEG_HALF * -1 && hueB <= hueA) {\n        hueB += DEG;\n      }\n      break;\n    }\n    case \"shorter\":\n    default: {\n      if (hueB > hueA + DEG_HALF) {\n        hueA += DEG;\n      } else if (hueB < hueA + DEG_HALF * -1) {\n        hueB += DEG;\n      }\n    }\n  }\n  return [hueA, hueB];\n};\nexports.interpolateHue = interpolateHue;\nexports.isColor = isColor;\nexports.roundToPrecision = roundToPrecision;\nexports.valueToJsonString = valueToJsonString;\n//# sourceMappingURL=util.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFzYW11emFranArY3NzLWNvbG9yQDIuOC4zL25vZGVfbW9kdWxlcy9AYXNhbXV6YWtqcC9jc3MtY29sb3IvZGlzdC9janMvanMvdXRpbC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixxREFBcUQsaUJBQWlCO0FBQ3RFLGVBQWUsbUJBQU8sQ0FBQyxzSUFBYztBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3SUFBZTtBQUN2QyxjQUFjLG1CQUFPLENBQUMsb0lBQWE7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMElBQWdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHdCQUF3QjtBQUM1RCw4QkFBOEIsaUJBQWlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0EsMkJBQTJCLEtBQUs7QUFDaEMsSUFBSTtBQUNKLDRCQUE0QixLQUFLLHVCQUF1QixJQUFJO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixNQUFNO0FBQ2pDO0FBQ0E7QUFDQSwyQkFBMkIsTUFBTTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLGVBQWU7QUFDZix3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvZnVqaWF3YW5nL0Rlc2t0b3AvY2hhdGJvdC9ub2RlX21vZHVsZXMvLnBucG0vQGFzYW11emFranArY3NzLWNvbG9yQDIuOC4zL25vZGVfbW9kdWxlcy9AYXNhbXV6YWtqcC9jc3MtY29sb3IvZGlzdC9janMvanMvdXRpbC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcIk1vZHVsZVwiIH0pO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZShcIi4vY29tbW9uLmNqc1wiKTtcbmNvbnN0IHJlc29sdmUgPSByZXF1aXJlKFwiLi9yZXNvbHZlLmNqc1wiKTtcbmNvbnN0IGNvbG9yID0gcmVxdWlyZShcIi4vY29sb3IuY2pzXCIpO1xuY29uc3QgY29uc3RhbnQgPSByZXF1aXJlKFwiLi9jb25zdGFudC5janNcIik7XG5jb25zdCBERUMgPSAxMDtcbmNvbnN0IEhFWCA9IDE2O1xuY29uc3QgREVHID0gMzYwO1xuY29uc3QgREVHX0hBTEYgPSAxODA7XG5jb25zdCBSRUdfQ09MT1IgPSBuZXcgUmVnRXhwKGBeKD86JHtjb25zdGFudC5TWU5fQ09MT1JfVFlQRX0pJGApO1xuY29uc3QgUkVHX01JWCA9IG5ldyBSZWdFeHAoYCR7Y29uc3RhbnQuU1lOX01JWH1gKTtcbmNvbnN0IGlzQ29sb3IgPSAodmFsdWUpID0+IHtcbiAgaWYgKGNvbW1vbi5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKC9eW2Etel0rJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKC9eKD86Y3VycmVudGNvbG9yfHRyYW5zcGFyZW50KSQvLnRlc3QodmFsdWUpIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb2xvci5OQU1FRF9DT0xPUlMsIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFJFR19DT0xPUi50ZXN0KHZhbHVlKSB8fCBSRUdfTUlYLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRWYWx1ZSA9IHJlc29sdmUucmVzb2x2ZSh2YWx1ZSwge1xuICAgICAgICAgIGZvcm1hdDogY29uc3RhbnQuVkFMX1NQRUNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNvbHZlZFZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3QgdmFsdWVUb0pzb25TdHJpbmcgPSAodmFsdWUsIGZ1bmMgPSBmYWxzZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgY29uc3QgcmVzID0gSlNPTi5zdHJpbmdpZnkodmFsdWUsIChfa2V5LCB2YWwpID0+IHtcbiAgICBsZXQgcmVwbGFjZWRWYWx1ZTtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmVwbGFjZWRWYWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmIChmdW5jKSB7XG4gICAgICAgIHJlcGxhY2VkVmFsdWUgPSB2YWwudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcGxhY2VkVmFsdWUgPSB2YWwubmFtZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIE1hcCB8fCB2YWwgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgIHJlcGxhY2VkVmFsdWUgPSBbLi4udmFsXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgIHJlcGxhY2VkVmFsdWUgPSB2YWwudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwbGFjZWRWYWx1ZSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcGxhY2VkVmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IHJvdW5kVG9QcmVjaXNpb24gPSAodmFsdWUsIGJpdCA9IDApID0+IHtcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt2YWx1ZX0gaXMgbm90IGEgbnVtYmVyLmApO1xuICB9XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKGJpdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2JpdH0gaXMgbm90IGEgbnVtYmVyLmApO1xuICB9IGVsc2UgaWYgKGJpdCA8IDAgfHwgYml0ID4gSEVYKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCR7Yml0fSBpcyBub3QgYmV0d2VlbiAwIGFuZCAke0hFWH0uYCk7XG4gIH1cbiAgaWYgKGJpdCA9PT0gMCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgfVxuICBsZXQgdmFsO1xuICBpZiAoYml0ID09PSBIRVgpIHtcbiAgICB2YWwgPSB2YWx1ZS50b1ByZWNpc2lvbig2KTtcbiAgfSBlbHNlIGlmIChiaXQgPCBERUMpIHtcbiAgICB2YWwgPSB2YWx1ZS50b1ByZWNpc2lvbig0KTtcbiAgfSBlbHNlIHtcbiAgICB2YWwgPSB2YWx1ZS50b1ByZWNpc2lvbig1KTtcbiAgfVxuICByZXR1cm4gcGFyc2VGbG9hdCh2YWwpO1xufTtcbmNvbnN0IGludGVycG9sYXRlSHVlID0gKGh1ZUEsIGh1ZUIsIGFyYyA9IFwic2hvcnRlclwiKSA9PiB7XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKGh1ZUEpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtodWVBfSBpcyBub3QgYSBudW1iZXIuYCk7XG4gIH1cbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaHVlQikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2h1ZUJ9IGlzIG5vdCBhIG51bWJlci5gKTtcbiAgfVxuICBzd2l0Y2ggKGFyYykge1xuICAgIGNhc2UgXCJkZWNyZWFzaW5nXCI6IHtcbiAgICAgIGlmIChodWVCID4gaHVlQSkge1xuICAgICAgICBodWVBICs9IERFRztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5jcmVhc2luZ1wiOiB7XG4gICAgICBpZiAoaHVlQiA8IGh1ZUEpIHtcbiAgICAgICAgaHVlQiArPSBERUc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImxvbmdlclwiOiB7XG4gICAgICBpZiAoaHVlQiA+IGh1ZUEgJiYgaHVlQiA8IGh1ZUEgKyBERUdfSEFMRikge1xuICAgICAgICBodWVBICs9IERFRztcbiAgICAgIH0gZWxzZSBpZiAoaHVlQiA+IGh1ZUEgKyBERUdfSEFMRiAqIC0xICYmIGh1ZUIgPD0gaHVlQSkge1xuICAgICAgICBodWVCICs9IERFRztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic2hvcnRlclwiOlxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGlmIChodWVCID4gaHVlQSArIERFR19IQUxGKSB7XG4gICAgICAgIGh1ZUEgKz0gREVHO1xuICAgICAgfSBlbHNlIGlmIChodWVCIDwgaHVlQSArIERFR19IQUxGICogLTEpIHtcbiAgICAgICAgaHVlQiArPSBERUc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbaHVlQSwgaHVlQl07XG59O1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUh1ZSA9IGludGVycG9sYXRlSHVlO1xuZXhwb3J0cy5pc0NvbG9yID0gaXNDb2xvcjtcbmV4cG9ydHMucm91bmRUb1ByZWNpc2lvbiA9IHJvdW5kVG9QcmVjaXNpb247XG5leHBvcnRzLnZhbHVlVG9Kc29uU3RyaW5nID0gdmFsdWVUb0pzb25TdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@asamuzakjp+css-color@2.8.3/node_modules/@asamuzakjp/css-color/dist/cjs/js/util.cjs\n");

/***/ })

};
;