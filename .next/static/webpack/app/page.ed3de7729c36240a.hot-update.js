"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/utils/pokeUtils.ts":
/*!********************************!*\
  !*** ./app/utils/pokeUtils.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   burnPokeCoin: () => (/* binding */ burnPokeCoin),\n/* harmony export */   checkPokeCoinBalance: () => (/* binding */ checkPokeCoinBalance),\n/* harmony export */   checkPokeCoinBalanceAlternative: () => (/* binding */ checkPokeCoinBalanceAlternative)\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"(app-pages-browser)/./node_modules/.pnpm/aptos@1.21.0/node_modules/aptos/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ checkPokeCoinBalance,burnPokeCoin,checkPokeCoinBalanceAlternative auto */ \n// PokeCoin module address\nconst POKECOIN_ADDRESS = \"0x066ebb982c492c0d5b1f2b8089756f83fd31d4516cd9a1fc0b63b4961e4eeafd\";\n// Use mainnet instead of testnet\nconst NODE_URL = \"https://api.mainnet.aptoslabs.com/v1\";\n/**\n * Check if a wallet has enough PokeCoin balance (as a fungible asset)\n */ async function checkPokeCoinBalance(walletAddress) {\n    try {\n        console.log(\"Checking PokeCoin balance for wallet:\", walletAddress);\n        // For fungible assets, we need to check the FungibleAssetStore\n        const resourceType = \"0x1::fungible_asset::FungibleStore\";\n        // const resourceType = `0x1::fungible_asset::Balance<${POKECOIN_ADDRESS}`;\n        // const response = await fetch(`${NODE_URL}/accounts/${walletAddress}/resource/${resourceType}`);\n        // const resourceData = await response.json();\n        // const balance = resourceData?.data?.amount ?? 0;\n        // return Number(balance);\n        // Get all resources for the account\n        const response = await fetch(\"\".concat(NODE_URL, \"/accounts/\").concat(walletAddress, \"/resources\"));\n        console.log(\"Resources response status:\", response.status);\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const resources = await response.json();\n        console.log(\"Found \".concat(resources.length, \" resources\"));\n        const a = await fetch(\"\".concat(NODE_URL, \"/accounts/\").concat(walletAddress, \"/balance/\").concat(resourceType));\n        console.log(\"nasjnkajnskjansa\", a);\n        const b = await a.json();\n        console.log(\"Found \".concat(b, \" PokeCoin\"));\n        // Find the fungible asset store for PokeCoin\n        let balance = 0;\n        for (const resource of resources){\n            if (resource.type.startsWith(resourceType)) {\n                // Check if this store contains our PokeCoin asset\n                try {\n                    // Get the metadata to check if this is PokeCoin\n                    const metadataResponse = await fetch(\"\".concat(NODE_URL, \"/fungible_asset_metadata/\").concat(resource.data.metadata));\n                    if (metadataResponse.ok) {\n                        const metadata = await metadataResponse.json();\n                        // Check if this is our PokeCoin\n                        if (metadata.creator === POKECOIN_ADDRESS) {\n                            balance = parseInt(resource.data.balance);\n                            console.log(\"Found PokeCoin balance:\", balance);\n                            break;\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Error checking asset metadata:\", error);\n                }\n            }\n        }\n        // If we didn't find it through resources, try the alternative method\n        if (balance === 0) {\n            try {\n                const altBalance = await checkPokeCoinBalanceAlternative(walletAddress);\n                if (altBalance > 0) {\n                    balance = altBalance;\n                }\n            } catch (error) {\n                console.error(\"Error in alternative balance check:\", error);\n            }\n        }\n        return balance;\n    } catch (error) {\n        console.error(\"Error checking PokeCoin balance:\", error);\n        return 0;\n    }\n}\n/**\n * Burn 1 PokeCoin from the user's wallet (as a fungible asset)\n */ async function burnPokeCoin(wallet) {\n    try {\n        if (!wallet) {\n            throw new Error(\"Wallet not connected\");\n        }\n        console.log(\"Attempting to burn PokeCoin with wallet\");\n        // Create a transaction payload to burn 1 PokeCoin\n        const payload = {\n            type: \"entry_function_payload\",\n            function: \"\".concat(POKECOIN_ADDRESS, \"::pokecoin::burn_asset\"),\n            type_arguments: [],\n            arguments: [\n                \"1\"\n            ] // Burn 1 PokeCoin\n        };\n        console.log(\"Submitting transaction with payload:\", payload);\n        // Sign and submit the transaction\n        const transaction = await wallet.signAndSubmitTransaction(payload);\n        console.log(\"Transaction submitted:\", transaction);\n        // Wait for transaction confirmation\n        const client = new aptos__WEBPACK_IMPORTED_MODULE_0__.Types.Client(NODE_URL);\n        await client.waitForTransaction(transaction.hash);\n        console.log(\"Successfully burned 1 PokeCoin\", transaction.hash);\n        return true;\n    } catch (error) {\n        console.error(\"Error burning PokeCoin:\", error);\n        return false;\n    }\n}\n/**\n * Alternative implementation using direct API calls to check fungible asset balance\n */ async function checkPokeCoinBalanceAlternative(walletAddress) {\n    try {\n        console.log(\"Trying alternative method to check PokeCoin balance\");\n        // Get all fungible assets for the account\n        const response = await fetch(\"\".concat(NODE_URL, \"/accounts/\").concat(walletAddress, \"/fungible_assets\"));\n        console.log(\"Fungible assets response status:\", response.status);\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const assets = await response.json();\n        console.log(\"Found \".concat(assets.length, \" fungible assets\"));\n        // Find PokeCoin among the assets\n        for (const asset of assets){\n            if (asset.metadata && asset.metadata.creator === POKECOIN_ADDRESS) {\n                console.log(\"Found PokeCoin in fungible assets:\", asset);\n                return parseInt(asset.amount);\n            }\n        }\n        return 0;\n    } catch (error) {\n        console.error(\"Error checking PokeCoin balance:\", error);\n        return 0;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC91dGlscy9wb2tlVXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt1SEFFOEI7QUFFOUIsMEJBQTBCO0FBQzFCLE1BQU1DLG1CQUFtQjtBQUV6QixpQ0FBaUM7QUFDakMsTUFBTUMsV0FBVztBQUVqQjs7Q0FFQyxHQUNNLGVBQWVDLHFCQUFxQkMsYUFBcUI7SUFDOUQsSUFBSTtRQUNGQyxRQUFRQyxHQUFHLENBQUMseUNBQXlDRjtRQUVyRCwrREFBK0Q7UUFDL0QsTUFBTUcsZUFBZ0I7UUFDdEIsMkVBQTJFO1FBRTNFLGtHQUFrRztRQUNsRyw4Q0FBOEM7UUFDOUMsbURBQW1EO1FBQ25ELDBCQUEwQjtRQUcxQixvQ0FBb0M7UUFDcEMsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLEdBQXdCTCxPQUFyQkYsVUFBUyxjQUEwQixPQUFkRSxlQUFjO1FBQ25FQyxRQUFRQyxHQUFHLENBQUMsOEJBQThCRSxTQUFTRSxNQUFNO1FBRXpELElBQUksQ0FBQ0YsU0FBU0csRUFBRSxFQUFFO1lBQ2hCLE1BQU0sSUFBSUMsTUFBTSx1QkFBdUMsT0FBaEJKLFNBQVNFLE1BQU07UUFDeEQ7UUFFQSxNQUFNRyxZQUFZLE1BQU1MLFNBQVNNLElBQUk7UUFDckNULFFBQVFDLEdBQUcsQ0FBQyxTQUEwQixPQUFqQk8sVUFBVUUsTUFBTSxFQUFDO1FBQ3RDLE1BQU1DLElBQUksTUFBTVAsTUFBTSxHQUF3QkwsT0FBckJGLFVBQVMsY0FBcUNLLE9BQXpCSCxlQUFjLGFBQXdCLE9BQWJHO1FBQ3ZFRixRQUFRQyxHQUFHLENBQUMsb0JBQW9CVTtRQUNoQyxNQUFNQyxJQUFJLE1BQU1ELEVBQUVGLElBQUk7UUFDdEJULFFBQVFDLEdBQUcsQ0FBQyxTQUFXLE9BQUZXLEdBQUU7UUFLdkIsNkNBQTZDO1FBQzdDLElBQUlDLFVBQVU7UUFDZCxLQUFLLE1BQU1DLFlBQVlOLFVBQVc7WUFDaEMsSUFBSU0sU0FBU0MsSUFBSSxDQUFDQyxVQUFVLENBQUNkLGVB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bEQsT0FBT2pCLFNBQVNpQixNQUFNQyxNQUFNO1lBQzlCO1FBQ0Y7UUFFQSxPQUFPO0lBQ1QsRUFBRSxPQUFPakIsT0FBTztRQUNkdEIsUUFBUXNCLEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvZnVqaWF3YW5nL0Rlc2t0b3AvY2hhdGJvdC9hcHAvdXRpbHMvcG9rZVV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyBUeXBlcyB9IGZyb20gXCJhcHRvc1wiO1xuXG4vLyBQb2tlQ29pbiBtb2R1bGUgYWRkcmVzc1xuY29uc3QgUE9LRUNPSU5fQUREUkVTUyA9IFwiMHgwNjZlYmI5ODJjNDkyYzBkNWIxZjJiODA4OTc1NmY4M2ZkMzFkNDUxNmNkOWExZmMwYjYzYjQ5NjFlNGVlYWZkXCI7XG5cbi8vIFVzZSBtYWlubmV0IGluc3RlYWQgb2YgdGVzdG5ldFxuY29uc3QgTk9ERV9VUkwgPSBcImh0dHBzOi8vYXBpLm1haW5uZXQuYXB0b3NsYWJzLmNvbS92MVwiO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgd2FsbGV0IGhhcyBlbm91Z2ggUG9rZUNvaW4gYmFsYW5jZSAoYXMgYSBmdW5naWJsZSBhc3NldClcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrUG9rZUNvaW5CYWxhbmNlKHdhbGxldEFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coXCJDaGVja2luZyBQb2tlQ29pbiBiYWxhbmNlIGZvciB3YWxsZXQ6XCIsIHdhbGxldEFkZHJlc3MpO1xuICAgIFxuICAgIC8vIEZvciBmdW5naWJsZSBhc3NldHMsIHdlIG5lZWQgdG8gY2hlY2sgdGhlIEZ1bmdpYmxlQXNzZXRTdG9yZVxuICAgIGNvbnN0IHJlc291cmNlVHlwZSA9IGAweDE6OmZ1bmdpYmxlX2Fzc2V0OjpGdW5naWJsZVN0b3JlYDtcbiAgICAvLyBjb25zdCByZXNvdXJjZVR5cGUgPSBgMHgxOjpmdW5naWJsZV9hc3NldDo6QmFsYW5jZTwke1BPS0VDT0lOX0FERFJFU1N9YDtcblxuICAgIC8vIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7Tk9ERV9VUkx9L2FjY291bnRzLyR7d2FsbGV0QWRkcmVzc30vcmVzb3VyY2UvJHtyZXNvdXJjZVR5cGV9YCk7XG4gICAgLy8gY29uc3QgcmVzb3VyY2VEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIC8vIGNvbnN0IGJhbGFuY2UgPSByZXNvdXJjZURhdGE/LmRhdGE/LmFtb3VudCA/PyAwO1xuICAgIC8vIHJldHVybiBOdW1iZXIoYmFsYW5jZSk7XG5cbiAgICBcbiAgICAvLyBHZXQgYWxsIHJlc291cmNlcyBmb3IgdGhlIGFjY291bnRcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke05PREVfVVJMfS9hY2NvdW50cy8ke3dhbGxldEFkZHJlc3N9L3Jlc291cmNlc2ApO1xuICAgIGNvbnNvbGUubG9nKFwiUmVzb3VyY2VzIHJlc3BvbnNlIHN0YXR1czpcIiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICBcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlc291cmNlcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zb2xlLmxvZyhgRm91bmQgJHtyZXNvdXJjZXMubGVuZ3RofSByZXNvdXJjZXNgKTtcbiAgICBjb25zdCBhID0gYXdhaXQgZmV0Y2goYCR7Tk9ERV9VUkx9L2FjY291bnRzLyR7d2FsbGV0QWRkcmVzc30vYmFsYW5jZS8ke3Jlc291cmNlVHlwZX1gKTtcbiAgICBjb25zb2xlLmxvZyhcIm5hc2pua2FqbnNramFuc2FcIiwgYSlcbiAgICBjb25zdCBiID0gYXdhaXQgYS5qc29uKCk7XG4gICAgY29uc29sZS5sb2coYEZvdW5kICR7Yn0gUG9rZUNvaW5gKTtcblxuXG5cbiAgICBcbiAgICAvLyBGaW5kIHRoZSBmdW5naWJsZSBhc3NldCBzdG9yZSBmb3IgUG9rZUNvaW5cbiAgICBsZXQgYmFsYW5jZSA9IDA7XG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBvZiByZXNvdXJjZXMpIHtcbiAgICAgIGlmIChyZXNvdXJjZS50eXBlLnN0YXJ0c1dpdGgocmVzb3VyY2VUeXBlKSkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGlzIHN0b3JlIGNvbnRhaW5zIG91ciBQb2tlQ29pbiBhc3NldFxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEdldCB0aGUgbWV0YWRhdGEgdG8gY2hlY2sgaWYgdGhpcyBpcyBQb2tlQ29pblxuICAgICAgICAgIGNvbnN0IG1ldGFkYXRhUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtOT0RFX1VSTH0vZnVuZ2libGVfYXNzZXRfbWV0YWRhdGEvJHtyZXNvdXJjZS5kYXRhLm1ldGFkYXRhfWApO1xuICAgICAgICAgIGlmIChtZXRhZGF0YVJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IG1ldGFkYXRhUmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBvdXIgUG9rZUNvaW5cbiAgICAgICAgICAgIGlmIChtZXRhZGF0YS5jcmVhdG9yID09PSBQT0tFQ09JTl9BRERSRVNTKSB7XG4gICAgICAgICAgICAgIGJhbGFuY2UgPSBwYXJzZUludChyZXNvdXJjZS5kYXRhLmJhbGFuY2UpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIFBva2VDb2luIGJhbGFuY2U6XCIsIGJhbGFuY2UpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNoZWNraW5nIGFzc2V0IG1ldGFkYXRhOlwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gSWYgd2UgZGlkbid0IGZpbmQgaXQgdGhyb3VnaCByZXNvdXJjZXMsIHRyeSB0aGUgYWx0ZXJuYXRpdmUgbWV0aG9kXG4gICAgaWYgKGJhbGFuY2UgPT09IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFsdEJhbGFuY2UgPSBhd2FpdCBjaGVja1Bva2VDb2luQmFsYW5jZUFsdGVybmF0aXZlKHdhbGxldEFkZHJlc3MpO1xuICAgICAgICBpZiAoYWx0QmFsYW5jZSA+IDApIHtcbiAgICAgICAgICBiYWxhbmNlID0gYWx0QmFsYW5jZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGFsdGVybmF0aXZlIGJhbGFuY2UgY2hlY2s6XCIsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGJhbGFuY2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNoZWNraW5nIFBva2VDb2luIGJhbGFuY2U6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG4vKipcbiAqIEJ1cm4gMSBQb2tlQ29pbiBmcm9tIHRoZSB1c2VyJ3Mgd2FsbGV0IChhcyBhIGZ1bmdpYmxlIGFzc2V0KVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVyblBva2VDb2luKHdhbGxldDogYW55KTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgaWYgKCF3YWxsZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldhbGxldCBub3QgY29ubmVjdGVkXCIpO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIkF0dGVtcHRpbmcgdG8gYnVybiBQb2tlQ29pbiB3aXRoIHdhbGxldFwiKTtcbiAgICBcbiAgICAvLyBDcmVhdGUgYSB0cmFuc2FjdGlvbiBwYXlsb2FkIHRvIGJ1cm4gMSBQb2tlQ29pblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICB0eXBlOiBcImVudHJ5X2Z1bmN0aW9uX3BheWxvYWRcIixcbiAgICAgIGZ1bmN0aW9uOiBgJHtQT0tFQ09JTl9BRERSRVNTfTo6cG9rZWNvaW46OmJ1cm5fYXNzZXRgLFxuICAgICAgdHlwZV9hcmd1bWVudHM6IFtdLFxuICAgICAgYXJndW1lbnRzOiBbXCIxXCJdIC8vIEJ1cm4gMSBQb2tlQ29pblxuICAgIH07XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJTdWJtaXR0aW5nIHRyYW5zYWN0aW9uIHdpdGggcGF5bG9hZDpcIiwgcGF5bG9hZCk7XG4gICAgXG4gICAgLy8gU2lnbiBhbmQgc3VibWl0IHRoZSB0cmFuc2FjdGlvblxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgd2FsbGV0LnNpZ25BbmRTdWJtaXRUcmFuc2FjdGlvbihwYXlsb2FkKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIlRyYW5zYWN0aW9uIHN1Ym1pdHRlZDpcIiwgdHJhbnNhY3Rpb24pO1xuICAgIFxuICAgIC8vIFdhaXQgZm9yIHRyYW5zYWN0aW9uIGNvbmZpcm1hdGlvblxuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBUeXBlcy5DbGllbnQoTk9ERV9VUkwpO1xuICAgIGF3YWl0IGNsaWVudC53YWl0Rm9yVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24uaGFzaCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJTdWNjZXNzZnVsbHkgYnVybmVkIDEgUG9rZUNvaW5cIiwgdHJhbnNhY3Rpb24uaGFzaCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGJ1cm5pbmcgUG9rZUNvaW46XCIsIGVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBBbHRlcm5hdGl2ZSBpbXBsZW1lbnRhdGlvbiB1c2luZyBkaXJlY3QgQVBJIGNhbGxzIHRvIGNoZWNrIGZ1bmdpYmxlIGFzc2V0IGJhbGFuY2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrUG9rZUNvaW5CYWxhbmNlQWx0ZXJuYXRpdmUod2FsbGV0QWRkcmVzczogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhcIlRyeWluZyBhbHRlcm5hdGl2ZSBtZXRob2QgdG8gY2hlY2sgUG9rZUNvaW4gYmFsYW5jZVwiKTtcbiAgICBcbiAgICAvLyBHZXQgYWxsIGZ1bmdpYmxlIGFzc2V0cyBmb3IgdGhlIGFjY291bnRcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke05PREVfVVJMfS9hY2NvdW50cy8ke3dhbGxldEFkZHJlc3N9L2Z1bmdpYmxlX2Fzc2V0c2ApO1xuICAgIGNvbnNvbGUubG9nKFwiRnVuZ2libGUgYXNzZXRzIHJlc3BvbnNlIHN0YXR1czpcIiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICBcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGFzc2V0cyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zb2xlLmxvZyhgRm91bmQgJHthc3NldHMubGVuZ3RofSBmdW5naWJsZSBhc3NldHNgKTtcbiAgICBcbiAgICAvLyBGaW5kIFBva2VDb2luIGFtb25nIHRoZSBhc3NldHNcbiAgICBmb3IgKGNvbnN0IGFzc2V0IG9mIGFzc2V0cykge1xuICAgICAgaWYgKGFzc2V0Lm1ldGFkYXRhICYmIGFzc2V0Lm1ldGFkYXRhLmNyZWF0b3IgPT09IFBPS0VDT0lOX0FERFJFU1MpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJGb3VuZCBQb2tlQ29pbiBpbiBmdW5naWJsZSBhc3NldHM6XCIsIGFzc2V0KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGFzc2V0LmFtb3VudCk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiAwO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjaGVja2luZyBQb2tlQ29pbiBiYWxhbmNlOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIlR5cGVzIiwiUE9LRUNPSU5fQUREUkVTUyIsIk5PREVfVVJMIiwiY2hlY2tQb2tlQ29pbkJhbGFuY2UiLCJ3YWxsZXRBZGRyZXNzIiwiY29uc29sZSIsImxvZyIsInJlc291cmNlVHlwZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJzdGF0dXMiLCJvayIsIkVycm9yIiwicmVzb3VyY2VzIiwianNvbiIsImxlbmd0aCIsImEiLCJiIiwiYmFsYW5jZSIsInJlc291cmNlIiwidHlwZSIsInN0YXJ0c1dpdGgiLCJtZXRhZGF0YVJlc3BvbnNlIiwiZGF0YSIsIm1ldGFkYXRhIiwiY3JlYXRvciIsInBhcnNlSW50IiwiZXJyb3IiLCJhbHRCYWxhbmNlIiwiY2hlY2tQb2tlQ29pbkJhbGFuY2VBbHRlcm5hdGl2ZSIsImJ1cm5Qb2tlQ29pbiIsIndhbGxldCIsInBheWxvYWQiLCJmdW5jdGlvbiIsInR5cGVfYXJndW1lbnRzIiwiYXJndW1lbnRzIiwidHJhbnNhY3Rpb24iLCJzaWduQW5kU3VibWl0VHJhbnNhY3Rpb24iLCJjbGllbnQiLCJDbGllbnQiLCJ3YWl0Rm9yVHJhbnNhY3Rpb24iLCJoYXNoIiwiYXNzZXRzIiwiYXNzZXQiLCJhbW91bnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/pokeUtils.ts\n"));

/***/ })

});