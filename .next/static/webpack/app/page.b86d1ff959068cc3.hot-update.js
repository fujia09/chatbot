"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/utils/pokeUtils.ts":
/*!********************************!*\
  !*** ./app/utils/pokeUtils.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POKECOIN_DECIMALS: () => (/* binding */ POKECOIN_DECIMALS),\n/* harmony export */   checkPokeCoinBalance: () => (/* binding */ checkPokeCoinBalance),\n/* harmony export */   sendPokeCoin: () => (/* binding */ sendPokeCoin),\n/* harmony export */   sendPokeCoinAlternative: () => (/* binding */ sendPokeCoinAlternative)\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"(app-pages-browser)/./node_modules/.pnpm/aptos@1.21.0/node_modules/aptos/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ POKECOIN_DECIMALS,checkPokeCoinBalance,sendPokeCoin,sendPokeCoinAlternative auto */ \n// PokeCoin module address\n// const POKECOIN_ADDRESS = \"0x066ebb982c492c0d5b1f2b8089756f83fd31d4516cd9a1fc0b63b4961e4eeafd\";\nconst POKECOIN_ADDRESS = \"0xb6e33eae3e6875918b3178360845e35ba6de59f85fe71461a64207d5211ef8fd\";\n// Recipient address for PokeCoin payments\nconst RECIPIENT_ADDRESS = \"0x991116f7109cf49bff184086d89f8a69773d3ceda1817c35b9bd3c9baf8c64dd\";\n// Use mainnet GraphQL endpoint\nconst GRAPHQL_URL = \"https://indexer.mainnet.aptoslabs.com/v1/graphql\";\nconst NODE_URL = \"https://fullnode.mainnet.aptoslabs.com/v1\";\n// Add this constant at the top of the file\nconst POKECOIN_DECIMALS = 10000; // 1 AptosInfoCoin = 1,000,000 units\n/**\n * Check if a wallet has enough AptosInfoCoin balance using GraphQL\n */ async function checkPokeCoinBalance(walletAddress) {\n    try {\n        console.log(\"Checking AptosInfoCoin balance for wallet:\", walletAddress);\n        // GraphQL query to get fungible asset balances\n        const query = \"\\n      query GetFungibleAssetBalances($address: String) {\\n        current_fungible_asset_balances(\\n          where: {owner_address: {_eq: $address}},\\n          limit: 100,\\n          order_by: {amount: desc}\\n        ) {\\n          asset_type\\n          amount\\n          __typename\\n        }\\n      }\\n    \";\n        // Execute the GraphQL query\n        const response = await fetch(GRAPHQL_URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                query,\n                variables: {\n                    address: walletAddress\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"GraphQL request failed: \".concat(response.status));\n        }\n        const result = await response.json();\n        console.log(\"GraphQL response:\", result);\n        if (result.errors) {\n            throw new Error(\"GraphQL errors: \".concat(JSON.stringify(result.errors)));\n        }\n        // Find AptosInfoCoin in the balances\n        const balances = result.data.current_fungible_asset_balances;\n        console.log(\"Found \".concat(balances.length, \" fungible asset balances\"));\n        for (const balance of balances){\n            console.log(\"Asset: \".concat(balance.asset_type, \", Amount: \").concat(balance.amount));\n            // Check if this is AptosInfoCoin by looking for the address in the asset_type\n            if (balance.asset_type.includes(POKECOIN_ADDRESS)) {\n                const rawAmount = parseInt(balance.amount);\n                const infoCoins = rawAmount / POKECOIN_DECIMALS;\n                console.log(\"Found AptosInfoCoin balance:\", rawAmount, \"(\".concat(infoCoins, \" AptosInfoCoin)\"));\n                return rawAmount;\n            }\n        }\n        console.log(\"No AptosInfoCoin balance found\");\n        return 0;\n    } catch (error) {\n        console.error(\"Error checking AptosInfoCoin balance:\", error);\n        return 0;\n    }\n}\n/**\n * Send 1 AptosInfoCoin from the user's wallet to the recipient address\n */ async function sendPokeCoin(wallet) {\n    try {\n        if (!wallet) {\n            throw new Error(\"Wallet not connected\");\n        }\n        console.log(\"Attempting to send 1 AptosInfoCoin (\".concat(POKECOIN_DECIMALS, \" units) to \").concat(RECIPIENT_ADDRESS));\n        // Use the primary_fungible_store::transfer function with the correct type parameters\n        const payload = {\n            type: \"entry_function_payload\",\n            function: \"0x1::primary_fungible_store::transfer\",\n            type_arguments: [\n                \"0x1::object::ObjectCore\" // T: key parameter\n            ],\n            arguments: [\n                POKECOIN_ADDRESS,\n                RECIPIENT_ADDRESS,\n                POKECOIN_DECIMALS.toString() // amount: u64 - Send 1,000,000 units = 1 AptosInfoCoin\n            ]\n        };\n        console.log(\"Submitting transaction with payload:\", payload);\n        // Sign and submit the transaction\n        const transaction = await wallet.signAndSubmitTransaction(payload);\n        console.log(\"Transaction submitted:\", transaction);\n        // Wait for transaction confirmation\n        const client = new aptos__WEBPACK_IMPORTED_MODULE_0__.Types.Client(\"https://fullnode.mainnet.aptoslabs.com/v1\");\n        await client.waitForTransaction(transaction.hash);\n        console.log(\"Successfully sent 1 AptosInfoCoin\", transaction.hash);\n        return true;\n    } catch (error) {\n        console.error(\"Error sending AptosInfoCoin:\", error);\n        // For development/testing, return success anyway if needed\n        if (true) {\n            console.log(\"Development mode: Returning success despite error\");\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Alternative implementation to send 1 AptosInfoCoin\n */ async function sendPokeCoinAlternative(wallet) {\n    try {\n        if (!wallet) {\n            throw new Error(\"Wallet not connected\");\n        }\n        console.log(\"Attempting to send 1 AptosInfoCoin (\".concat(POKECOIN_DECIMALS, \" units) using alternative method\"));\n        // Try with primary_fungible_store::transfer but a different type parameter\n        const payload = {\n            type: \"entry_function_payload\",\n            function: \"0x1::primary_fungible_store::transfer\",\n            type_arguments: [\n                \"\".concat(POKECOIN_ADDRESS, \"::fungible_asset::FungibleAsset\") // Try a different type parameter\n            ],\n            arguments: [\n                POKECOIN_ADDRESS,\n                RECIPIENT_ADDRESS,\n                POKECOIN_DECIMALS.toString() // amount: u64 - Send 1,000,000 units = 1 AptosInfoCoin\n            ]\n        };\n        console.log(\"Submitting transaction with payload:\", payload);\n        // Sign and submit the transaction\n        const transaction = await wallet.signAndSubmitTransaction(payload);\n        console.log(\"Transaction submitted:\", transaction);\n        // Wait for transaction confirmation\n        const client = new aptos__WEBPACK_IMPORTED_MODULE_0__.Types.Client(\"https://fullnode.mainnet.aptoslabs.com/v1\");\n        await client.waitForTransaction(transaction.hash);\n        console.log(\"Successfully sent 1 AptosInfoCoin\", transaction.hash);\n        return true;\n    } catch (error) {\n        console.error(\"Error sending AptosInfoCoin:\", error);\n        // For development/testing, return success anyway if needed\n        if (true) {\n            console.log(\"Development mode: Returning success despite error\");\n            return true;\n        }\n        return false;\n    }\n} /**\n * Try sending AptosInfoCoin using the standard coin transfer\n */  // export async function sendPokeCoinUsingCoin(wallet: any): Promise<boolean> {\n //   try {\n //     if (!wallet) {\n //       throw new Error(\"Wallet not connected\");\n //     }\n //     console.log(`Attempting to send 1 AptosInfoCoin (${POKECOIN_DECIMALS} units) using coin::transfer`);\n //     // Try with the standard coin transfer\n //     const payload = {\n //       type: \"entry_function_payload\",\n //       function: \"0x1::coin::transfer\",\n //       type_arguments: [\n //         `${POKECOIN_ADDRESS}::fungible_asset::PokeCoin` // Try a different type parameter\n //       ],\n //       arguments: [\n //         RECIPIENT_ADDRESS, // Recipient address\n //         POKECOIN_DECIMALS.toString() // amount: u64 - Send 1,000,000 units = 1 AptosInfoCoin\n //       ]\n //     };\n //     console.log(\"Submitting transaction with payload:\", payload);\n //     // Sign and submit the transaction\n //     const transaction = await wallet.signAndSubmitTransaction(payload);\n //     console.log(\"Transaction submitted:\", transaction);\n //     // Wait for transaction confirmation\n //     const client = new Types.Client(\"https://fullnode.mainnet.aptoslabs.com/v1\");\n //     await client.waitForTransaction(transaction.hash);\n //     console.log(\"Successfully sent 1 AptosInfoCoin\", transaction.hash);\n //     return true;\n //   } catch (error) {\n //     console.error(\"Error sending AptosInfoCoin:\", error);\n //     // For development/testing, return success anyway if needed\n //     if (process.env.NODE_ENV === 'development') {\n //       console.log(\"Development mode: Returning success despite error\");\n //       return true;\n //     }\n //     return false;\n //   }\n // }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/pokeUtils.ts\n"));

/***/ })

});