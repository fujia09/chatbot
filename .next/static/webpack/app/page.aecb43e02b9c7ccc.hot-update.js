"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/utils/pokeUtils.ts":
/*!********************************!*\
  !*** ./app/utils/pokeUtils.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   burnPokeCoin: () => (/* binding */ burnPokeCoin),\n/* harmony export */   checkPokeCoinBalance: () => (/* binding */ checkPokeCoinBalance),\n/* harmony export */   checkPokeCoinBalanceAlternative: () => (/* binding */ checkPokeCoinBalanceAlternative)\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"(app-pages-browser)/./node_modules/.pnpm/aptos@1.21.0/node_modules/aptos/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ checkPokeCoinBalance,burnPokeCoin,checkPokeCoinBalanceAlternative auto */ \n// PokeCoin module address\nconst POKECOIN_ADDRESS = \"0x066ebb982c492c0d5b1f2b8089756f83fd31d4516cd9a1fc0b63b4961e4eeafd\";\n/**\n * Check if a wallet has enough PokeCoin balance (as a fungible asset)\n */ async function checkPokeCoinBalance(walletAddress) {\n    try {\n        // Create a client to interact with the Aptos blockchain\n        const nodeUrl = \"https://fullnode.testnet.aptoslabs.com/v1\";\n        // For fungible assets, we need to check the FungibleAssetStore\n        const resourceType = \"0x1::fungible_asset::FungibleStore\";\n        // Get all resources for the account\n        const response = await fetch(\"\".concat(nodeUrl, \"/accounts/\").concat(walletAddress, \"/resources\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const resources = await response.json();\n        // Find the fungible asset store for PokeCoin\n        let balance = 0;\n        for (const resource of resources){\n            if (resource.type.startsWith(resourceType)) {\n                // Check if this store contains our PokeCoin asset\n                try {\n                    // Get the metadata to check if this is PokeCoin\n                    const metadataResponse = await fetch(\"\".concat(nodeUrl, \"/fungible_asset_metadata/\").concat(resource.data.metadata));\n                    if (metadataResponse.ok) {\n                        const metadata = await metadataResponse.json();\n                        // Check if this is our PokeCoin\n                        if (metadata.creator === POKECOIN_ADDRESS) {\n                            balance = parseInt(resource.data.balance);\n                            break;\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Error checking asset metadata:\", error);\n                }\n            }\n        }\n        return balance;\n    } catch (error) {\n        console.error(\"Error checking PokeCoin balance:\", error);\n        return 0;\n    }\n}\n/**\n * Burn 1 PokeCoin from the user's wallet (as a fungible asset)\n */ async function burnPokeCoin(wallet) {\n    try {\n        if (!wallet) {\n            throw new Error(\"Wallet not connected\");\n        }\n        // Create a transaction payload to burn 1 PokeCoin\n        // For fungible assets, we need to use the fungible_asset module\n        const payload = {\n            type: \"entry_function_payload\",\n            function: \"\".concat(POKECOIN_ADDRESS, \"::pokecoin::burn_asset\"),\n            type_arguments: [],\n            arguments: [\n                \"1\"\n            ] // Burn 1 PokeCoin\n        };\n        // Sign and submit the transaction\n        const transaction = await wallet.signAndSubmitTransaction(payload);\n        // Wait for transaction confirmation\n        const client = new aptos__WEBPACK_IMPORTED_MODULE_0__.Types.Client(\"https://fullnode.testnet.aptoslabs.com/v1\");\n        await client.waitForTransaction(transaction.hash);\n        console.log(\"Successfully burned 1 PokeCoin\", transaction.hash);\n        return true;\n    } catch (error) {\n        console.error(\"Error burning PokeCoin:\", error);\n        return false;\n    }\n}\n/**\n * Alternative implementation using direct API calls to check fungible asset balance\n */ async function checkPokeCoinBalanceAlternative(walletAddress) {\n    try {\n        const nodeUrl = \"https://fullnode.testnet.aptoslabs.com/v1\";\n        // Get all fungible assets for the account\n        const response = await fetch(\"\".concat(nodeUrl, \"/accounts/\").concat(walletAddress, \"/fungible_assets\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const assets = await response.json();\n        // Find PokeCoin among the assets\n        for (const asset of assets){\n            if (asset.metadata.creator === POKECOIN_ADDRESS) {\n                return parseInt(asset.amount);\n            }\n        }\n        return 0;\n    } catch (error) {\n        console.error(\"Error checking PokeCoin balance:\", error);\n        return 0;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/pokeUtils.ts\n"));

/***/ })

});